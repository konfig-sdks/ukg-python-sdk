# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.compensation_details_get_all_by_company200_response import CompensationDetailsGetAllByCompany200Response as CompensationDetailsGetAllByCompany200ResponseSchema
from ukg_python_sdk.model.compensation_details_get_all_by_company500_response import CompensationDetailsGetAllByCompany500Response as CompensationDetailsGetAllByCompany500ResponseSchema
from ukg_python_sdk.model.compensation_details_get_all_by_company_response import CompensationDetailsGetAllByCompanyResponse as CompensationDetailsGetAllByCompanyResponseSchema

from ukg_python_sdk.type.compensation_details_get_all_by_company500_response import CompensationDetailsGetAllByCompany500Response
from ukg_python_sdk.type.compensation_details_get_all_by_company_response import CompensationDetailsGetAllByCompanyResponse
from ukg_python_sdk.type.compensation_details_get_all_by_company200_response import CompensationDetailsGetAllByCompany200Response

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.compensation_details_get_all_by_company200_response import CompensationDetailsGetAllByCompany200Response as CompensationDetailsGetAllByCompany200ResponsePydantic
from ukg_python_sdk.pydantic.compensation_details_get_all_by_company500_response import CompensationDetailsGetAllByCompany500Response as CompensationDetailsGetAllByCompany500ResponsePydantic
from ukg_python_sdk.pydantic.compensation_details_get_all_by_company_response import CompensationDetailsGetAllByCompanyResponse as CompensationDetailsGetAllByCompanyResponsePydantic

# Query params


class CompanyIdSchema(
    schemas.StrSchema
):
    pass


class EmployeeIdSchema(
    schemas.StrSchema
):
    pass


class PrimaryJobCodeSchema(
    schemas.StrSchema
):
    pass


class JobGroupCodeSchema(
    schemas.StrSchema
):
    pass


class JobTitleSchema(
    schemas.StrSchema
):
    pass


class PayGroupCodeSchema(
    schemas.StrSchema
):
    pass


class FullTimeOrPartTimeCodeSchema(
    schemas.StrSchema
):
    pass


class SalaryOrHourlyCodeSchema(
    schemas.StrSchema
):
    pass


class PrimaryShiftCodeSchema(
    schemas.StrSchema
):
    pass


class PrimaryShiftGroupCodeSchema(
    schemas.StrSchema
):
    pass
DateInJobSchema = schemas.StrSchema
DateLastPaidSchema = schemas.StrSchema
DatePaidThruSchema = schemas.StrSchema


class IsAutoAllocatedSchema(
    schemas.StrSchema
):
    pass


class IsAutoPaidSchema(
    schemas.StrSchema
):
    pass


class IsSeasonalWorkerSchema(
    schemas.StrSchema
):
    pass


class IsHighlyCompensatedSchema(
    schemas.StrSchema
):
    pass


class IsMultipleJobSchema(
    schemas.StrSchema
):
    pass


class PerformanceReviewRatingSchema(
    schemas.StrSchema
):
    pass


class PerformanceReviewTypeSchema(
    schemas.StrSchema
):
    pass


class PageSchema(
    schemas.Int32Schema
):
    pass


class PerPageSchema(
    schemas.Int32Schema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
        'primaryJobCode': typing.Union[PrimaryJobCodeSchema, str, ],
        'jobGroupCode': typing.Union[JobGroupCodeSchema, str, ],
        'jobTitle': typing.Union[JobTitleSchema, str, ],
        'payGroupCode': typing.Union[PayGroupCodeSchema, str, ],
        'fullTimeOrPartTimeCode': typing.Union[FullTimeOrPartTimeCodeSchema, str, ],
        'salaryOrHourlyCode': typing.Union[SalaryOrHourlyCodeSchema, str, ],
        'primaryShiftCode': typing.Union[PrimaryShiftCodeSchema, str, ],
        'primaryShiftGroupCode': typing.Union[PrimaryShiftGroupCodeSchema, str, ],
        'dateInJob': typing.Union[DateInJobSchema, str, ],
        'dateLastPaid': typing.Union[DateLastPaidSchema, str, ],
        'datePaidThru': typing.Union[DatePaidThruSchema, str, ],
        'isAutoAllocated': typing.Union[IsAutoAllocatedSchema, str, ],
        'isAutoPaid': typing.Union[IsAutoPaidSchema, str, ],
        'isSeasonalWorker': typing.Union[IsSeasonalWorkerSchema, str, ],
        'isHighlyCompensated': typing.Union[IsHighlyCompensatedSchema, str, ],
        'isMultipleJob': typing.Union[IsMultipleJobSchema, str, ],
        'performanceReviewRating': typing.Union[PerformanceReviewRatingSchema, str, ],
        'performanceReviewType': typing.Union[PerformanceReviewTypeSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_Page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_company_id2 = api_client.QueryParameter(
    name="companyId",
    style=api_client.ParameterStyle.FORM,
    schema=CompanyIdSchema,
    explode=True,
)
request_query_employee_id = api_client.QueryParameter(
    name="employeeId",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeIdSchema,
    explode=True,
)
request_query_primary_job_code = api_client.QueryParameter(
    name="primaryJobCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryJobCodeSchema,
    explode=True,
)
request_query_job_group_code = api_client.QueryParameter(
    name="jobGroupCode",
    style=api_client.ParameterStyle.FORM,
    schema=JobGroupCodeSchema,
    explode=True,
)
request_query_job_title = api_client.QueryParameter(
    name="jobTitle",
    style=api_client.ParameterStyle.FORM,
    schema=JobTitleSchema,
    explode=True,
)
request_query_pay_group_code = api_client.QueryParameter(
    name="payGroupCode",
    style=api_client.ParameterStyle.FORM,
    schema=PayGroupCodeSchema,
    explode=True,
)
request_query_full_time_or_part_time_code = api_client.QueryParameter(
    name="fullTimeOrPartTimeCode",
    style=api_client.ParameterStyle.FORM,
    schema=FullTimeOrPartTimeCodeSchema,
    explode=True,
)
request_query_salary_or_hourly_code = api_client.QueryParameter(
    name="salaryOrHourlyCode",
    style=api_client.ParameterStyle.FORM,
    schema=SalaryOrHourlyCodeSchema,
    explode=True,
)
request_query_primary_shift_code = api_client.QueryParameter(
    name="primaryShiftCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryShiftCodeSchema,
    explode=True,
)
request_query_primary_shift_group_code = api_client.QueryParameter(
    name="primaryShiftGroupCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryShiftGroupCodeSchema,
    explode=True,
)
request_query_date_in_job = api_client.QueryParameter(
    name="dateInJob",
    style=api_client.ParameterStyle.FORM,
    schema=DateInJobSchema,
    explode=True,
)
request_query_date_last_paid = api_client.QueryParameter(
    name="dateLastPaid",
    style=api_client.ParameterStyle.FORM,
    schema=DateLastPaidSchema,
    explode=True,
)
request_query_date_paid_thru = api_client.QueryParameter(
    name="datePaidThru",
    style=api_client.ParameterStyle.FORM,
    schema=DatePaidThruSchema,
    explode=True,
)
request_query_is_auto_allocated = api_client.QueryParameter(
    name="isAutoAllocated",
    style=api_client.ParameterStyle.FORM,
    schema=IsAutoAllocatedSchema,
    explode=True,
)
request_query_is_auto_paid = api_client.QueryParameter(
    name="isAutoPaid",
    style=api_client.ParameterStyle.FORM,
    schema=IsAutoPaidSchema,
    explode=True,
)
request_query_is_seasonal_worker = api_client.QueryParameter(
    name="isSeasonalWorker",
    style=api_client.ParameterStyle.FORM,
    schema=IsSeasonalWorkerSchema,
    explode=True,
)
request_query_is_highly_compensated = api_client.QueryParameter(
    name="isHighlyCompensated",
    style=api_client.ParameterStyle.FORM,
    schema=IsHighlyCompensatedSchema,
    explode=True,
)
request_query_is_multiple_job = api_client.QueryParameter(
    name="isMultipleJob",
    style=api_client.ParameterStyle.FORM,
    schema=IsMultipleJobSchema,
    explode=True,
)
request_query_performance_review_rating = api_client.QueryParameter(
    name="performanceReviewRating",
    style=api_client.ParameterStyle.FORM,
    schema=PerformanceReviewRatingSchema,
    explode=True,
)
request_query_performance_review_type = api_client.QueryParameter(
    name="performanceReviewType",
    style=api_client.ParameterStyle.FORM,
    schema=PerformanceReviewTypeSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_Page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
# Path params
CompanyIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="companyId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = CompensationDetailsGetAllByCompanyResponseSchema
SchemaFor200ResponseBodyTextJson = CompensationDetailsGetAllByCompany200ResponseSchema
SchemaFor200ResponseBodyApplicationProblemjson = CompensationDetailsGetAllByCompany200ResponseSchema
SchemaFor200ResponseBodyApplicationXml = CompensationDetailsGetAllByCompany200ResponseSchema
SchemaFor200ResponseBodyTextXml = CompensationDetailsGetAllByCompany200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: CompensationDetailsGetAllByCompanyResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: CompensationDetailsGetAllByCompanyResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
)
SchemaFor500ResponseBodyApplicationJson = CompensationDetailsGetAllByCompany500ResponseSchema
SchemaFor500ResponseBodyTextJson = CompensationDetailsGetAllByCompany500ResponseSchema
SchemaFor500ResponseBodyApplicationProblemjson = CompensationDetailsGetAllByCompany500ResponseSchema
SchemaFor500ResponseBodyApplicationXml = CompensationDetailsGetAllByCompany500ResponseSchema
SchemaFor500ResponseBodyTextXml = CompensationDetailsGetAllByCompany500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: CompensationDetailsGetAllByCompany500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: CompensationDetailsGetAllByCompany500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'text/json',
    'application/problem+json',
    'application/xml',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_all_by_company_mapped_args(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if company_id2 is not None:
            _query_params["companyId"] = company_id2
        if employee_id is not None:
            _query_params["employeeId"] = employee_id
        if primary_job_code is not None:
            _query_params["primaryJobCode"] = primary_job_code
        if job_group_code is not None:
            _query_params["jobGroupCode"] = job_group_code
        if job_title is not None:
            _query_params["jobTitle"] = job_title
        if pay_group_code is not None:
            _query_params["payGroupCode"] = pay_group_code
        if full_time_or_part_time_code is not None:
            _query_params["fullTimeOrPartTimeCode"] = full_time_or_part_time_code
        if salary_or_hourly_code is not None:
            _query_params["salaryOrHourlyCode"] = salary_or_hourly_code
        if primary_shift_code is not None:
            _query_params["primaryShiftCode"] = primary_shift_code
        if primary_shift_group_code is not None:
            _query_params["primaryShiftGroupCode"] = primary_shift_group_code
        if date_in_job is not None:
            _query_params["dateInJob"] = date_in_job
        if date_last_paid is not None:
            _query_params["dateLastPaid"] = date_last_paid
        if date_paid_thru is not None:
            _query_params["datePaidThru"] = date_paid_thru
        if is_auto_allocated is not None:
            _query_params["isAutoAllocated"] = is_auto_allocated
        if is_auto_paid is not None:
            _query_params["isAutoPaid"] = is_auto_paid
        if is_seasonal_worker is not None:
            _query_params["isSeasonalWorker"] = is_seasonal_worker
        if is_highly_compensated is not None:
            _query_params["isHighlyCompensated"] = is_highly_compensated
        if is_multiple_job is not None:
            _query_params["isMultipleJob"] = is_multiple_job
        if performance_review_rating is not None:
            _query_params["performanceReviewRating"] = performance_review_rating
        if performance_review_type is not None:
            _query_params["performanceReviewType"] = performance_review_type
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_Page"] = per_page
        if company_id is not None:
            _path_params["companyId"] = company_id
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_all_by_company_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get all compensation details by company
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id2,
            request_query_employee_id,
            request_query_primary_job_code,
            request_query_job_group_code,
            request_query_job_title,
            request_query_pay_group_code,
            request_query_full_time_or_part_time_code,
            request_query_salary_or_hourly_code,
            request_query_primary_shift_code,
            request_query_primary_shift_group_code,
            request_query_date_in_job,
            request_query_date_last_paid,
            request_query_date_paid_thru,
            request_query_is_auto_allocated,
            request_query_is_auto_paid,
            request_query_is_seasonal_worker,
            request_query_is_highly_compensated,
            request_query_is_multiple_job,
            request_query_performance_review_rating,
            request_query_performance_review_type,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/personnel/v1/companies/{companyId}/compensation-details',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_all_by_company_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get all compensation details by company
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id2,
            request_query_employee_id,
            request_query_primary_job_code,
            request_query_job_group_code,
            request_query_job_title,
            request_query_pay_group_code,
            request_query_full_time_or_part_time_code,
            request_query_salary_or_hourly_code,
            request_query_primary_shift_code,
            request_query_primary_shift_group_code,
            request_query_date_in_job,
            request_query_date_last_paid,
            request_query_date_paid_thru,
            request_query_is_auto_allocated,
            request_query_is_auto_paid,
            request_query_is_seasonal_worker,
            request_query_is_highly_compensated,
            request_query_is_multiple_job,
            request_query_performance_review_rating,
            request_query_performance_review_type,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/personnel/v1/companies/{companyId}/compensation-details',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetAllByCompanyRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_all_by_company(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_all_by_company_mapped_args(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
        )
        return await self._aget_all_by_company_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_all_by_company(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_all_by_company_mapped_args(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
        )
        return self._get_all_by_company_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetAllByCompany(BaseApi):

    async def aget_all_by_company(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> CompensationDetailsGetAllByCompanyResponsePydantic:
        raw_response = await self.raw.aget_all_by_company(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
            **kwargs,
        )
        if validate:
            return RootModel[CompensationDetailsGetAllByCompanyResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(CompensationDetailsGetAllByCompanyResponsePydantic, raw_response.body)
    
    
    def get_all_by_company(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
    ) -> CompensationDetailsGetAllByCompanyResponsePydantic:
        raw_response = self.raw.get_all_by_company(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
        )
        if validate:
            return RootModel[CompensationDetailsGetAllByCompanyResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(CompensationDetailsGetAllByCompanyResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_all_by_company_mapped_args(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
        )
        return await self._aget_all_by_company_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_group_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        pay_group_code: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        salary_or_hourly_code: typing.Optional[str] = None,
        primary_shift_code: typing.Optional[str] = None,
        primary_shift_group_code: typing.Optional[str] = None,
        date_in_job: typing.Optional[str] = None,
        date_last_paid: typing.Optional[str] = None,
        date_paid_thru: typing.Optional[str] = None,
        is_auto_allocated: typing.Optional[str] = None,
        is_auto_paid: typing.Optional[str] = None,
        is_seasonal_worker: typing.Optional[str] = None,
        is_highly_compensated: typing.Optional[str] = None,
        is_multiple_job: typing.Optional[str] = None,
        performance_review_rating: typing.Optional[str] = None,
        performance_review_type: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_all_by_company_mapped_args(
            company_id=company_id,
            company_id2=company_id2,
            employee_id=employee_id,
            primary_job_code=primary_job_code,
            job_group_code=job_group_code,
            job_title=job_title,
            pay_group_code=pay_group_code,
            full_time_or_part_time_code=full_time_or_part_time_code,
            salary_or_hourly_code=salary_or_hourly_code,
            primary_shift_code=primary_shift_code,
            primary_shift_group_code=primary_shift_group_code,
            date_in_job=date_in_job,
            date_last_paid=date_last_paid,
            date_paid_thru=date_paid_thru,
            is_auto_allocated=is_auto_allocated,
            is_auto_paid=is_auto_paid,
            is_seasonal_worker=is_seasonal_worker,
            is_highly_compensated=is_highly_compensated,
            is_multiple_job=is_multiple_job,
            performance_review_rating=performance_review_rating,
            performance_review_type=performance_review_type,
            page=page,
            per_page=per_page,
        )
        return self._get_all_by_company_oapg(
            query_params=args.query,
            path_params=args.path,
        )

