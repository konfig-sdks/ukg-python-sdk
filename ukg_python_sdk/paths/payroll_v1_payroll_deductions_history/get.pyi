# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.payroll_deductions_history_get500_response import PayrollDeductionsHistoryGet500Response as PayrollDeductionsHistoryGet500ResponseSchema
from ukg_python_sdk.model.payroll_deductions_history_get_response import PayrollDeductionsHistoryGetResponse as PayrollDeductionsHistoryGetResponseSchema
from ukg_python_sdk.model.payroll_deductions_history_get404_response import PayrollDeductionsHistoryGet404Response as PayrollDeductionsHistoryGet404ResponseSchema
from ukg_python_sdk.model.payroll_deductions_history_get200_response import PayrollDeductionsHistoryGet200Response as PayrollDeductionsHistoryGet200ResponseSchema

from ukg_python_sdk.type.payroll_deductions_history_get200_response import PayrollDeductionsHistoryGet200Response
from ukg_python_sdk.type.payroll_deductions_history_get404_response import PayrollDeductionsHistoryGet404Response
from ukg_python_sdk.type.payroll_deductions_history_get_response import PayrollDeductionsHistoryGetResponse
from ukg_python_sdk.type.payroll_deductions_history_get500_response import PayrollDeductionsHistoryGet500Response

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.payroll_deductions_history_get404_response import PayrollDeductionsHistoryGet404Response as PayrollDeductionsHistoryGet404ResponsePydantic
from ukg_python_sdk.pydantic.payroll_deductions_history_get200_response import PayrollDeductionsHistoryGet200Response as PayrollDeductionsHistoryGet200ResponsePydantic
from ukg_python_sdk.pydantic.payroll_deductions_history_get_response import PayrollDeductionsHistoryGetResponse as PayrollDeductionsHistoryGetResponsePydantic
from ukg_python_sdk.pydantic.payroll_deductions_history_get500_response import PayrollDeductionsHistoryGet500Response as PayrollDeductionsHistoryGet500ResponsePydantic

# Query params


class EmployeeIdSchema(
    schemas.StrSchema
):
    pass
CompanyIdSchema = schemas.StrSchema
CheckIdSchema = schemas.StrSchema
EmployeeNumberSchema = schemas.StrSchema
DeductionCodeSchema = schemas.StrSchema
DeductionTypeSchema = schemas.StrSchema
BenefitOptionSchema = schemas.StrSchema
BenefitProviderSchema = schemas.StrSchema
PayGroupSchema = schemas.StrSchema
PeriodControlSchema = schemas.StrSchema
PayDateSchema = schemas.DateTimeSchema
Is401KSchema = schemas.StrSchema
Is403BSchema = schemas.StrSchema
Is408KSchema = schemas.StrSchema
Is408PSchema = schemas.StrSchema
Is457Schema = schemas.StrSchema
Is457BSchema = schemas.StrSchema
Is457FSchema = schemas.StrSchema
Is501CSchema = schemas.StrSchema
IsD125Schema = schemas.StrSchema
IsDeductionOffSetSchema = schemas.StrSchema
IsDeferredCompensationSchema = schemas.StrSchema
IsDependentCareSchema = schemas.StrSchema
IsHousingSchema = schemas.StrSchema
IsNonQualifiedPlanSchema = schemas.StrSchema
StartPerControlSchema = schemas.StrSchema
EndPerControlSchema = schemas.StrSchema


class PageSchema(
    schemas.Int32Schema
):
    pass


class PerPageSchema(
    schemas.Int32Schema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'checkId': typing.Union[CheckIdSchema, str, ],
        'employeeNumber': typing.Union[EmployeeNumberSchema, str, ],
        'deductionCode': typing.Union[DeductionCodeSchema, str, ],
        'deductionType': typing.Union[DeductionTypeSchema, str, ],
        'benefitOption': typing.Union[BenefitOptionSchema, str, ],
        'benefitProvider': typing.Union[BenefitProviderSchema, str, ],
        'payGroup': typing.Union[PayGroupSchema, str, ],
        'periodControl': typing.Union[PeriodControlSchema, str, ],
        'payDate': typing.Union[PayDateSchema, str, datetime, ],
        'is401K': typing.Union[Is401KSchema, str, ],
        'is403B': typing.Union[Is403BSchema, str, ],
        'is408K': typing.Union[Is408KSchema, str, ],
        'is408P': typing.Union[Is408PSchema, str, ],
        'is457': typing.Union[Is457Schema, str, ],
        'is457B': typing.Union[Is457BSchema, str, ],
        'is457F': typing.Union[Is457FSchema, str, ],
        'is501C': typing.Union[Is501CSchema, str, ],
        'isD125': typing.Union[IsD125Schema, str, ],
        'isDeductionOffSet': typing.Union[IsDeductionOffSetSchema, str, ],
        'isDeferredCompensation': typing.Union[IsDeferredCompensationSchema, str, ],
        'isDependentCare': typing.Union[IsDependentCareSchema, str, ],
        'isHousing': typing.Union[IsHousingSchema, str, ],
        'isNonQualifiedPlan': typing.Union[IsNonQualifiedPlanSchema, str, ],
        'startPerControl': typing.Union[StartPerControlSchema, str, ],
        'endPerControl': typing.Union[EndPerControlSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_Page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_employee_id = api_client.QueryParameter(
    name="employeeId",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeIdSchema,
    explode=True,
)
request_query_company_id = api_client.QueryParameter(
    name="companyId",
    style=api_client.ParameterStyle.FORM,
    schema=CompanyIdSchema,
    explode=True,
)
request_query_check_id = api_client.QueryParameter(
    name="checkId",
    style=api_client.ParameterStyle.FORM,
    schema=CheckIdSchema,
    explode=True,
)
request_query_employee_number = api_client.QueryParameter(
    name="employeeNumber",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeNumberSchema,
    explode=True,
)
request_query_deduction_code = api_client.QueryParameter(
    name="deductionCode",
    style=api_client.ParameterStyle.FORM,
    schema=DeductionCodeSchema,
    explode=True,
)
request_query_deduction_type = api_client.QueryParameter(
    name="deductionType",
    style=api_client.ParameterStyle.FORM,
    schema=DeductionTypeSchema,
    explode=True,
)
request_query_benefit_option = api_client.QueryParameter(
    name="benefitOption",
    style=api_client.ParameterStyle.FORM,
    schema=BenefitOptionSchema,
    explode=True,
)
request_query_benefit_provider = api_client.QueryParameter(
    name="benefitProvider",
    style=api_client.ParameterStyle.FORM,
    schema=BenefitProviderSchema,
    explode=True,
)
request_query_pay_group = api_client.QueryParameter(
    name="payGroup",
    style=api_client.ParameterStyle.FORM,
    schema=PayGroupSchema,
    explode=True,
)
request_query_period_control = api_client.QueryParameter(
    name="periodControl",
    style=api_client.ParameterStyle.FORM,
    schema=PeriodControlSchema,
    explode=True,
)
request_query_pay_date = api_client.QueryParameter(
    name="payDate",
    style=api_client.ParameterStyle.FORM,
    schema=PayDateSchema,
    explode=True,
)
request_query_is401_k = api_client.QueryParameter(
    name="is401K",
    style=api_client.ParameterStyle.FORM,
    schema=Is401KSchema,
    explode=True,
)
request_query_is403_b = api_client.QueryParameter(
    name="is403B",
    style=api_client.ParameterStyle.FORM,
    schema=Is403BSchema,
    explode=True,
)
request_query_is408_k = api_client.QueryParameter(
    name="is408K",
    style=api_client.ParameterStyle.FORM,
    schema=Is408KSchema,
    explode=True,
)
request_query_is408_p = api_client.QueryParameter(
    name="is408P",
    style=api_client.ParameterStyle.FORM,
    schema=Is408PSchema,
    explode=True,
)
request_query_is457 = api_client.QueryParameter(
    name="is457",
    style=api_client.ParameterStyle.FORM,
    schema=Is457Schema,
    explode=True,
)
request_query_is457_b = api_client.QueryParameter(
    name="is457B",
    style=api_client.ParameterStyle.FORM,
    schema=Is457BSchema,
    explode=True,
)
request_query_is457_f = api_client.QueryParameter(
    name="is457F",
    style=api_client.ParameterStyle.FORM,
    schema=Is457FSchema,
    explode=True,
)
request_query_is501_c = api_client.QueryParameter(
    name="is501C",
    style=api_client.ParameterStyle.FORM,
    schema=Is501CSchema,
    explode=True,
)
request_query_is_d125 = api_client.QueryParameter(
    name="isD125",
    style=api_client.ParameterStyle.FORM,
    schema=IsD125Schema,
    explode=True,
)
request_query_is_deduction_off_set = api_client.QueryParameter(
    name="isDeductionOffSet",
    style=api_client.ParameterStyle.FORM,
    schema=IsDeductionOffSetSchema,
    explode=True,
)
request_query_is_deferred_compensation = api_client.QueryParameter(
    name="isDeferredCompensation",
    style=api_client.ParameterStyle.FORM,
    schema=IsDeferredCompensationSchema,
    explode=True,
)
request_query_is_dependent_care = api_client.QueryParameter(
    name="isDependentCare",
    style=api_client.ParameterStyle.FORM,
    schema=IsDependentCareSchema,
    explode=True,
)
request_query_is_housing = api_client.QueryParameter(
    name="isHousing",
    style=api_client.ParameterStyle.FORM,
    schema=IsHousingSchema,
    explode=True,
)
request_query_is_non_qualified_plan = api_client.QueryParameter(
    name="isNonQualifiedPlan",
    style=api_client.ParameterStyle.FORM,
    schema=IsNonQualifiedPlanSchema,
    explode=True,
)
request_query_start_per_control = api_client.QueryParameter(
    name="startPerControl",
    style=api_client.ParameterStyle.FORM,
    schema=StartPerControlSchema,
    explode=True,
)
request_query_end_per_control = api_client.QueryParameter(
    name="endPerControl",
    style=api_client.ParameterStyle.FORM,
    schema=EndPerControlSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_Page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = PayrollDeductionsHistoryGetResponseSchema
SchemaFor200ResponseBodyTextJson = PayrollDeductionsHistoryGet200ResponseSchema
SchemaFor200ResponseBodyApplicationProblemjson = PayrollDeductionsHistoryGet200ResponseSchema
SchemaFor200ResponseBodyApplicationXml = PayrollDeductionsHistoryGet200ResponseSchema
SchemaFor200ResponseBodyTextXml = PayrollDeductionsHistoryGet200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: PayrollDeductionsHistoryGetResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: PayrollDeductionsHistoryGetResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor404ResponseBodyApplicationJson = PayrollDeductionsHistoryGet404ResponseSchema
SchemaFor404ResponseBodyTextJson = PayrollDeductionsHistoryGet404ResponseSchema
SchemaFor404ResponseBodyApplicationProblemjson = PayrollDeductionsHistoryGet404ResponseSchema
SchemaFor404ResponseBodyApplicationXml = PayrollDeductionsHistoryGet404ResponseSchema
SchemaFor404ResponseBodyTextXml = PayrollDeductionsHistoryGet404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: PayrollDeductionsHistoryGet404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: PayrollDeductionsHistoryGet404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextXml),
    },
)
SchemaFor500ResponseBodyApplicationJson = PayrollDeductionsHistoryGet500ResponseSchema
SchemaFor500ResponseBodyTextJson = PayrollDeductionsHistoryGet500ResponseSchema
SchemaFor500ResponseBodyApplicationProblemjson = PayrollDeductionsHistoryGet500ResponseSchema
SchemaFor500ResponseBodyApplicationXml = PayrollDeductionsHistoryGet500ResponseSchema
SchemaFor500ResponseBodyTextXml = PayrollDeductionsHistoryGet500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: PayrollDeductionsHistoryGet500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: PayrollDeductionsHistoryGet500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'text/json',
    'application/problem+json',
    'application/xml',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_mapped_args(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if employee_id is not None:
            _query_params["employeeId"] = employee_id
        if company_id is not None:
            _query_params["companyId"] = company_id
        if check_id is not None:
            _query_params["checkId"] = check_id
        if employee_number is not None:
            _query_params["employeeNumber"] = employee_number
        if deduction_code is not None:
            _query_params["deductionCode"] = deduction_code
        if deduction_type is not None:
            _query_params["deductionType"] = deduction_type
        if benefit_option is not None:
            _query_params["benefitOption"] = benefit_option
        if benefit_provider is not None:
            _query_params["benefitProvider"] = benefit_provider
        if pay_group is not None:
            _query_params["payGroup"] = pay_group
        if period_control is not None:
            _query_params["periodControl"] = period_control
        if pay_date is not None:
            _query_params["payDate"] = pay_date
        if is401_k is not None:
            _query_params["is401K"] = is401_k
        if is403_b is not None:
            _query_params["is403B"] = is403_b
        if is408_k is not None:
            _query_params["is408K"] = is408_k
        if is408_p is not None:
            _query_params["is408P"] = is408_p
        if is457 is not None:
            _query_params["is457"] = is457
        if is457_b is not None:
            _query_params["is457B"] = is457_b
        if is457_f is not None:
            _query_params["is457F"] = is457_f
        if is501_c is not None:
            _query_params["is501C"] = is501_c
        if is_d125 is not None:
            _query_params["isD125"] = is_d125
        if is_deduction_off_set is not None:
            _query_params["isDeductionOffSet"] = is_deduction_off_set
        if is_deferred_compensation is not None:
            _query_params["isDeferredCompensation"] = is_deferred_compensation
        if is_dependent_care is not None:
            _query_params["isDependentCare"] = is_dependent_care
        if is_housing is not None:
            _query_params["isHousing"] = is_housing
        if is_non_qualified_plan is not None:
            _query_params["isNonQualifiedPlan"] = is_non_qualified_plan
        if start_per_control is not None:
            _query_params["startPerControl"] = start_per_control
        if end_per_control is not None:
            _query_params["endPerControl"] = end_per_control
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_Page"] = per_page
        args.query = _query_params
        return args

    async def _aget_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Payroll Deductions History
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_employee_id,
            request_query_company_id,
            request_query_check_id,
            request_query_employee_number,
            request_query_deduction_code,
            request_query_deduction_type,
            request_query_benefit_option,
            request_query_benefit_provider,
            request_query_pay_group,
            request_query_period_control,
            request_query_pay_date,
            request_query_is401_k,
            request_query_is403_b,
            request_query_is408_k,
            request_query_is408_p,
            request_query_is457,
            request_query_is457_b,
            request_query_is457_f,
            request_query_is501_c,
            request_query_is_d125,
            request_query_is_deduction_off_set,
            request_query_is_deferred_compensation,
            request_query_is_dependent_care,
            request_query_is_housing,
            request_query_is_non_qualified_plan,
            request_query_start_per_control,
            request_query_end_per_control,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/payroll/v1/payroll-deductions-history',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Payroll Deductions History
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_employee_id,
            request_query_company_id,
            request_query_check_id,
            request_query_employee_number,
            request_query_deduction_code,
            request_query_deduction_type,
            request_query_benefit_option,
            request_query_benefit_provider,
            request_query_pay_group,
            request_query_period_control,
            request_query_pay_date,
            request_query_is401_k,
            request_query_is403_b,
            request_query_is408_k,
            request_query_is408_p,
            request_query_is457,
            request_query_is457_b,
            request_query_is457_f,
            request_query_is501_c,
            request_query_is_d125,
            request_query_is_deduction_off_set,
            request_query_is_deferred_compensation,
            request_query_is_dependent_care,
            request_query_is_housing,
            request_query_is_non_qualified_plan,
            request_query_start_per_control,
            request_query_end_per_control,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/payroll/v1/payroll-deductions-history',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_mapped_args(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
        )
        return await self._aget_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_mapped_args(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
        )
        return self._get_oapg(
            query_params=args.query,
        )

class Get(BaseApi):

    async def aget(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> PayrollDeductionsHistoryGetResponsePydantic:
        raw_response = await self.raw.aget(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
            **kwargs,
        )
        if validate:
            return RootModel[PayrollDeductionsHistoryGetResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(PayrollDeductionsHistoryGetResponsePydantic, raw_response.body)
    
    
    def get(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
    ) -> PayrollDeductionsHistoryGetResponsePydantic:
        raw_response = self.raw.get(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
        )
        if validate:
            return RootModel[PayrollDeductionsHistoryGetResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(PayrollDeductionsHistoryGetResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_mapped_args(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
        )
        return await self._aget_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        employee_id: typing.Optional[str] = None,
        company_id: typing.Optional[str] = None,
        check_id: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        deduction_code: typing.Optional[str] = None,
        deduction_type: typing.Optional[str] = None,
        benefit_option: typing.Optional[str] = None,
        benefit_provider: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        period_control: typing.Optional[str] = None,
        pay_date: typing.Optional[datetime] = None,
        is401_k: typing.Optional[str] = None,
        is403_b: typing.Optional[str] = None,
        is408_k: typing.Optional[str] = None,
        is408_p: typing.Optional[str] = None,
        is457: typing.Optional[str] = None,
        is457_b: typing.Optional[str] = None,
        is457_f: typing.Optional[str] = None,
        is501_c: typing.Optional[str] = None,
        is_d125: typing.Optional[str] = None,
        is_deduction_off_set: typing.Optional[str] = None,
        is_deferred_compensation: typing.Optional[str] = None,
        is_dependent_care: typing.Optional[str] = None,
        is_housing: typing.Optional[str] = None,
        is_non_qualified_plan: typing.Optional[str] = None,
        start_per_control: typing.Optional[str] = None,
        end_per_control: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_mapped_args(
            employee_id=employee_id,
            company_id=company_id,
            check_id=check_id,
            employee_number=employee_number,
            deduction_code=deduction_code,
            deduction_type=deduction_type,
            benefit_option=benefit_option,
            benefit_provider=benefit_provider,
            pay_group=pay_group,
            period_control=period_control,
            pay_date=pay_date,
            is401_k=is401_k,
            is403_b=is403_b,
            is408_k=is408_k,
            is408_p=is408_p,
            is457=is457,
            is457_b=is457_b,
            is457_f=is457_f,
            is501_c=is501_c,
            is_d125=is_d125,
            is_deduction_off_set=is_deduction_off_set,
            is_deferred_compensation=is_deferred_compensation,
            is_dependent_care=is_dependent_care,
            is_housing=is_housing,
            is_non_qualified_plan=is_non_qualified_plan,
            start_per_control=start_per_control,
            end_per_control=end_per_control,
            page=page,
            per_page=per_page,
        )
        return self._get_oapg(
            query_params=args.query,
        )

