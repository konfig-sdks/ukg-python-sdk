# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.earnings_get_configurations_filtered_by_parameter_response import EarningsGetConfigurationsFilteredByParameterResponse as EarningsGetConfigurationsFilteredByParameterResponseSchema
from ukg_python_sdk.model.earnings_get_configurations_filtered_by_parameter200_response import EarningsGetConfigurationsFilteredByParameter200Response as EarningsGetConfigurationsFilteredByParameter200ResponseSchema
from ukg_python_sdk.model.earnings_get_configurations_filtered_by_parameter500_response import EarningsGetConfigurationsFilteredByParameter500Response as EarningsGetConfigurationsFilteredByParameter500ResponseSchema

from ukg_python_sdk.type.earnings_get_configurations_filtered_by_parameter500_response import EarningsGetConfigurationsFilteredByParameter500Response
from ukg_python_sdk.type.earnings_get_configurations_filtered_by_parameter_response import EarningsGetConfigurationsFilteredByParameterResponse
from ukg_python_sdk.type.earnings_get_configurations_filtered_by_parameter200_response import EarningsGetConfigurationsFilteredByParameter200Response

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.earnings_get_configurations_filtered_by_parameter500_response import EarningsGetConfigurationsFilteredByParameter500Response as EarningsGetConfigurationsFilteredByParameter500ResponsePydantic
from ukg_python_sdk.pydantic.earnings_get_configurations_filtered_by_parameter200_response import EarningsGetConfigurationsFilteredByParameter200Response as EarningsGetConfigurationsFilteredByParameter200ResponsePydantic
from ukg_python_sdk.pydantic.earnings_get_configurations_filtered_by_parameter_response import EarningsGetConfigurationsFilteredByParameterResponse as EarningsGetConfigurationsFilteredByParameterResponsePydantic

from . import path

# Query params
EarningCodeSchema = schemas.StrSchema
IncludeInAccrualsSchema = schemas.StrSchema
IncludeInDeferredCompensationSchema = schemas.BoolSchema
IncludeInDeferredCompensationHoursSchema = schemas.BoolSchema


class PageSchema(
    schemas.Int32Schema
):


    class MetaOapg:
        format = 'int32'
        inclusive_maximum = 2147483647
        inclusive_minimum = 1


class PerPageSchema(
    schemas.Int32Schema
):


    class MetaOapg:
        format = 'int32'
        inclusive_maximum = 2147483647
        inclusive_minimum = 1
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'earningCode': typing.Union[EarningCodeSchema, str, ],
        'includeInAccruals': typing.Union[IncludeInAccrualsSchema, str, ],
        'includeInDeferredCompensation': typing.Union[IncludeInDeferredCompensationSchema, bool, ],
        'includeInDeferredCompensationHours': typing.Union[IncludeInDeferredCompensationHoursSchema, bool, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_Page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_earning_code = api_client.QueryParameter(
    name="earningCode",
    style=api_client.ParameterStyle.FORM,
    schema=EarningCodeSchema,
    explode=True,
)
request_query_include_in_accruals = api_client.QueryParameter(
    name="includeInAccruals",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeInAccrualsSchema,
    explode=True,
)
request_query_include_in_deferred_compensation = api_client.QueryParameter(
    name="includeInDeferredCompensation",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeInDeferredCompensationSchema,
    explode=True,
)
request_query_include_in_deferred_compensation_hours = api_client.QueryParameter(
    name="includeInDeferredCompensationHours",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeInDeferredCompensationHoursSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_Page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
# Path params
CalculationRuleSchema = schemas.StrSchema
TaxCategorySchema = schemas.StrSchema
UseDeductionOffsetSchema = schemas.StrSchema
CountryCodeSchema = schemas.StrSchema
IncludeInShiftDiffrentialSchema = schemas.StrSchema
IncludeInManualCheckSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'calculationRule': typing.Union[CalculationRuleSchema, str, ],
        'taxCategory': typing.Union[TaxCategorySchema, str, ],
        'useDeductionOffset': typing.Union[UseDeductionOffsetSchema, str, ],
        'countryCode': typing.Union[CountryCodeSchema, str, ],
        'includeInShiftDiffrential': typing.Union[IncludeInShiftDiffrentialSchema, str, ],
        'includeInManualCheck': typing.Union[IncludeInManualCheckSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_calculation_rule = api_client.PathParameter(
    name="calculationRule",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CalculationRuleSchema,
    required=True,
)
request_path_tax_category = api_client.PathParameter(
    name="taxCategory",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TaxCategorySchema,
    required=True,
)
request_path_use_deduction_offset = api_client.PathParameter(
    name="useDeductionOffset",
    style=api_client.ParameterStyle.SIMPLE,
    schema=UseDeductionOffsetSchema,
    required=True,
)
request_path_country_code = api_client.PathParameter(
    name="countryCode",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CountryCodeSchema,
    required=True,
)
request_path_include_in_shift_diffrential = api_client.PathParameter(
    name="includeInShiftDiffrential",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IncludeInShiftDiffrentialSchema,
    required=True,
)
request_path_include_in_manual_check = api_client.PathParameter(
    name="includeInManualCheck",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IncludeInManualCheckSchema,
    required=True,
)
_auth = [
    'OauthSecurity',
]
SchemaFor200ResponseBodyApplicationJson = EarningsGetConfigurationsFilteredByParameterResponseSchema
SchemaFor200ResponseBodyTextJson = EarningsGetConfigurationsFilteredByParameter200ResponseSchema
SchemaFor200ResponseBodyApplicationProblemjson = EarningsGetConfigurationsFilteredByParameter200ResponseSchema
SchemaFor200ResponseBodyApplicationXml = EarningsGetConfigurationsFilteredByParameter200ResponseSchema
SchemaFor200ResponseBodyTextXml = EarningsGetConfigurationsFilteredByParameter200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: EarningsGetConfigurationsFilteredByParameterResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: EarningsGetConfigurationsFilteredByParameterResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
SchemaFor500ResponseBodyApplicationJson = EarningsGetConfigurationsFilteredByParameter500ResponseSchema
SchemaFor500ResponseBodyTextJson = EarningsGetConfigurationsFilteredByParameter500ResponseSchema
SchemaFor500ResponseBodyApplicationProblemjson = EarningsGetConfigurationsFilteredByParameter500ResponseSchema
SchemaFor500ResponseBodyApplicationXml = EarningsGetConfigurationsFilteredByParameter500ResponseSchema
SchemaFor500ResponseBodyTextXml = EarningsGetConfigurationsFilteredByParameter500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: EarningsGetConfigurationsFilteredByParameter500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: EarningsGetConfigurationsFilteredByParameter500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '404': _response_for_404,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'text/json',
    'application/problem+json',
    'application/xml',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_configurations_filtered_by_parameter_mapped_args(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if earning_code is not None:
            _query_params["earningCode"] = earning_code
        if include_in_accruals is not None:
            _query_params["includeInAccruals"] = include_in_accruals
        if include_in_deferred_compensation is not None:
            _query_params["includeInDeferredCompensation"] = include_in_deferred_compensation
        if include_in_deferred_compensation_hours is not None:
            _query_params["includeInDeferredCompensationHours"] = include_in_deferred_compensation_hours
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_Page"] = per_page
        if calculation_rule is not None:
            _path_params["calculationRule"] = calculation_rule
        if tax_category is not None:
            _path_params["taxCategory"] = tax_category
        if use_deduction_offset is not None:
            _path_params["useDeductionOffset"] = use_deduction_offset
        if country_code is not None:
            _path_params["countryCode"] = country_code
        if include_in_shift_diffrential is not None:
            _path_params["includeInShiftDiffrential"] = include_in_shift_diffrential
        if include_in_manual_check is not None:
            _path_params["includeInManualCheck"] = include_in_manual_check
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_configurations_filtered_by_parameter_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get list of earnings configurations filtered by Parameter including pagination params
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_calculation_rule,
            request_path_tax_category,
            request_path_use_deduction_offset,
            request_path_country_code,
            request_path_include_in_shift_diffrential,
            request_path_include_in_manual_check,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_earning_code,
            request_query_include_in_accruals,
            request_query_include_in_deferred_compensation,
            request_query_include_in_deferred_compensation_hours,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/configuration/v1/earnings/{calculationRule}/{taxCategory}/{useDeductionOffset}/{countryCode}/{includeInShiftDiffrential}/{includeInManualCheck}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_configurations_filtered_by_parameter_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get list of earnings configurations filtered by Parameter including pagination params
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_calculation_rule,
            request_path_tax_category,
            request_path_use_deduction_offset,
            request_path_country_code,
            request_path_include_in_shift_diffrential,
            request_path_include_in_manual_check,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_earning_code,
            request_query_include_in_accruals,
            request_query_include_in_deferred_compensation,
            request_query_include_in_deferred_compensation_hours,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/configuration/v1/earnings/{calculationRule}/{taxCategory}/{useDeductionOffset}/{countryCode}/{includeInShiftDiffrential}/{includeInManualCheck}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetConfigurationsFilteredByParameterRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_configurations_filtered_by_parameter(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_configurations_filtered_by_parameter_mapped_args(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
        )
        return await self._aget_configurations_filtered_by_parameter_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_configurations_filtered_by_parameter(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_configurations_filtered_by_parameter_mapped_args(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
        )
        return self._get_configurations_filtered_by_parameter_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetConfigurationsFilteredByParameter(BaseApi):

    async def aget_configurations_filtered_by_parameter(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> EarningsGetConfigurationsFilteredByParameterResponsePydantic:
        raw_response = await self.raw.aget_configurations_filtered_by_parameter(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
            **kwargs,
        )
        if validate:
            return RootModel[EarningsGetConfigurationsFilteredByParameterResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(EarningsGetConfigurationsFilteredByParameterResponsePydantic, raw_response.body)
    
    
    def get_configurations_filtered_by_parameter(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
    ) -> EarningsGetConfigurationsFilteredByParameterResponsePydantic:
        raw_response = self.raw.get_configurations_filtered_by_parameter(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
        )
        if validate:
            return RootModel[EarningsGetConfigurationsFilteredByParameterResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(EarningsGetConfigurationsFilteredByParameterResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_configurations_filtered_by_parameter_mapped_args(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
        )
        return await self._aget_configurations_filtered_by_parameter_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        calculation_rule: str,
        tax_category: str,
        use_deduction_offset: str,
        country_code: str,
        include_in_shift_diffrential: str,
        include_in_manual_check: str,
        earning_code: typing.Optional[str] = None,
        include_in_accruals: typing.Optional[str] = None,
        include_in_deferred_compensation: typing.Optional[bool] = None,
        include_in_deferred_compensation_hours: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_configurations_filtered_by_parameter_mapped_args(
            calculation_rule=calculation_rule,
            tax_category=tax_category,
            use_deduction_offset=use_deduction_offset,
            country_code=country_code,
            include_in_shift_diffrential=include_in_shift_diffrential,
            include_in_manual_check=include_in_manual_check,
            earning_code=earning_code,
            include_in_accruals=include_in_accruals,
            include_in_deferred_compensation=include_in_deferred_compensation,
            include_in_deferred_compensation_hours=include_in_deferred_compensation_hours,
            page=page,
            per_page=per_page,
        )
        return self._get_configurations_filtered_by_parameter_oapg(
            query_params=args.query,
            path_params=args.path,
        )

