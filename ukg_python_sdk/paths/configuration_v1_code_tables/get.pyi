# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.code_tables_get_info404_response import CodeTablesGetInfo404Response as CodeTablesGetInfo404ResponseSchema
from ukg_python_sdk.model.code_tables_get_info200_response import CodeTablesGetInfo200Response as CodeTablesGetInfo200ResponseSchema
from ukg_python_sdk.model.code_tables_get_info429_response import CodeTablesGetInfo429Response as CodeTablesGetInfo429ResponseSchema
from ukg_python_sdk.model.code_tables_get_info403_response import CodeTablesGetInfo403Response as CodeTablesGetInfo403ResponseSchema
from ukg_python_sdk.model.code_tables_get_info_response import CodeTablesGetInfoResponse as CodeTablesGetInfoResponseSchema

from ukg_python_sdk.type.code_tables_get_info404_response import CodeTablesGetInfo404Response
from ukg_python_sdk.type.code_tables_get_info429_response import CodeTablesGetInfo429Response
from ukg_python_sdk.type.code_tables_get_info403_response import CodeTablesGetInfo403Response
from ukg_python_sdk.type.code_tables_get_info200_response import CodeTablesGetInfo200Response
from ukg_python_sdk.type.code_tables_get_info_response import CodeTablesGetInfoResponse

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.code_tables_get_info429_response import CodeTablesGetInfo429Response as CodeTablesGetInfo429ResponsePydantic
from ukg_python_sdk.pydantic.code_tables_get_info403_response import CodeTablesGetInfo403Response as CodeTablesGetInfo403ResponsePydantic
from ukg_python_sdk.pydantic.code_tables_get_info_response import CodeTablesGetInfoResponse as CodeTablesGetInfoResponsePydantic
from ukg_python_sdk.pydantic.code_tables_get_info404_response import CodeTablesGetInfo404Response as CodeTablesGetInfo404ResponsePydantic
from ukg_python_sdk.pydantic.code_tables_get_info200_response import CodeTablesGetInfo200Response as CodeTablesGetInfo200ResponsePydantic

SchemaFor200ResponseBodyApplicationJson = CodeTablesGetInfoResponseSchema
SchemaFor200ResponseBodyTextJson = CodeTablesGetInfo200ResponseSchema
SchemaFor200ResponseBodyApplicationProblemjson = CodeTablesGetInfo200ResponseSchema
SchemaFor200ResponseBodyApplicationXml = CodeTablesGetInfo200ResponseSchema
SchemaFor200ResponseBodyTextXml = CodeTablesGetInfo200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: CodeTablesGetInfoResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: CodeTablesGetInfoResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)
SchemaFor403ResponseBodyApplicationJson = CodeTablesGetInfo403ResponseSchema
SchemaFor403ResponseBodyTextJson = CodeTablesGetInfo403ResponseSchema
SchemaFor403ResponseBodyApplicationProblemjson = CodeTablesGetInfo403ResponseSchema
SchemaFor403ResponseBodyApplicationXml = CodeTablesGetInfo403ResponseSchema
SchemaFor403ResponseBodyTextXml = CodeTablesGetInfo403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: CodeTablesGetInfo403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: CodeTablesGetInfo403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextXml),
    },
)
SchemaFor404ResponseBodyApplicationJson = CodeTablesGetInfo404ResponseSchema
SchemaFor404ResponseBodyTextJson = CodeTablesGetInfo404ResponseSchema
SchemaFor404ResponseBodyApplicationProblemjson = CodeTablesGetInfo404ResponseSchema
SchemaFor404ResponseBodyApplicationXml = CodeTablesGetInfo404ResponseSchema
SchemaFor404ResponseBodyTextXml = CodeTablesGetInfo404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: CodeTablesGetInfo404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: CodeTablesGetInfo404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor404ResponseBodyTextXml),
    },
)
SchemaFor429ResponseBodyApplicationJson = CodeTablesGetInfo429ResponseSchema
SchemaFor429ResponseBodyTextJson = CodeTablesGetInfo429ResponseSchema
SchemaFor429ResponseBodyApplicationProblemjson = CodeTablesGetInfo429ResponseSchema
SchemaFor429ResponseBodyApplicationXml = CodeTablesGetInfo429ResponseSchema
SchemaFor429ResponseBodyTextXml = CodeTablesGetInfo429ResponseSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: CodeTablesGetInfo429Response


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: CodeTablesGetInfo429Response


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'text/json',
    'application/problem+json',
    'application/xml',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_info_mapped_args(
        self,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        return args

    async def _aget_info_oapg(
        self,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Code Tables information
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/configuration/v1/code-tables',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_info_oapg(
        self,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Code Tables information
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/configuration/v1/code-tables',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetInfoRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_info(
        self,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_info_mapped_args(
        )
        return await self._aget_info_oapg(
            **kwargs,
        )
    
    def get_info(
        self,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_info_mapped_args(
        )
        return self._get_info_oapg(
        )

class GetInfo(BaseApi):

    async def aget_info(
        self,
        validate: bool = False,
        **kwargs,
    ) -> CodeTablesGetInfoResponsePydantic:
        raw_response = await self.raw.aget_info(
            **kwargs,
        )
        if validate:
            return RootModel[CodeTablesGetInfoResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(CodeTablesGetInfoResponsePydantic, raw_response.body)
    
    
    def get_info(
        self,
        validate: bool = False,
    ) -> CodeTablesGetInfoResponsePydantic:
        raw_response = self.raw.get_info(
        )
        if validate:
            return RootModel[CodeTablesGetInfoResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(CodeTablesGetInfoResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_info_mapped_args(
        )
        return await self._aget_info_oapg(
            **kwargs,
        )
    
    def get(
        self,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_info_mapped_args(
        )
        return self._get_info_oapg(
        )

