# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.new_hires_create_single_new_hire_request import NewHiresCreateSingleNewHireRequest as NewHiresCreateSingleNewHireRequestSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_request_organization_levels import NewHiresCreateSingleNewHireRequestOrganizationLevels as NewHiresCreateSingleNewHireRequestOrganizationLevelsSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire409_response import NewHiresCreateSingleNewHire409Response as NewHiresCreateSingleNewHire409ResponseSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire400_response import NewHiresCreateSingleNewHire400Response as NewHiresCreateSingleNewHire400ResponseSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_response import NewHiresCreateSingleNewHireResponse as NewHiresCreateSingleNewHireResponseSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_request_contact_information import NewHiresCreateSingleNewHireRequestContactInformation as NewHiresCreateSingleNewHireRequestContactInformationSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_request_mentor import NewHiresCreateSingleNewHireRequestMentor as NewHiresCreateSingleNewHireRequestMentorSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_request_job import NewHiresCreateSingleNewHireRequestJob as NewHiresCreateSingleNewHireRequestJobSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire_request_compensation import NewHiresCreateSingleNewHireRequestCompensation as NewHiresCreateSingleNewHireRequestCompensationSchema
from ukg_python_sdk.model.new_hires_create_single_new_hire201_response import NewHiresCreateSingleNewHire201Response as NewHiresCreateSingleNewHire201ResponseSchema

from ukg_python_sdk.type.new_hires_create_single_new_hire400_response import NewHiresCreateSingleNewHire400Response
from ukg_python_sdk.type.new_hires_create_single_new_hire_request_job import NewHiresCreateSingleNewHireRequestJob
from ukg_python_sdk.type.new_hires_create_single_new_hire409_response import NewHiresCreateSingleNewHire409Response
from ukg_python_sdk.type.new_hires_create_single_new_hire_response import NewHiresCreateSingleNewHireResponse
from ukg_python_sdk.type.new_hires_create_single_new_hire_request_mentor import NewHiresCreateSingleNewHireRequestMentor
from ukg_python_sdk.type.new_hires_create_single_new_hire_request_organization_levels import NewHiresCreateSingleNewHireRequestOrganizationLevels
from ukg_python_sdk.type.new_hires_create_single_new_hire_request_compensation import NewHiresCreateSingleNewHireRequestCompensation
from ukg_python_sdk.type.new_hires_create_single_new_hire_request_contact_information import NewHiresCreateSingleNewHireRequestContactInformation
from ukg_python_sdk.type.new_hires_create_single_new_hire_request import NewHiresCreateSingleNewHireRequest
from ukg_python_sdk.type.new_hires_create_single_new_hire201_response import NewHiresCreateSingleNewHire201Response

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request import NewHiresCreateSingleNewHireRequest as NewHiresCreateSingleNewHireRequestPydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire201_response import NewHiresCreateSingleNewHire201Response as NewHiresCreateSingleNewHire201ResponsePydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request_mentor import NewHiresCreateSingleNewHireRequestMentor as NewHiresCreateSingleNewHireRequestMentorPydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request_organization_levels import NewHiresCreateSingleNewHireRequestOrganizationLevels as NewHiresCreateSingleNewHireRequestOrganizationLevelsPydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire409_response import NewHiresCreateSingleNewHire409Response as NewHiresCreateSingleNewHire409ResponsePydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_response import NewHiresCreateSingleNewHireResponse as NewHiresCreateSingleNewHireResponsePydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request_job import NewHiresCreateSingleNewHireRequestJob as NewHiresCreateSingleNewHireRequestJobPydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request_compensation import NewHiresCreateSingleNewHireRequestCompensation as NewHiresCreateSingleNewHireRequestCompensationPydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire400_response import NewHiresCreateSingleNewHire400Response as NewHiresCreateSingleNewHire400ResponsePydantic
from ukg_python_sdk.pydantic.new_hires_create_single_new_hire_request_contact_information import NewHiresCreateSingleNewHireRequestContactInformation as NewHiresCreateSingleNewHireRequestContactInformationPydantic

# Path params
TenantIdentifierSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'tenantIdentifier': typing.Union[TenantIdentifierSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_tenant_identifier = api_client.PathParameter(
    name="tenantIdentifier",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TenantIdentifierSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = NewHiresCreateSingleNewHireRequestSchema


request_body_new_hires_create_single_new_hire_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
LocationSchema = schemas.StrSchema
SchemaFor201ResponseBodyApplicationJson = NewHiresCreateSingleNewHireResponseSchema
SchemaFor201ResponseBodyApplicationProblemjson = NewHiresCreateSingleNewHire201ResponseSchema
ResponseHeadersFor201 = typing_extensions.TypedDict(
    'ResponseHeadersFor201',
    {
        'Location': LocationSchema,
    }
)


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: NewHiresCreateSingleNewHireResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: NewHiresCreateSingleNewHireResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationProblemjson),
    },
    headers=[
        location_parameter,
    ]
)
SchemaFor400ResponseBodyApplicationJson = NewHiresCreateSingleNewHire400ResponseSchema
SchemaFor400ResponseBodyApplicationProblemjson = NewHiresCreateSingleNewHire400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: NewHiresCreateSingleNewHire400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: NewHiresCreateSingleNewHire400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor409ResponseBodyApplicationJson = NewHiresCreateSingleNewHire409ResponseSchema
SchemaFor409ResponseBodyApplicationProblemjson = NewHiresCreateSingleNewHire409ResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: NewHiresCreateSingleNewHire409Response


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: NewHiresCreateSingleNewHire409Response


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_single_new_hire_mapped_args(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if contact_information is not None:
            _body["contactInformation"] = contact_information
        if job is not None:
            _body["job"] = job
        if organization_levels is not None:
            _body["organizationLevels"] = organization_levels
        if compensation is not None:
            _body["compensation"] = compensation
        if onboarding_owner_id is not None:
            _body["onboardingOwnerId"] = onboarding_owner_id
        if hire_date is not None:
            _body["hireDate"] = hire_date
        if orientation_date is not None:
            _body["orientationDate"] = orientation_date
        if start_date is not None:
            _body["startDate"] = start_date
        if past_start_date_reason is not None:
            _body["pastStartDateReason"] = past_start_date_reason
        if mentor is not None:
            _body["mentor"] = mentor
        if personal_message is not None:
            _body["personalMessage"] = personal_message
        args.body = _body
        if tenant_identifier is not None:
            _path_params["tenantIdentifier"] = tenant_identifier
        args.path = _path_params
        return args

    async def _acreate_single_new_hire_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Creates a single New Hire
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_tenant_identifier,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/tenants/{tenantIdentifier}/new-hires',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_new_hires_create_single_new_hire_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_single_new_hire_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Creates a single New Hire
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_tenant_identifier,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/tenants/{tenantIdentifier}/new-hires',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_new_hires_create_single_new_hire_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateSingleNewHireRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_single_new_hire(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_single_new_hire_mapped_args(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
        )
        return await self._acreate_single_new_hire_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def create_single_new_hire(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_single_new_hire_mapped_args(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
        )
        return self._create_single_new_hire_oapg(
            body=args.body,
            path_params=args.path,
        )

class CreateSingleNewHire(BaseApi):

    async def acreate_single_new_hire(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> NewHiresCreateSingleNewHireResponsePydantic:
        raw_response = await self.raw.acreate_single_new_hire(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
            **kwargs,
        )
        if validate:
            return NewHiresCreateSingleNewHireResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(NewHiresCreateSingleNewHireResponsePydantic, raw_response.body)
    
    
    def create_single_new_hire(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
        validate: bool = False,
    ) -> NewHiresCreateSingleNewHireResponsePydantic:
        raw_response = self.raw.create_single_new_hire(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
        )
        if validate:
            return NewHiresCreateSingleNewHireResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(NewHiresCreateSingleNewHireResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_single_new_hire_mapped_args(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
        )
        return await self._acreate_single_new_hire_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        tenant_identifier: str,
        contact_information: typing.Optional[NewHiresCreateSingleNewHireRequestContactInformation] = None,
        job: typing.Optional[NewHiresCreateSingleNewHireRequestJob] = None,
        organization_levels: typing.Optional[NewHiresCreateSingleNewHireRequestOrganizationLevels] = None,
        compensation: typing.Optional[NewHiresCreateSingleNewHireRequestCompensation] = None,
        onboarding_owner_id: typing.Optional[str] = None,
        hire_date: typing.Optional[datetime] = None,
        orientation_date: typing.Optional[datetime] = None,
        start_date: typing.Optional[datetime] = None,
        past_start_date_reason: typing.Optional[str] = None,
        mentor: typing.Optional[NewHiresCreateSingleNewHireRequestMentor] = None,
        personal_message: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_single_new_hire_mapped_args(
            tenant_identifier=tenant_identifier,
            contact_information=contact_information,
            job=job,
            organization_levels=organization_levels,
            compensation=compensation,
            onboarding_owner_id=onboarding_owner_id,
            hire_date=hire_date,
            orientation_date=orientation_date,
            start_date=start_date,
            past_start_date_reason=past_start_date_reason,
            mentor=mentor,
            personal_message=personal_message,
        )
        return self._create_single_new_hire_oapg(
            body=args.body,
            path_params=args.path,
        )

