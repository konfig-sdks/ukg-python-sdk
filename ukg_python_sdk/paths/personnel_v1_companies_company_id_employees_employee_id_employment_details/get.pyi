# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ukg_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ukg_python_sdk.api_response import AsyncGeneratorResponse
from ukg_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401

from ukg_python_sdk.model.employment_details_get_by_company_id_and_employee_id500_response import EmploymentDetailsGetByCompanyIdAndEmployeeId500Response as EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema
from ukg_python_sdk.model.employment_details_get_by_company_id_and_employee_id200_response import EmploymentDetailsGetByCompanyIdAndEmployeeId200Response as EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponseSchema
from ukg_python_sdk.model.employment_details_get_by_company_id_and_employee_id_response import EmploymentDetailsGetByCompanyIdAndEmployeeIdResponse as EmploymentDetailsGetByCompanyIdAndEmployeeIdResponseSchema

from ukg_python_sdk.type.employment_details_get_by_company_id_and_employee_id200_response import EmploymentDetailsGetByCompanyIdAndEmployeeId200Response
from ukg_python_sdk.type.employment_details_get_by_company_id_and_employee_id_response import EmploymentDetailsGetByCompanyIdAndEmployeeIdResponse
from ukg_python_sdk.type.employment_details_get_by_company_id_and_employee_id500_response import EmploymentDetailsGetByCompanyIdAndEmployeeId500Response

from ...api_client import Dictionary
from ukg_python_sdk.pydantic.employment_details_get_by_company_id_and_employee_id500_response import EmploymentDetailsGetByCompanyIdAndEmployeeId500Response as EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponsePydantic
from ukg_python_sdk.pydantic.employment_details_get_by_company_id_and_employee_id200_response import EmploymentDetailsGetByCompanyIdAndEmployeeId200Response as EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponsePydantic
from ukg_python_sdk.pydantic.employment_details_get_by_company_id_and_employee_id_response import EmploymentDetailsGetByCompanyIdAndEmployeeIdResponse as EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic

# Query params
CompanyIdSchema = schemas.StrSchema
EmployeeIdSchema = schemas.StrSchema
PrimaryJobCodeSchema = schemas.StrSchema
JobTitleSchema = schemas.StrSchema
FullTimeOrPartTimeCodeSchema = schemas.StrSchema
PrimaryWorkLocationCodeSchema = schemas.StrSchema
PrimaryProjectCodeSchema = schemas.StrSchema
DeductionGroupCodeSchema = schemas.StrSchema
EarningGroupCodeSchema = schemas.StrSchema
EmployeeTypeCodeSchema = schemas.StrSchema
EmployeeStatusCodeSchema = schemas.StrSchema
EmployeeNumberSchema = schemas.StrSchema
SupervisorIDSchema = schemas.StrSchema
OriginalHireDateSchema = schemas.StrSchema
LastHireDateSchema = schemas.StrSchema
DateOfTerminationSchema = schemas.StrSchema
DateOfRetirementSchema = schemas.StrSchema
DateTimeCreatedSchema = schemas.StrSchema
DateTimeChangedSchema = schemas.StrSchema
DateLastPayDatePaidSchema = schemas.StrSchema
PayGroupSchema = schemas.StrSchema
IsHomeCompanySchema = schemas.BoolSchema


class PageSchema(
    schemas.Int32Schema
):
    pass


class PerPageSchema(
    schemas.Int32Schema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
        'primaryJobCode': typing.Union[PrimaryJobCodeSchema, str, ],
        'jobTitle': typing.Union[JobTitleSchema, str, ],
        'fullTimeOrPartTimeCode': typing.Union[FullTimeOrPartTimeCodeSchema, str, ],
        'primaryWorkLocationCode': typing.Union[PrimaryWorkLocationCodeSchema, str, ],
        'primaryProjectCode': typing.Union[PrimaryProjectCodeSchema, str, ],
        'deductionGroupCode': typing.Union[DeductionGroupCodeSchema, str, ],
        'earningGroupCode': typing.Union[EarningGroupCodeSchema, str, ],
        'employeeTypeCode': typing.Union[EmployeeTypeCodeSchema, str, ],
        'employeeStatusCode': typing.Union[EmployeeStatusCodeSchema, str, ],
        'employeeNumber': typing.Union[EmployeeNumberSchema, str, ],
        'supervisorID': typing.Union[SupervisorIDSchema, str, ],
        'originalHireDate': typing.Union[OriginalHireDateSchema, str, ],
        'lastHireDate': typing.Union[LastHireDateSchema, str, ],
        'dateOfTermination': typing.Union[DateOfTerminationSchema, str, ],
        'dateOfRetirement': typing.Union[DateOfRetirementSchema, str, ],
        'dateTimeCreated': typing.Union[DateTimeCreatedSchema, str, ],
        'dateTimeChanged': typing.Union[DateTimeChangedSchema, str, ],
        'dateLastPayDatePaid': typing.Union[DateLastPayDatePaidSchema, str, ],
        'payGroup': typing.Union[PayGroupSchema, str, ],
        'isHomeCompany': typing.Union[IsHomeCompanySchema, bool, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_Page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_company_id2 = api_client.QueryParameter(
    name="companyId",
    style=api_client.ParameterStyle.FORM,
    schema=CompanyIdSchema,
    explode=True,
)
request_query_employee_id2 = api_client.QueryParameter(
    name="employeeId",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeIdSchema,
    explode=True,
)
request_query_primary_job_code = api_client.QueryParameter(
    name="primaryJobCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryJobCodeSchema,
    explode=True,
)
request_query_job_title = api_client.QueryParameter(
    name="jobTitle",
    style=api_client.ParameterStyle.FORM,
    schema=JobTitleSchema,
    explode=True,
)
request_query_full_time_or_part_time_code = api_client.QueryParameter(
    name="fullTimeOrPartTimeCode",
    style=api_client.ParameterStyle.FORM,
    schema=FullTimeOrPartTimeCodeSchema,
    explode=True,
)
request_query_primary_work_location_code = api_client.QueryParameter(
    name="primaryWorkLocationCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryWorkLocationCodeSchema,
    explode=True,
)
request_query_primary_project_code = api_client.QueryParameter(
    name="primaryProjectCode",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryProjectCodeSchema,
    explode=True,
)
request_query_deduction_group_code = api_client.QueryParameter(
    name="deductionGroupCode",
    style=api_client.ParameterStyle.FORM,
    schema=DeductionGroupCodeSchema,
    explode=True,
)
request_query_earning_group_code = api_client.QueryParameter(
    name="earningGroupCode",
    style=api_client.ParameterStyle.FORM,
    schema=EarningGroupCodeSchema,
    explode=True,
)
request_query_employee_type_code = api_client.QueryParameter(
    name="employeeTypeCode",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeTypeCodeSchema,
    explode=True,
)
request_query_employee_status_code = api_client.QueryParameter(
    name="employeeStatusCode",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeStatusCodeSchema,
    explode=True,
)
request_query_employee_number = api_client.QueryParameter(
    name="employeeNumber",
    style=api_client.ParameterStyle.FORM,
    schema=EmployeeNumberSchema,
    explode=True,
)
request_query_supervisor_id = api_client.QueryParameter(
    name="supervisorID",
    style=api_client.ParameterStyle.FORM,
    schema=SupervisorIDSchema,
    explode=True,
)
request_query_original_hire_date = api_client.QueryParameter(
    name="originalHireDate",
    style=api_client.ParameterStyle.FORM,
    schema=OriginalHireDateSchema,
    explode=True,
)
request_query_last_hire_date = api_client.QueryParameter(
    name="lastHireDate",
    style=api_client.ParameterStyle.FORM,
    schema=LastHireDateSchema,
    explode=True,
)
request_query_date_of_termination = api_client.QueryParameter(
    name="dateOfTermination",
    style=api_client.ParameterStyle.FORM,
    schema=DateOfTerminationSchema,
    explode=True,
)
request_query_date_of_retirement = api_client.QueryParameter(
    name="dateOfRetirement",
    style=api_client.ParameterStyle.FORM,
    schema=DateOfRetirementSchema,
    explode=True,
)
request_query_date_time_created = api_client.QueryParameter(
    name="dateTimeCreated",
    style=api_client.ParameterStyle.FORM,
    schema=DateTimeCreatedSchema,
    explode=True,
)
request_query_date_time_changed = api_client.QueryParameter(
    name="dateTimeChanged",
    style=api_client.ParameterStyle.FORM,
    schema=DateTimeChangedSchema,
    explode=True,
)
request_query_date_last_pay_date_paid = api_client.QueryParameter(
    name="dateLastPayDatePaid",
    style=api_client.ParameterStyle.FORM,
    schema=DateLastPayDatePaidSchema,
    explode=True,
)
request_query_pay_group = api_client.QueryParameter(
    name="payGroup",
    style=api_client.ParameterStyle.FORM,
    schema=PayGroupSchema,
    explode=True,
)
request_query_is_home_company = api_client.QueryParameter(
    name="isHomeCompany",
    style=api_client.ParameterStyle.FORM,
    schema=IsHomeCompanySchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_Page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
# Path params
CompanyIdSchema = schemas.StrSchema
EmployeeIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="companyId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_employee_id = api_client.PathParameter(
    name="employeeId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=EmployeeIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = EmploymentDetailsGetByCompanyIdAndEmployeeIdResponseSchema
SchemaFor200ResponseBodyTextJson = EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponseSchema
SchemaFor200ResponseBodyApplicationProblemjson = EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponseSchema
SchemaFor200ResponseBodyApplicationXml = EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponseSchema
SchemaFor200ResponseBodyTextXml = EmploymentDetailsGetByCompanyIdAndEmployeeId200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: EmploymentDetailsGetByCompanyIdAndEmployeeIdResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: EmploymentDetailsGetByCompanyIdAndEmployeeIdResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXml),
    },
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
)
SchemaFor500ResponseBodyApplicationJson = EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema
SchemaFor500ResponseBodyTextJson = EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema
SchemaFor500ResponseBodyApplicationProblemjson = EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema
SchemaFor500ResponseBodyApplicationXml = EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema
SchemaFor500ResponseBodyTextXml = EmploymentDetailsGetByCompanyIdAndEmployeeId500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: EmploymentDetailsGetByCompanyIdAndEmployeeId500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: EmploymentDetailsGetByCompanyIdAndEmployeeId500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextJson),
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
        'text/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyTextXml),
    },
)
_all_accept_content_types = (
    'application/json',
    'text/json',
    'application/problem+json',
    'application/xml',
    'text/xml',
)


class BaseApi(api_client.Api):

    def _get_by_company_id_and_employee_id_mapped_args(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if company_id2 is not None:
            _query_params["companyId"] = company_id2
        if employee_id2 is not None:
            _query_params["employeeId"] = employee_id2
        if primary_job_code is not None:
            _query_params["primaryJobCode"] = primary_job_code
        if job_title is not None:
            _query_params["jobTitle"] = job_title
        if full_time_or_part_time_code is not None:
            _query_params["fullTimeOrPartTimeCode"] = full_time_or_part_time_code
        if primary_work_location_code is not None:
            _query_params["primaryWorkLocationCode"] = primary_work_location_code
        if primary_project_code is not None:
            _query_params["primaryProjectCode"] = primary_project_code
        if deduction_group_code is not None:
            _query_params["deductionGroupCode"] = deduction_group_code
        if earning_group_code is not None:
            _query_params["earningGroupCode"] = earning_group_code
        if employee_type_code is not None:
            _query_params["employeeTypeCode"] = employee_type_code
        if employee_status_code is not None:
            _query_params["employeeStatusCode"] = employee_status_code
        if employee_number is not None:
            _query_params["employeeNumber"] = employee_number
        if supervisor_id is not None:
            _query_params["supervisorID"] = supervisor_id
        if original_hire_date is not None:
            _query_params["originalHireDate"] = original_hire_date
        if last_hire_date is not None:
            _query_params["lastHireDate"] = last_hire_date
        if date_of_termination is not None:
            _query_params["dateOfTermination"] = date_of_termination
        if date_of_retirement is not None:
            _query_params["dateOfRetirement"] = date_of_retirement
        if date_time_created is not None:
            _query_params["dateTimeCreated"] = date_time_created
        if date_time_changed is not None:
            _query_params["dateTimeChanged"] = date_time_changed
        if date_last_pay_date_paid is not None:
            _query_params["dateLastPayDatePaid"] = date_last_pay_date_paid
        if pay_group is not None:
            _query_params["payGroup"] = pay_group
        if is_home_company is not None:
            _query_params["isHomeCompany"] = is_home_company
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_Page"] = per_page
        if company_id is not None:
            _path_params["companyId"] = company_id
        if employee_id is not None:
            _path_params["employeeId"] = employee_id
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_by_company_id_and_employee_id_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Employment Details
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id2,
            request_query_employee_id2,
            request_query_primary_job_code,
            request_query_job_title,
            request_query_full_time_or_part_time_code,
            request_query_primary_work_location_code,
            request_query_primary_project_code,
            request_query_deduction_group_code,
            request_query_earning_group_code,
            request_query_employee_type_code,
            request_query_employee_status_code,
            request_query_employee_number,
            request_query_supervisor_id,
            request_query_original_hire_date,
            request_query_last_hire_date,
            request_query_date_of_termination,
            request_query_date_of_retirement,
            request_query_date_time_created,
            request_query_date_time_changed,
            request_query_date_last_pay_date_paid,
            request_query_pay_group,
            request_query_is_home_company,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/personnel/v1/companies/{companyId}/employees/{employeeId}/employment-details',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_by_company_id_and_employee_id_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Employment Details
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_company_id2,
            request_query_employee_id2,
            request_query_primary_job_code,
            request_query_job_title,
            request_query_full_time_or_part_time_code,
            request_query_primary_work_location_code,
            request_query_primary_project_code,
            request_query_deduction_group_code,
            request_query_earning_group_code,
            request_query_employee_type_code,
            request_query_employee_status_code,
            request_query_employee_number,
            request_query_supervisor_id,
            request_query_original_hire_date,
            request_query_last_hire_date,
            request_query_date_of_termination,
            request_query_date_of_retirement,
            request_query_date_time_created,
            request_query_date_time_changed,
            request_query_date_last_pay_date_paid,
            request_query_pay_group,
            request_query_is_home_company,
            request_query_page,
            request_query_per_page,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/personnel/v1/companies/{companyId}/employees/{employeeId}/employment-details',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetByCompanyIdAndEmployeeIdRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_by_company_id_and_employee_id(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_by_company_id_and_employee_id_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
        )
        return await self._aget_by_company_id_and_employee_id_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_by_company_id_and_employee_id(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_by_company_id_and_employee_id_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
        )
        return self._get_by_company_id_and_employee_id_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetByCompanyIdAndEmployeeId(BaseApi):

    async def aget_by_company_id_and_employee_id(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic:
        raw_response = await self.raw.aget_by_company_id_and_employee_id(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
            **kwargs,
        )
        if validate:
            return RootModel[EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic, raw_response.body)
    
    
    def get_by_company_id_and_employee_id(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        validate: bool = False,
    ) -> EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic:
        raw_response = self.raw.get_by_company_id_and_employee_id(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
        )
        if validate:
            return RootModel[EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(EmploymentDetailsGetByCompanyIdAndEmployeeIdResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_by_company_id_and_employee_id_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
        )
        return await self._aget_by_company_id_and_employee_id_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: str,
        employee_id: str,
        company_id2: typing.Optional[str] = None,
        employee_id2: typing.Optional[str] = None,
        primary_job_code: typing.Optional[str] = None,
        job_title: typing.Optional[str] = None,
        full_time_or_part_time_code: typing.Optional[str] = None,
        primary_work_location_code: typing.Optional[str] = None,
        primary_project_code: typing.Optional[str] = None,
        deduction_group_code: typing.Optional[str] = None,
        earning_group_code: typing.Optional[str] = None,
        employee_type_code: typing.Optional[str] = None,
        employee_status_code: typing.Optional[str] = None,
        employee_number: typing.Optional[str] = None,
        supervisor_id: typing.Optional[str] = None,
        original_hire_date: typing.Optional[str] = None,
        last_hire_date: typing.Optional[str] = None,
        date_of_termination: typing.Optional[str] = None,
        date_of_retirement: typing.Optional[str] = None,
        date_time_created: typing.Optional[str] = None,
        date_time_changed: typing.Optional[str] = None,
        date_last_pay_date_paid: typing.Optional[str] = None,
        pay_group: typing.Optional[str] = None,
        is_home_company: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_by_company_id_and_employee_id_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            company_id2=company_id2,
            employee_id2=employee_id2,
            primary_job_code=primary_job_code,
            job_title=job_title,
            full_time_or_part_time_code=full_time_or_part_time_code,
            primary_work_location_code=primary_work_location_code,
            primary_project_code=primary_project_code,
            deduction_group_code=deduction_group_code,
            earning_group_code=earning_group_code,
            employee_type_code=employee_type_code,
            employee_status_code=employee_status_code,
            employee_number=employee_number,
            supervisor_id=supervisor_id,
            original_hire_date=original_hire_date,
            last_hire_date=last_hire_date,
            date_of_termination=date_of_termination,
            date_of_retirement=date_of_retirement,
            date_time_created=date_time_created,
            date_time_changed=date_time_changed,
            date_last_pay_date_paid=date_last_pay_date_paid,
            pay_group=pay_group,
            is_home_company=is_home_company,
            page=page,
            per_page=per_page,
        )
        return self._get_by_company_id_and_employee_id_oapg(
            query_params=args.query,
            path_params=args.path,
        )

