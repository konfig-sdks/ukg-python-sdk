# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Roles(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            rolDefaultRole = schemas.BoolSchema
            rolDescription = schemas.StrSchema
            rolID = schemas.NumberSchema
            rolName = schemas.StrSchema
            rolDefaultRoleTerminated = schemas.BoolSchema
            rolBI = schemas.BoolSchema
            __annotations__ = {
                "rolDefaultRole": rolDefaultRole,
                "rolDescription": rolDescription,
                "rolID": rolID,
                "rolName": rolName,
                "rolDefaultRoleTerminated": rolDefaultRoleTerminated,
                "rolBI": rolBI,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolDefaultRole"]) -> MetaOapg.properties.rolDefaultRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolDescription"]) -> MetaOapg.properties.rolDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolID"]) -> MetaOapg.properties.rolID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolName"]) -> MetaOapg.properties.rolName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolDefaultRoleTerminated"]) -> MetaOapg.properties.rolDefaultRoleTerminated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolBI"]) -> MetaOapg.properties.rolBI: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rolDefaultRole", "rolDescription", "rolID", "rolName", "rolDefaultRoleTerminated", "rolBI", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolDefaultRole"]) -> typing.Union[MetaOapg.properties.rolDefaultRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolDescription"]) -> typing.Union[MetaOapg.properties.rolDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolID"]) -> typing.Union[MetaOapg.properties.rolID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolName"]) -> typing.Union[MetaOapg.properties.rolName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolDefaultRoleTerminated"]) -> typing.Union[MetaOapg.properties.rolDefaultRoleTerminated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolBI"]) -> typing.Union[MetaOapg.properties.rolBI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rolDefaultRole", "rolDescription", "rolID", "rolName", "rolDefaultRoleTerminated", "rolBI", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rolDefaultRole: typing.Union[MetaOapg.properties.rolDefaultRole, bool, schemas.Unset] = schemas.unset,
        rolDescription: typing.Union[MetaOapg.properties.rolDescription, str, schemas.Unset] = schemas.unset,
        rolID: typing.Union[MetaOapg.properties.rolID, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rolName: typing.Union[MetaOapg.properties.rolName, str, schemas.Unset] = schemas.unset,
        rolDefaultRoleTerminated: typing.Union[MetaOapg.properties.rolDefaultRoleTerminated, bool, schemas.Unset] = schemas.unset,
        rolBI: typing.Union[MetaOapg.properties.rolBI, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Roles':
        return super().__new__(
            cls,
            *args,
            rolDefaultRole=rolDefaultRole,
            rolDescription=rolDescription,
            rolID=rolID,
            rolName=rolName,
            rolDefaultRoleTerminated=rolDefaultRoleTerminated,
            rolBI=rolBI,
            _configuration=_configuration,
            **kwargs,
        )
