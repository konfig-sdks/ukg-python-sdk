# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Earning(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "companyCode",
            "code",
            "empNo",
            "refId",
            "source",
        }
        
        class properties:
            refId = schemas.UUIDSchema
            
            
            class companyCode(
                schemas.StrSchema
            ):
                pass
            
            
            class empNo(
                schemas.StrSchema
            ):
                pass
            
            
            class code(
                schemas.StrSchema
            ):
                pass
            
            
            class source(
                schemas.StrSchema
            ):
                pass
            chargeDate = schemas.DateTimeSchema
            hours = schemas.DecimalSchema
            amount = schemas.DecimalSchema
            pieceCount = schemas.DecimalSchema
            
            
            class shiftCode(
                schemas.StrSchema
            ):
                pass
            
            
            class location(
                schemas.StrSchema
            ):
                pass
            
            
            class job(
                schemas.StrSchema
            ):
                pass
            
            
            class project(
                schemas.StrSchema
            ):
                pass
            
            
            class orgLvl1(
                schemas.StrSchema
            ):
                pass
            
            
            class orgLvl2(
                schemas.StrSchema
            ):
                pass
            
            
            class orgLvl3(
                schemas.StrSchema
            ):
                pass
            
            
            class orgLvl4(
                schemas.StrSchema
            ):
                pass
            payRate = schemas.DecimalSchema
            pieceRate = schemas.DecimalSchema
            roePayDate = schemas.DateTimeSchema
            adjEarnPeriodStartDate = schemas.DateTimeSchema
            adjEarnPeriodEndDate = schemas.DateTimeSchema
            checkSequence = schemas.IntSchema
            
            
            class createPayType(
                schemas.StrSchema
            ):
                pass
            
            
            class forcePayCreation(
                schemas.StrSchema
            ):
                pass
            
            
            class grossUp(
                schemas.StrSchema
            ):
                pass
            grossUpTarget = schemas.IntSchema
            grossUpTaxCalcMethod = schemas.Int32Schema
            __annotations__ = {
                "refId": refId,
                "companyCode": companyCode,
                "empNo": empNo,
                "code": code,
                "source": source,
                "chargeDate": chargeDate,
                "hours": hours,
                "amount": amount,
                "pieceCount": pieceCount,
                "shiftCode": shiftCode,
                "location": location,
                "job": job,
                "project": project,
                "orgLvl1": orgLvl1,
                "orgLvl2": orgLvl2,
                "orgLvl3": orgLvl3,
                "orgLvl4": orgLvl4,
                "payRate": payRate,
                "pieceRate": pieceRate,
                "roePayDate": roePayDate,
                "adjEarnPeriodStartDate": adjEarnPeriodStartDate,
                "adjEarnPeriodEndDate": adjEarnPeriodEndDate,
                "checkSequence": checkSequence,
                "createPayType": createPayType,
                "forcePayCreation": forcePayCreation,
                "grossUp": grossUp,
                "grossUpTarget": grossUpTarget,
                "grossUpTaxCalcMethod": grossUpTaxCalcMethod,
            }
    
    companyCode: MetaOapg.properties.companyCode
    code: MetaOapg.properties.code
    empNo: MetaOapg.properties.empNo
    refId: MetaOapg.properties.refId
    source: MetaOapg.properties.source
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refId"]) -> MetaOapg.properties.refId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empNo"]) -> MetaOapg.properties.empNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargeDate"]) -> MetaOapg.properties.chargeDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieceCount"]) -> MetaOapg.properties.pieceCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shiftCode"]) -> MetaOapg.properties.shiftCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl1"]) -> MetaOapg.properties.orgLvl1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl2"]) -> MetaOapg.properties.orgLvl2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl3"]) -> MetaOapg.properties.orgLvl3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl4"]) -> MetaOapg.properties.orgLvl4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRate"]) -> MetaOapg.properties.payRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieceRate"]) -> MetaOapg.properties.pieceRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roePayDate"]) -> MetaOapg.properties.roePayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjEarnPeriodStartDate"]) -> MetaOapg.properties.adjEarnPeriodStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjEarnPeriodEndDate"]) -> MetaOapg.properties.adjEarnPeriodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkSequence"]) -> MetaOapg.properties.checkSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createPayType"]) -> MetaOapg.properties.createPayType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forcePayCreation"]) -> MetaOapg.properties.forcePayCreation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossUp"]) -> MetaOapg.properties.grossUp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossUpTarget"]) -> MetaOapg.properties.grossUpTarget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossUpTaxCalcMethod"]) -> MetaOapg.properties.grossUpTaxCalcMethod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["refId", "companyCode", "empNo", "code", "source", "chargeDate", "hours", "amount", "pieceCount", "shiftCode", "location", "job", "project", "orgLvl1", "orgLvl2", "orgLvl3", "orgLvl4", "payRate", "pieceRate", "roePayDate", "adjEarnPeriodStartDate", "adjEarnPeriodEndDate", "checkSequence", "createPayType", "forcePayCreation", "grossUp", "grossUpTarget", "grossUpTaxCalcMethod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refId"]) -> MetaOapg.properties.refId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empNo"]) -> MetaOapg.properties.empNo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargeDate"]) -> typing.Union[MetaOapg.properties.chargeDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieceCount"]) -> typing.Union[MetaOapg.properties.pieceCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shiftCode"]) -> typing.Union[MetaOapg.properties.shiftCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl1"]) -> typing.Union[MetaOapg.properties.orgLvl1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl2"]) -> typing.Union[MetaOapg.properties.orgLvl2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl3"]) -> typing.Union[MetaOapg.properties.orgLvl3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl4"]) -> typing.Union[MetaOapg.properties.orgLvl4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRate"]) -> typing.Union[MetaOapg.properties.payRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieceRate"]) -> typing.Union[MetaOapg.properties.pieceRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roePayDate"]) -> typing.Union[MetaOapg.properties.roePayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjEarnPeriodStartDate"]) -> typing.Union[MetaOapg.properties.adjEarnPeriodStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjEarnPeriodEndDate"]) -> typing.Union[MetaOapg.properties.adjEarnPeriodEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkSequence"]) -> typing.Union[MetaOapg.properties.checkSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createPayType"]) -> typing.Union[MetaOapg.properties.createPayType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forcePayCreation"]) -> typing.Union[MetaOapg.properties.forcePayCreation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossUp"]) -> typing.Union[MetaOapg.properties.grossUp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossUpTarget"]) -> typing.Union[MetaOapg.properties.grossUpTarget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossUpTaxCalcMethod"]) -> typing.Union[MetaOapg.properties.grossUpTaxCalcMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["refId", "companyCode", "empNo", "code", "source", "chargeDate", "hours", "amount", "pieceCount", "shiftCode", "location", "job", "project", "orgLvl1", "orgLvl2", "orgLvl3", "orgLvl4", "payRate", "pieceRate", "roePayDate", "adjEarnPeriodStartDate", "adjEarnPeriodEndDate", "checkSequence", "createPayType", "forcePayCreation", "grossUp", "grossUpTarget", "grossUpTaxCalcMethod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyCode: typing.Union[MetaOapg.properties.companyCode, str, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        empNo: typing.Union[MetaOapg.properties.empNo, str, ],
        refId: typing.Union[MetaOapg.properties.refId, str, uuid.UUID, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        chargeDate: typing.Union[MetaOapg.properties.chargeDate, str, datetime, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        pieceCount: typing.Union[MetaOapg.properties.pieceCount, str, schemas.Unset] = schemas.unset,
        shiftCode: typing.Union[MetaOapg.properties.shiftCode, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        job: typing.Union[MetaOapg.properties.job, str, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        orgLvl1: typing.Union[MetaOapg.properties.orgLvl1, str, schemas.Unset] = schemas.unset,
        orgLvl2: typing.Union[MetaOapg.properties.orgLvl2, str, schemas.Unset] = schemas.unset,
        orgLvl3: typing.Union[MetaOapg.properties.orgLvl3, str, schemas.Unset] = schemas.unset,
        orgLvl4: typing.Union[MetaOapg.properties.orgLvl4, str, schemas.Unset] = schemas.unset,
        payRate: typing.Union[MetaOapg.properties.payRate, str, schemas.Unset] = schemas.unset,
        pieceRate: typing.Union[MetaOapg.properties.pieceRate, str, schemas.Unset] = schemas.unset,
        roePayDate: typing.Union[MetaOapg.properties.roePayDate, str, datetime, schemas.Unset] = schemas.unset,
        adjEarnPeriodStartDate: typing.Union[MetaOapg.properties.adjEarnPeriodStartDate, str, datetime, schemas.Unset] = schemas.unset,
        adjEarnPeriodEndDate: typing.Union[MetaOapg.properties.adjEarnPeriodEndDate, str, datetime, schemas.Unset] = schemas.unset,
        checkSequence: typing.Union[MetaOapg.properties.checkSequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createPayType: typing.Union[MetaOapg.properties.createPayType, str, schemas.Unset] = schemas.unset,
        forcePayCreation: typing.Union[MetaOapg.properties.forcePayCreation, str, schemas.Unset] = schemas.unset,
        grossUp: typing.Union[MetaOapg.properties.grossUp, str, schemas.Unset] = schemas.unset,
        grossUpTarget: typing.Union[MetaOapg.properties.grossUpTarget, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        grossUpTaxCalcMethod: typing.Union[MetaOapg.properties.grossUpTaxCalcMethod, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Earning':
        return super().__new__(
            cls,
            *args,
            companyCode=companyCode,
            code=code,
            empNo=empNo,
            refId=refId,
            source=source,
            chargeDate=chargeDate,
            hours=hours,
            amount=amount,
            pieceCount=pieceCount,
            shiftCode=shiftCode,
            location=location,
            job=job,
            project=project,
            orgLvl1=orgLvl1,
            orgLvl2=orgLvl2,
            orgLvl3=orgLvl3,
            orgLvl4=orgLvl4,
            payRate=payRate,
            pieceRate=pieceRate,
            roePayDate=roePayDate,
            adjEarnPeriodStartDate=adjEarnPeriodStartDate,
            adjEarnPeriodEndDate=adjEarnPeriodEndDate,
            checkSequence=checkSequence,
            createPayType=createPayType,
            forcePayCreation=forcePayCreation,
            grossUp=grossUp,
            grossUpTarget=grossUpTarget,
            grossUpTaxCalcMethod=grossUpTaxCalcMethod,
            _configuration=_configuration,
            **kwargs,
        )
