# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class UserProfileDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class employeeId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z0-9,]*$',
                    }]
            companyId = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            personId = schemas.StrSchema
            email = schemas.StrSchema
            workPhone = schemas.StrSchema
            userStatus = schemas.StrSchema
            userId = schemas.Int32Schema
            userName = schemas.StrSchema
            roleId = schemas.Int32Schema
            roleName = schemas.StrSchema
            roleDescription = schemas.StrSchema
            integrationUserKey = schemas.StrSchema
            filterCompanyId = schemas.StrSchema
            filterDeductionGroupCode = schemas.StrSchema
            filterEmployeeType = schemas.StrSchema
            filterStatus = schemas.StrSchema
            filterFullTimeOrPartTime = schemas.StrSchema
            filterJobCode = schemas.StrSchema
            filterLocationCode = schemas.StrSchema
            filterOrganizationLevel1 = schemas.StrSchema
            filterOrganizationLevel2 = schemas.StrSchema
            filterOrganizationLevel3 = schemas.StrSchema
            filterOrganizationLevel4 = schemas.StrSchema
            filterPayGroupCode = schemas.StrSchema
            filterProjectCode = schemas.StrSchema
            filterSalaryOrHourly = schemas.StrSchema
            filterShiftCode = schemas.StrSchema
            
            
            class filterSupervisorID(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z0-9,]*$',
                    }]
            filterTaxCalculationGroupID = schemas.StrSchema
            masterCompany = schemas.StrSchema
            masterCompanyId = schemas.StrSchema
            homeCompany = schemas.StrSchema
            homeCompanyId = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "companyId": companyId,
                "firstName": firstName,
                "lastName": lastName,
                "personId": personId,
                "email": email,
                "workPhone": workPhone,
                "userStatus": userStatus,
                "userId": userId,
                "userName": userName,
                "roleId": roleId,
                "roleName": roleName,
                "roleDescription": roleDescription,
                "integrationUserKey": integrationUserKey,
                "filterCompanyId": filterCompanyId,
                "filterDeductionGroupCode": filterDeductionGroupCode,
                "filterEmployeeType": filterEmployeeType,
                "filterStatus": filterStatus,
                "filterFullTimeOrPartTime": filterFullTimeOrPartTime,
                "filterJobCode": filterJobCode,
                "filterLocationCode": filterLocationCode,
                "filterOrganizationLevel1": filterOrganizationLevel1,
                "filterOrganizationLevel2": filterOrganizationLevel2,
                "filterOrganizationLevel3": filterOrganizationLevel3,
                "filterOrganizationLevel4": filterOrganizationLevel4,
                "filterPayGroupCode": filterPayGroupCode,
                "filterProjectCode": filterProjectCode,
                "filterSalaryOrHourly": filterSalaryOrHourly,
                "filterShiftCode": filterShiftCode,
                "filterSupervisorID": filterSupervisorID,
                "filterTaxCalculationGroupID": filterTaxCalculationGroupID,
                "masterCompany": masterCompany,
                "masterCompanyId": masterCompanyId,
                "homeCompany": homeCompany,
                "homeCompanyId": homeCompanyId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> MetaOapg.properties.userStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleId"]) -> MetaOapg.properties.roleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleDescription"]) -> MetaOapg.properties.roleDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integrationUserKey"]) -> MetaOapg.properties.integrationUserKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterCompanyId"]) -> MetaOapg.properties.filterCompanyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterDeductionGroupCode"]) -> MetaOapg.properties.filterDeductionGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterEmployeeType"]) -> MetaOapg.properties.filterEmployeeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterStatus"]) -> MetaOapg.properties.filterStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterFullTimeOrPartTime"]) -> MetaOapg.properties.filterFullTimeOrPartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterJobCode"]) -> MetaOapg.properties.filterJobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterLocationCode"]) -> MetaOapg.properties.filterLocationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterOrganizationLevel1"]) -> MetaOapg.properties.filterOrganizationLevel1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterOrganizationLevel2"]) -> MetaOapg.properties.filterOrganizationLevel2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterOrganizationLevel3"]) -> MetaOapg.properties.filterOrganizationLevel3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterOrganizationLevel4"]) -> MetaOapg.properties.filterOrganizationLevel4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterPayGroupCode"]) -> MetaOapg.properties.filterPayGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterProjectCode"]) -> MetaOapg.properties.filterProjectCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterSalaryOrHourly"]) -> MetaOapg.properties.filterSalaryOrHourly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterShiftCode"]) -> MetaOapg.properties.filterShiftCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterSupervisorID"]) -> MetaOapg.properties.filterSupervisorID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterTaxCalculationGroupID"]) -> MetaOapg.properties.filterTaxCalculationGroupID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masterCompany"]) -> MetaOapg.properties.masterCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masterCompanyId"]) -> MetaOapg.properties.masterCompanyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeCompany"]) -> MetaOapg.properties.homeCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeCompanyId"]) -> MetaOapg.properties.homeCompanyId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "firstName", "lastName", "personId", "email", "workPhone", "userStatus", "userId", "userName", "roleId", "roleName", "roleDescription", "integrationUserKey", "filterCompanyId", "filterDeductionGroupCode", "filterEmployeeType", "filterStatus", "filterFullTimeOrPartTime", "filterJobCode", "filterLocationCode", "filterOrganizationLevel1", "filterOrganizationLevel2", "filterOrganizationLevel3", "filterOrganizationLevel4", "filterPayGroupCode", "filterProjectCode", "filterSalaryOrHourly", "filterShiftCode", "filterSupervisorID", "filterTaxCalculationGroupID", "masterCompany", "masterCompanyId", "homeCompany", "homeCompanyId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStatus"]) -> typing.Union[MetaOapg.properties.userStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleId"]) -> typing.Union[MetaOapg.properties.roleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleName"]) -> typing.Union[MetaOapg.properties.roleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleDescription"]) -> typing.Union[MetaOapg.properties.roleDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integrationUserKey"]) -> typing.Union[MetaOapg.properties.integrationUserKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterCompanyId"]) -> typing.Union[MetaOapg.properties.filterCompanyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterDeductionGroupCode"]) -> typing.Union[MetaOapg.properties.filterDeductionGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterEmployeeType"]) -> typing.Union[MetaOapg.properties.filterEmployeeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterStatus"]) -> typing.Union[MetaOapg.properties.filterStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterFullTimeOrPartTime"]) -> typing.Union[MetaOapg.properties.filterFullTimeOrPartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterJobCode"]) -> typing.Union[MetaOapg.properties.filterJobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterLocationCode"]) -> typing.Union[MetaOapg.properties.filterLocationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterOrganizationLevel1"]) -> typing.Union[MetaOapg.properties.filterOrganizationLevel1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterOrganizationLevel2"]) -> typing.Union[MetaOapg.properties.filterOrganizationLevel2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterOrganizationLevel3"]) -> typing.Union[MetaOapg.properties.filterOrganizationLevel3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterOrganizationLevel4"]) -> typing.Union[MetaOapg.properties.filterOrganizationLevel4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterPayGroupCode"]) -> typing.Union[MetaOapg.properties.filterPayGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterProjectCode"]) -> typing.Union[MetaOapg.properties.filterProjectCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterSalaryOrHourly"]) -> typing.Union[MetaOapg.properties.filterSalaryOrHourly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterShiftCode"]) -> typing.Union[MetaOapg.properties.filterShiftCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterSupervisorID"]) -> typing.Union[MetaOapg.properties.filterSupervisorID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterTaxCalculationGroupID"]) -> typing.Union[MetaOapg.properties.filterTaxCalculationGroupID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masterCompany"]) -> typing.Union[MetaOapg.properties.masterCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masterCompanyId"]) -> typing.Union[MetaOapg.properties.masterCompanyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeCompany"]) -> typing.Union[MetaOapg.properties.homeCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeCompanyId"]) -> typing.Union[MetaOapg.properties.homeCompanyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "firstName", "lastName", "personId", "email", "workPhone", "userStatus", "userId", "userName", "roleId", "roleName", "roleDescription", "integrationUserKey", "filterCompanyId", "filterDeductionGroupCode", "filterEmployeeType", "filterStatus", "filterFullTimeOrPartTime", "filterJobCode", "filterLocationCode", "filterOrganizationLevel1", "filterOrganizationLevel2", "filterOrganizationLevel3", "filterOrganizationLevel4", "filterPayGroupCode", "filterProjectCode", "filterSalaryOrHourly", "filterShiftCode", "filterSupervisorID", "filterTaxCalculationGroupID", "masterCompany", "masterCompanyId", "homeCompany", "homeCompanyId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        userStatus: typing.Union[MetaOapg.properties.userStatus, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        roleId: typing.Union[MetaOapg.properties.roleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        roleName: typing.Union[MetaOapg.properties.roleName, str, schemas.Unset] = schemas.unset,
        roleDescription: typing.Union[MetaOapg.properties.roleDescription, str, schemas.Unset] = schemas.unset,
        integrationUserKey: typing.Union[MetaOapg.properties.integrationUserKey, str, schemas.Unset] = schemas.unset,
        filterCompanyId: typing.Union[MetaOapg.properties.filterCompanyId, str, schemas.Unset] = schemas.unset,
        filterDeductionGroupCode: typing.Union[MetaOapg.properties.filterDeductionGroupCode, str, schemas.Unset] = schemas.unset,
        filterEmployeeType: typing.Union[MetaOapg.properties.filterEmployeeType, str, schemas.Unset] = schemas.unset,
        filterStatus: typing.Union[MetaOapg.properties.filterStatus, str, schemas.Unset] = schemas.unset,
        filterFullTimeOrPartTime: typing.Union[MetaOapg.properties.filterFullTimeOrPartTime, str, schemas.Unset] = schemas.unset,
        filterJobCode: typing.Union[MetaOapg.properties.filterJobCode, str, schemas.Unset] = schemas.unset,
        filterLocationCode: typing.Union[MetaOapg.properties.filterLocationCode, str, schemas.Unset] = schemas.unset,
        filterOrganizationLevel1: typing.Union[MetaOapg.properties.filterOrganizationLevel1, str, schemas.Unset] = schemas.unset,
        filterOrganizationLevel2: typing.Union[MetaOapg.properties.filterOrganizationLevel2, str, schemas.Unset] = schemas.unset,
        filterOrganizationLevel3: typing.Union[MetaOapg.properties.filterOrganizationLevel3, str, schemas.Unset] = schemas.unset,
        filterOrganizationLevel4: typing.Union[MetaOapg.properties.filterOrganizationLevel4, str, schemas.Unset] = schemas.unset,
        filterPayGroupCode: typing.Union[MetaOapg.properties.filterPayGroupCode, str, schemas.Unset] = schemas.unset,
        filterProjectCode: typing.Union[MetaOapg.properties.filterProjectCode, str, schemas.Unset] = schemas.unset,
        filterSalaryOrHourly: typing.Union[MetaOapg.properties.filterSalaryOrHourly, str, schemas.Unset] = schemas.unset,
        filterShiftCode: typing.Union[MetaOapg.properties.filterShiftCode, str, schemas.Unset] = schemas.unset,
        filterSupervisorID: typing.Union[MetaOapg.properties.filterSupervisorID, str, schemas.Unset] = schemas.unset,
        filterTaxCalculationGroupID: typing.Union[MetaOapg.properties.filterTaxCalculationGroupID, str, schemas.Unset] = schemas.unset,
        masterCompany: typing.Union[MetaOapg.properties.masterCompany, str, schemas.Unset] = schemas.unset,
        masterCompanyId: typing.Union[MetaOapg.properties.masterCompanyId, str, schemas.Unset] = schemas.unset,
        homeCompany: typing.Union[MetaOapg.properties.homeCompany, str, schemas.Unset] = schemas.unset,
        homeCompanyId: typing.Union[MetaOapg.properties.homeCompanyId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserProfileDetails':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            companyId=companyId,
            firstName=firstName,
            lastName=lastName,
            personId=personId,
            email=email,
            workPhone=workPhone,
            userStatus=userStatus,
            userId=userId,
            userName=userName,
            roleId=roleId,
            roleName=roleName,
            roleDescription=roleDescription,
            integrationUserKey=integrationUserKey,
            filterCompanyId=filterCompanyId,
            filterDeductionGroupCode=filterDeductionGroupCode,
            filterEmployeeType=filterEmployeeType,
            filterStatus=filterStatus,
            filterFullTimeOrPartTime=filterFullTimeOrPartTime,
            filterJobCode=filterJobCode,
            filterLocationCode=filterLocationCode,
            filterOrganizationLevel1=filterOrganizationLevel1,
            filterOrganizationLevel2=filterOrganizationLevel2,
            filterOrganizationLevel3=filterOrganizationLevel3,
            filterOrganizationLevel4=filterOrganizationLevel4,
            filterPayGroupCode=filterPayGroupCode,
            filterProjectCode=filterProjectCode,
            filterSalaryOrHourly=filterSalaryOrHourly,
            filterShiftCode=filterShiftCode,
            filterSupervisorID=filterSupervisorID,
            filterTaxCalculationGroupID=filterTaxCalculationGroupID,
            masterCompany=masterCompany,
            masterCompanyId=masterCompanyId,
            homeCompany=homeCompany,
            homeCompanyId=homeCompanyId,
            _configuration=_configuration,
            **kwargs,
        )
