# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class BusinessRuleImportFileStagingStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            stagingId = schemas.UUIDSchema
            fileProcessDate = schemas.DateTimeSchema
            serviceSubmittalDate = schemas.DateTimeSchema
            lastRepostDate = schemas.DateTimeSchema
            status = schemas.StrSchema
            transaction = schemas.StrSchema
            fileName = schemas.StrSchema
            
            
            class messages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BusinessRuleImportMessage']:
                        return BusinessRuleImportMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BusinessRuleImportMessage'], typing.List['BusinessRuleImportMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'messages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BusinessRuleImportMessage':
                    return super().__getitem__(i)
        
            @staticmethod
            def childTransactionStatuses() -> typing.Type['BusinessRuleImportFileStagingStatusChildTransactionStatuses']:
                return BusinessRuleImportFileStagingStatusChildTransactionStatuses
            __annotations__ = {
                "stagingId": stagingId,
                "fileProcessDate": fileProcessDate,
                "serviceSubmittalDate": serviceSubmittalDate,
                "lastRepostDate": lastRepostDate,
                "status": status,
                "transaction": transaction,
                "fileName": fileName,
                "messages": messages,
                "childTransactionStatuses": childTransactionStatuses,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stagingId"]) -> MetaOapg.properties.stagingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileProcessDate"]) -> MetaOapg.properties.fileProcessDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceSubmittalDate"]) -> MetaOapg.properties.serviceSubmittalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRepostDate"]) -> MetaOapg.properties.lastRepostDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction"]) -> MetaOapg.properties.transaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messages"]) -> MetaOapg.properties.messages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childTransactionStatuses"]) -> 'BusinessRuleImportFileStagingStatusChildTransactionStatuses': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stagingId", "fileProcessDate", "serviceSubmittalDate", "lastRepostDate", "status", "transaction", "fileName", "messages", "childTransactionStatuses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stagingId"]) -> typing.Union[MetaOapg.properties.stagingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileProcessDate"]) -> typing.Union[MetaOapg.properties.fileProcessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceSubmittalDate"]) -> typing.Union[MetaOapg.properties.serviceSubmittalDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRepostDate"]) -> typing.Union[MetaOapg.properties.lastRepostDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction"]) -> typing.Union[MetaOapg.properties.transaction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messages"]) -> typing.Union[MetaOapg.properties.messages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childTransactionStatuses"]) -> typing.Union['BusinessRuleImportFileStagingStatusChildTransactionStatuses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stagingId", "fileProcessDate", "serviceSubmittalDate", "lastRepostDate", "status", "transaction", "fileName", "messages", "childTransactionStatuses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        stagingId: typing.Union[MetaOapg.properties.stagingId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        fileProcessDate: typing.Union[MetaOapg.properties.fileProcessDate, str, datetime, schemas.Unset] = schemas.unset,
        serviceSubmittalDate: typing.Union[MetaOapg.properties.serviceSubmittalDate, str, datetime, schemas.Unset] = schemas.unset,
        lastRepostDate: typing.Union[MetaOapg.properties.lastRepostDate, str, datetime, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        transaction: typing.Union[MetaOapg.properties.transaction, str, schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        messages: typing.Union[MetaOapg.properties.messages, list, tuple, schemas.Unset] = schemas.unset,
        childTransactionStatuses: typing.Union['BusinessRuleImportFileStagingStatusChildTransactionStatuses', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessRuleImportFileStagingStatus':
        return super().__new__(
            cls,
            *args,
            stagingId=stagingId,
            fileProcessDate=fileProcessDate,
            serviceSubmittalDate=serviceSubmittalDate,
            lastRepostDate=lastRepostDate,
            status=status,
            transaction=transaction,
            fileName=fileName,
            messages=messages,
            childTransactionStatuses=childTransactionStatuses,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.business_rule_import_file_staging_status_child_transaction_statuses import BusinessRuleImportFileStagingStatusChildTransactionStatuses
from ukg_python_sdk.model.business_rule_import_message import BusinessRuleImportMessage
