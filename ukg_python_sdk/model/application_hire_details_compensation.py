# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class ApplicationHireDetailsCompensation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_fulltime = schemas.StrSchema
            hours_per_week = schemas.StrSchema
            is_salaried = schemas.StrSchema
            pay_rate = schemas.StrSchema
        
            @staticmethod
            def currency() -> typing.Type['ApplicationHireDetailsCompensationCurrency']:
                return ApplicationHireDetailsCompensationCurrency
            __annotations__ = {
                "is_fulltime": is_fulltime,
                "hours_per_week": hours_per_week,
                "is_salaried": is_salaried,
                "pay_rate": pay_rate,
                "currency": currency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_fulltime"]) -> MetaOapg.properties.is_fulltime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours_per_week"]) -> MetaOapg.properties.hours_per_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_salaried"]) -> MetaOapg.properties.is_salaried: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_rate"]) -> MetaOapg.properties.pay_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'ApplicationHireDetailsCompensationCurrency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_fulltime", "hours_per_week", "is_salaried", "pay_rate", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_fulltime"]) -> typing.Union[MetaOapg.properties.is_fulltime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours_per_week"]) -> typing.Union[MetaOapg.properties.hours_per_week, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_salaried"]) -> typing.Union[MetaOapg.properties.is_salaried, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_rate"]) -> typing.Union[MetaOapg.properties.pay_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['ApplicationHireDetailsCompensationCurrency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_fulltime", "hours_per_week", "is_salaried", "pay_rate", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_fulltime: typing.Union[MetaOapg.properties.is_fulltime, str, schemas.Unset] = schemas.unset,
        hours_per_week: typing.Union[MetaOapg.properties.hours_per_week, str, schemas.Unset] = schemas.unset,
        is_salaried: typing.Union[MetaOapg.properties.is_salaried, str, schemas.Unset] = schemas.unset,
        pay_rate: typing.Union[MetaOapg.properties.pay_rate, str, schemas.Unset] = schemas.unset,
        currency: typing.Union['ApplicationHireDetailsCompensationCurrency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicationHireDetailsCompensation':
        return super().__new__(
            cls,
            *args,
            is_fulltime=is_fulltime,
            hours_per_week=hours_per_week,
            is_salaried=is_salaried,
            pay_rate=pay_rate,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.application_hire_details_compensation_currency import ApplicationHireDetailsCompensationCurrency
