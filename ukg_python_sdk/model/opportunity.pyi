# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Opportunity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The section that contains details of an opportunity associated with the candidateâ€™s application
    """


    class MetaOapg:
        
        class properties:
            title = schemas.DictSchema
        
            @staticmethod
            def description() -> typing.Type['OpportunityDescription']:
                return OpportunityDescription
            id = schemas.StrSchema
            updated_at = schemas.AnyTypeSchema
            created_at = schemas.AnyTypeSchema
            requisition_number = schemas.AnyTypeSchema
        
            @staticmethod
            def dedault_locale() -> typing.Type['OpportunityDedaultLocale']:
                return OpportunityDedaultLocale
        
            @staticmethod
            def compenasation() -> typing.Type['OpportunityCompenasation']:
                return OpportunityCompenasation
        
            @staticmethod
            def job() -> typing.Type['OpportunityJob']:
                return OpportunityJob
        
            @staticmethod
            def job_family() -> typing.Type['OpportunityJobFamily']:
                return OpportunityJobFamily
            
            
            class locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Locations']:
                        return Locations
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Locations'], typing.List['Locations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Locations':
                    return super().__getitem__(i)
        
            @staticmethod
            def company() -> typing.Type['OpportunityCompany']:
                return OpportunityCompany
            recruiter = schemas.DictSchema
            hiring_manager = schemas.AnyTypeSchema
            onboarding_owner = schemas.AnyTypeSchema
        
            @staticmethod
            def recruiting_process() -> typing.Type['OpportunityRecruitingProcess']:
                return OpportunityRecruitingProcess
        
            @staticmethod
            def job_boards() -> typing.Type['OpportunityJobBoards']:
                return OpportunityJobBoards
            published_date = schemas.AnyTypeSchema
            closed_date = schemas.AnyTypeSchema
            status = schemas.AnyTypeSchema
            is_featured = schemas.AnyTypeSchema
            is_shared_with_everyone = schemas.AnyTypeSchema
            internal_notes = schemas.AnyTypeSchema
        
            @staticmethod
            def skill_criteria() -> typing.Type['OpportunitySkillCriteria']:
                return OpportunitySkillCriteria
        
            @staticmethod
            def work_experience_criteria() -> typing.Type['OpportunityWorkExperienceCriteria']:
                return OpportunityWorkExperienceCriteria
        
            @staticmethod
            def education_criteria() -> typing.Type['OpportunityEducationCriteria']:
                return OpportunityEducationCriteria
        
            @staticmethod
            def license_criteria() -> typing.Type['OpportunityLicenseCriteria']:
                return OpportunityLicenseCriteria
        
            @staticmethod
            def behavior_criteria() -> typing.Type['OpportunityBehaviorCriteria']:
                return OpportunityBehaviorCriteria
        
            @staticmethod
            def motivation_criteria() -> typing.Type['OpportunityMotivationCriteria']:
                return OpportunityMotivationCriteria
            is_continuous_opening = schemas.BoolSchema
        
            @staticmethod
            def full_time_equivalent() -> typing.Type['OpportunityFullTimeEquivalent']:
                return OpportunityFullTimeEquivalent
        
            @staticmethod
            def head_count() -> typing.Type['OpportunityHeadCount']:
                return OpportunityHeadCount
            hours_per_week = schemas.AnyTypeSchema
            hours_per_shift = schemas.AnyTypeSchema
            staffing_plan_impact = schemas.AnyTypeSchema
            target_start_date = schemas.AnyTypeSchema
        
            @staticmethod
            def incumbent() -> typing.Type['OpportunityIncumbent']:
                return OpportunityIncumbent
            priority = schemas.AnyTypeSchema
            is_budgeted = schemas.AnyTypeSchema
            opening_reason = schemas.AnyTypeSchema
        
            @staticmethod
            def justification_comments() -> typing.Type['OpportunityJustificationComments']:
                return OpportunityJustificationComments
            
            
            class org_unit_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OrgUnitGroups']:
                        return OrgUnitGroups
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OrgUnitGroups'], typing.List['OrgUnitGroups']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'org_unit_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OrgUnitGroups':
                    return super().__getitem__(i)
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Links']:
                        return Links
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Links'], typing.List['Links']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Links':
                    return super().__getitem__(i)
            __annotations__ = {
                "title": title,
                "description": description,
                "id": id,
                "updated_at": updated_at,
                "created_at": created_at,
                "requisition_number": requisition_number,
                "dedault_locale": dedault_locale,
                "compenasation": compenasation,
                "job": job,
                "job_family": job_family,
                "locations": locations,
                "company": company,
                "recruiter": recruiter,
                "hiring_manager": hiring_manager,
                "onboarding_owner": onboarding_owner,
                "recruiting_process": recruiting_process,
                "job_boards": job_boards,
                "published_date": published_date,
                "closed_date": closed_date,
                "status": status,
                "is_featured": is_featured,
                "is_shared_with_everyone": is_shared_with_everyone,
                "internal_notes": internal_notes,
                "skill_criteria": skill_criteria,
                "work_experience_criteria": work_experience_criteria,
                "education_criteria": education_criteria,
                "license_criteria": license_criteria,
                "behavior_criteria": behavior_criteria,
                "motivation_criteria": motivation_criteria,
                "is_continuous_opening": is_continuous_opening,
                "full_time_equivalent": full_time_equivalent,
                "head_count": head_count,
                "hours_per_week": hours_per_week,
                "hours_per_shift": hours_per_shift,
                "staffing_plan_impact": staffing_plan_impact,
                "target_start_date": target_start_date,
                "incumbent": incumbent,
                "priority": priority,
                "is_budgeted": is_budgeted,
                "opening_reason": opening_reason,
                "justification_comments": justification_comments,
                "org_unit_groups": org_unit_groups,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'OpportunityDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requisition_number"]) -> MetaOapg.properties.requisition_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dedault_locale"]) -> 'OpportunityDedaultLocale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compenasation"]) -> 'OpportunityCompenasation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'OpportunityJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_family"]) -> 'OpportunityJobFamily': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> 'OpportunityCompany': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruiter"]) -> MetaOapg.properties.recruiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_manager"]) -> MetaOapg.properties.hiring_manager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_owner"]) -> MetaOapg.properties.onboarding_owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruiting_process"]) -> 'OpportunityRecruitingProcess': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_boards"]) -> 'OpportunityJobBoards': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published_date"]) -> MetaOapg.properties.published_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_date"]) -> MetaOapg.properties.closed_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_featured"]) -> MetaOapg.properties.is_featured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_shared_with_everyone"]) -> MetaOapg.properties.is_shared_with_everyone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal_notes"]) -> MetaOapg.properties.internal_notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skill_criteria"]) -> 'OpportunitySkillCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_experience_criteria"]) -> 'OpportunityWorkExperienceCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["education_criteria"]) -> 'OpportunityEducationCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license_criteria"]) -> 'OpportunityLicenseCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["behavior_criteria"]) -> 'OpportunityBehaviorCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motivation_criteria"]) -> 'OpportunityMotivationCriteria': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_continuous_opening"]) -> MetaOapg.properties.is_continuous_opening: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_time_equivalent"]) -> 'OpportunityFullTimeEquivalent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["head_count"]) -> 'OpportunityHeadCount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours_per_week"]) -> MetaOapg.properties.hours_per_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours_per_shift"]) -> MetaOapg.properties.hours_per_shift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staffing_plan_impact"]) -> MetaOapg.properties.staffing_plan_impact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_start_date"]) -> MetaOapg.properties.target_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incumbent"]) -> 'OpportunityIncumbent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_budgeted"]) -> MetaOapg.properties.is_budgeted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opening_reason"]) -> MetaOapg.properties.opening_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["justification_comments"]) -> 'OpportunityJustificationComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_unit_groups"]) -> MetaOapg.properties.org_unit_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "updated_at", "created_at", "requisition_number", "dedault_locale", "compenasation", "job", "job_family", "locations", "company", "recruiter", "hiring_manager", "onboarding_owner", "recruiting_process", "job_boards", "published_date", "closed_date", "status", "is_featured", "is_shared_with_everyone", "internal_notes", "skill_criteria", "work_experience_criteria", "education_criteria", "license_criteria", "behavior_criteria", "motivation_criteria", "is_continuous_opening", "full_time_equivalent", "head_count", "hours_per_week", "hours_per_shift", "staffing_plan_impact", "target_start_date", "incumbent", "priority", "is_budgeted", "opening_reason", "justification_comments", "org_unit_groups", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['OpportunityDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requisition_number"]) -> typing.Union[MetaOapg.properties.requisition_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dedault_locale"]) -> typing.Union['OpportunityDedaultLocale', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compenasation"]) -> typing.Union['OpportunityCompenasation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['OpportunityJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_family"]) -> typing.Union['OpportunityJobFamily', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union[MetaOapg.properties.locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union['OpportunityCompany', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruiter"]) -> typing.Union[MetaOapg.properties.recruiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_manager"]) -> typing.Union[MetaOapg.properties.hiring_manager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_owner"]) -> typing.Union[MetaOapg.properties.onboarding_owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruiting_process"]) -> typing.Union['OpportunityRecruitingProcess', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_boards"]) -> typing.Union['OpportunityJobBoards', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published_date"]) -> typing.Union[MetaOapg.properties.published_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_date"]) -> typing.Union[MetaOapg.properties.closed_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_featured"]) -> typing.Union[MetaOapg.properties.is_featured, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_shared_with_everyone"]) -> typing.Union[MetaOapg.properties.is_shared_with_everyone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal_notes"]) -> typing.Union[MetaOapg.properties.internal_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skill_criteria"]) -> typing.Union['OpportunitySkillCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_experience_criteria"]) -> typing.Union['OpportunityWorkExperienceCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["education_criteria"]) -> typing.Union['OpportunityEducationCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license_criteria"]) -> typing.Union['OpportunityLicenseCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["behavior_criteria"]) -> typing.Union['OpportunityBehaviorCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motivation_criteria"]) -> typing.Union['OpportunityMotivationCriteria', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_continuous_opening"]) -> typing.Union[MetaOapg.properties.is_continuous_opening, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_time_equivalent"]) -> typing.Union['OpportunityFullTimeEquivalent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["head_count"]) -> typing.Union['OpportunityHeadCount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours_per_week"]) -> typing.Union[MetaOapg.properties.hours_per_week, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours_per_shift"]) -> typing.Union[MetaOapg.properties.hours_per_shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staffing_plan_impact"]) -> typing.Union[MetaOapg.properties.staffing_plan_impact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_start_date"]) -> typing.Union[MetaOapg.properties.target_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incumbent"]) -> typing.Union['OpportunityIncumbent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_budgeted"]) -> typing.Union[MetaOapg.properties.is_budgeted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opening_reason"]) -> typing.Union[MetaOapg.properties.opening_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["justification_comments"]) -> typing.Union['OpportunityJustificationComments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_unit_groups"]) -> typing.Union[MetaOapg.properties.org_unit_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "updated_at", "created_at", "requisition_number", "dedault_locale", "compenasation", "job", "job_family", "locations", "company", "recruiter", "hiring_manager", "onboarding_owner", "recruiting_process", "job_boards", "published_date", "closed_date", "status", "is_featured", "is_shared_with_everyone", "internal_notes", "skill_criteria", "work_experience_criteria", "education_criteria", "license_criteria", "behavior_criteria", "motivation_criteria", "is_continuous_opening", "full_time_equivalent", "head_count", "hours_per_week", "hours_per_shift", "staffing_plan_impact", "target_start_date", "incumbent", "priority", "is_budgeted", "opening_reason", "justification_comments", "org_unit_groups", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        description: typing.Union['OpportunityDescription', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        requisition_number: typing.Union[MetaOapg.properties.requisition_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        dedault_locale: typing.Union['OpportunityDedaultLocale', schemas.Unset] = schemas.unset,
        compenasation: typing.Union['OpportunityCompenasation', schemas.Unset] = schemas.unset,
        job: typing.Union['OpportunityJob', schemas.Unset] = schemas.unset,
        job_family: typing.Union['OpportunityJobFamily', schemas.Unset] = schemas.unset,
        locations: typing.Union[MetaOapg.properties.locations, list, tuple, schemas.Unset] = schemas.unset,
        company: typing.Union['OpportunityCompany', schemas.Unset] = schemas.unset,
        recruiter: typing.Union[MetaOapg.properties.recruiter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        hiring_manager: typing.Union[MetaOapg.properties.hiring_manager, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        onboarding_owner: typing.Union[MetaOapg.properties.onboarding_owner, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        recruiting_process: typing.Union['OpportunityRecruitingProcess', schemas.Unset] = schemas.unset,
        job_boards: typing.Union['OpportunityJobBoards', schemas.Unset] = schemas.unset,
        published_date: typing.Union[MetaOapg.properties.published_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        closed_date: typing.Union[MetaOapg.properties.closed_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        is_featured: typing.Union[MetaOapg.properties.is_featured, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        is_shared_with_everyone: typing.Union[MetaOapg.properties.is_shared_with_everyone, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        internal_notes: typing.Union[MetaOapg.properties.internal_notes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        skill_criteria: typing.Union['OpportunitySkillCriteria', schemas.Unset] = schemas.unset,
        work_experience_criteria: typing.Union['OpportunityWorkExperienceCriteria', schemas.Unset] = schemas.unset,
        education_criteria: typing.Union['OpportunityEducationCriteria', schemas.Unset] = schemas.unset,
        license_criteria: typing.Union['OpportunityLicenseCriteria', schemas.Unset] = schemas.unset,
        behavior_criteria: typing.Union['OpportunityBehaviorCriteria', schemas.Unset] = schemas.unset,
        motivation_criteria: typing.Union['OpportunityMotivationCriteria', schemas.Unset] = schemas.unset,
        is_continuous_opening: typing.Union[MetaOapg.properties.is_continuous_opening, bool, schemas.Unset] = schemas.unset,
        full_time_equivalent: typing.Union['OpportunityFullTimeEquivalent', schemas.Unset] = schemas.unset,
        head_count: typing.Union['OpportunityHeadCount', schemas.Unset] = schemas.unset,
        hours_per_week: typing.Union[MetaOapg.properties.hours_per_week, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hours_per_shift: typing.Union[MetaOapg.properties.hours_per_shift, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        staffing_plan_impact: typing.Union[MetaOapg.properties.staffing_plan_impact, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        target_start_date: typing.Union[MetaOapg.properties.target_start_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        incumbent: typing.Union['OpportunityIncumbent', schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        is_budgeted: typing.Union[MetaOapg.properties.is_budgeted, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        opening_reason: typing.Union[MetaOapg.properties.opening_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        justification_comments: typing.Union['OpportunityJustificationComments', schemas.Unset] = schemas.unset,
        org_unit_groups: typing.Union[MetaOapg.properties.org_unit_groups, list, tuple, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Opportunity':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            id=id,
            updated_at=updated_at,
            created_at=created_at,
            requisition_number=requisition_number,
            dedault_locale=dedault_locale,
            compenasation=compenasation,
            job=job,
            job_family=job_family,
            locations=locations,
            company=company,
            recruiter=recruiter,
            hiring_manager=hiring_manager,
            onboarding_owner=onboarding_owner,
            recruiting_process=recruiting_process,
            job_boards=job_boards,
            published_date=published_date,
            closed_date=closed_date,
            status=status,
            is_featured=is_featured,
            is_shared_with_everyone=is_shared_with_everyone,
            internal_notes=internal_notes,
            skill_criteria=skill_criteria,
            work_experience_criteria=work_experience_criteria,
            education_criteria=education_criteria,
            license_criteria=license_criteria,
            behavior_criteria=behavior_criteria,
            motivation_criteria=motivation_criteria,
            is_continuous_opening=is_continuous_opening,
            full_time_equivalent=full_time_equivalent,
            head_count=head_count,
            hours_per_week=hours_per_week,
            hours_per_shift=hours_per_shift,
            staffing_plan_impact=staffing_plan_impact,
            target_start_date=target_start_date,
            incumbent=incumbent,
            priority=priority,
            is_budgeted=is_budgeted,
            opening_reason=opening_reason,
            justification_comments=justification_comments,
            org_unit_groups=org_unit_groups,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.links import Links
from ukg_python_sdk.model.locations import Locations
from ukg_python_sdk.model.opportunity_behavior_criteria import OpportunityBehaviorCriteria
from ukg_python_sdk.model.opportunity_company import OpportunityCompany
from ukg_python_sdk.model.opportunity_compenasation import OpportunityCompenasation
from ukg_python_sdk.model.opportunity_dedault_locale import OpportunityDedaultLocale
from ukg_python_sdk.model.opportunity_description import OpportunityDescription
from ukg_python_sdk.model.opportunity_education_criteria import OpportunityEducationCriteria
from ukg_python_sdk.model.opportunity_full_time_equivalent import OpportunityFullTimeEquivalent
from ukg_python_sdk.model.opportunity_head_count import OpportunityHeadCount
from ukg_python_sdk.model.opportunity_incumbent import OpportunityIncumbent
from ukg_python_sdk.model.opportunity_job import OpportunityJob
from ukg_python_sdk.model.opportunity_job_boards import OpportunityJobBoards
from ukg_python_sdk.model.opportunity_job_family import OpportunityJobFamily
from ukg_python_sdk.model.opportunity_justification_comments import OpportunityJustificationComments
from ukg_python_sdk.model.opportunity_license_criteria import OpportunityLicenseCriteria
from ukg_python_sdk.model.opportunity_motivation_criteria import OpportunityMotivationCriteria
from ukg_python_sdk.model.opportunity_recruiting_process import OpportunityRecruitingProcess
from ukg_python_sdk.model.opportunity_skill_criteria import OpportunitySkillCriteria
from ukg_python_sdk.model.opportunity_work_experience_criteria import OpportunityWorkExperienceCriteria
from ukg_python_sdk.model.org_unit_groups import OrgUnitGroups
