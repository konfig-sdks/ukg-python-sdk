# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeePayDeductionElementsModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            systemId = schemas.StrSchema
            payDeductionId = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            payGroup = schemas.StrSchema
            payDeductionName = schemas.StrSchema
            payDeductionDescription = schemas.StrSchema
            periodStartId = schemas.StrSchema
            periodEndId = schemas.StrSchema
            periodStartName = schemas.StrSchema
            periodEndName = schemas.StrSchema
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            project = schemas.StrSchema
            task = schemas.StrSchema
            recurring = schemas.StrSchema
            amount = schemas.StrSchema
            notes = schemas.StrSchema
            modifiedDate = schemas.DateTimeSchema
            country = schemas.StrSchema
            paymentOrDeductionIndicator = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "companyId": companyId,
                "systemId": systemId,
                "payDeductionId": payDeductionId,
                "employeeNumber": employeeNumber,
                "payGroup": payGroup,
                "payDeductionName": payDeductionName,
                "payDeductionDescription": payDeductionDescription,
                "periodStartId": periodStartId,
                "periodEndId": periodEndId,
                "periodStartName": periodStartName,
                "periodEndName": periodEndName,
                "startDate": startDate,
                "endDate": endDate,
                "project": project,
                "task": task,
                "recurring": recurring,
                "amount": amount,
                "notes": notes,
                "modifiedDate": modifiedDate,
                "country": country,
                "paymentOrDeductionIndicator": paymentOrDeductionIndicator,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDeductionId"]) -> MetaOapg.properties.payDeductionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDeductionName"]) -> MetaOapg.properties.payDeductionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDeductionDescription"]) -> MetaOapg.properties.payDeductionDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStartId"]) -> MetaOapg.properties.periodStartId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndId"]) -> MetaOapg.properties.periodEndId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStartName"]) -> MetaOapg.properties.periodStartName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndName"]) -> MetaOapg.properties.periodEndName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring"]) -> MetaOapg.properties.recurring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedDate"]) -> MetaOapg.properties.modifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentOrDeductionIndicator"]) -> MetaOapg.properties.paymentOrDeductionIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "systemId", "payDeductionId", "employeeNumber", "payGroup", "payDeductionName", "payDeductionDescription", "periodStartId", "periodEndId", "periodStartName", "periodEndName", "startDate", "endDate", "project", "task", "recurring", "amount", "notes", "modifiedDate", "country", "paymentOrDeductionIndicator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDeductionId"]) -> typing.Union[MetaOapg.properties.payDeductionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDeductionName"]) -> typing.Union[MetaOapg.properties.payDeductionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDeductionDescription"]) -> typing.Union[MetaOapg.properties.payDeductionDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStartId"]) -> typing.Union[MetaOapg.properties.periodStartId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndId"]) -> typing.Union[MetaOapg.properties.periodEndId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStartName"]) -> typing.Union[MetaOapg.properties.periodStartName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndName"]) -> typing.Union[MetaOapg.properties.periodEndName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring"]) -> typing.Union[MetaOapg.properties.recurring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedDate"]) -> typing.Union[MetaOapg.properties.modifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentOrDeductionIndicator"]) -> typing.Union[MetaOapg.properties.paymentOrDeductionIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "systemId", "payDeductionId", "employeeNumber", "payGroup", "payDeductionName", "payDeductionDescription", "periodStartId", "periodEndId", "periodStartName", "periodEndName", "startDate", "endDate", "project", "task", "recurring", "amount", "notes", "modifiedDate", "country", "paymentOrDeductionIndicator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, str, schemas.Unset] = schemas.unset,
        payDeductionId: typing.Union[MetaOapg.properties.payDeductionId, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        payDeductionName: typing.Union[MetaOapg.properties.payDeductionName, str, schemas.Unset] = schemas.unset,
        payDeductionDescription: typing.Union[MetaOapg.properties.payDeductionDescription, str, schemas.Unset] = schemas.unset,
        periodStartId: typing.Union[MetaOapg.properties.periodStartId, str, schemas.Unset] = schemas.unset,
        periodEndId: typing.Union[MetaOapg.properties.periodEndId, str, schemas.Unset] = schemas.unset,
        periodStartName: typing.Union[MetaOapg.properties.periodStartName, str, schemas.Unset] = schemas.unset,
        periodEndName: typing.Union[MetaOapg.properties.periodEndName, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        task: typing.Union[MetaOapg.properties.task, str, schemas.Unset] = schemas.unset,
        recurring: typing.Union[MetaOapg.properties.recurring, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        modifiedDate: typing.Union[MetaOapg.properties.modifiedDate, str, datetime, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        paymentOrDeductionIndicator: typing.Union[MetaOapg.properties.paymentOrDeductionIndicator, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePayDeductionElementsModel':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            companyId=companyId,
            systemId=systemId,
            payDeductionId=payDeductionId,
            employeeNumber=employeeNumber,
            payGroup=payGroup,
            payDeductionName=payDeductionName,
            payDeductionDescription=payDeductionDescription,
            periodStartId=periodStartId,
            periodEndId=periodEndId,
            periodStartName=periodStartName,
            periodEndName=periodEndName,
            startDate=startDate,
            endDate=endDate,
            project=project,
            task=task,
            recurring=recurring,
            amount=amount,
            notes=notes,
            modifiedDate=modifiedDate,
            country=country,
            paymentOrDeductionIndicator=paymentOrDeductionIndicator,
            _configuration=_configuration,
            **kwargs,
        )
