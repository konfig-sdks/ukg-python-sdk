# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class WorkDetailDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            workSummaryId = schemas.Int64Schema
            startTime = schemas.DateTimeSchema
            endTime = schemas.DateTimeSchema
            minutes = schemas.Int64Schema
            rate = schemas.Float64Schema
        
            @staticmethod
            def timecode() -> typing.Type['TimeCodeDto']:
                return TimeCodeDto
        
            @staticmethod
            def hourType() -> typing.Type['HourTypeDto']:
                return HourTypeDto
        
            @staticmethod
            def job() -> typing.Type['JobDto']:
                return JobDto
        
            @staticmethod
            def department() -> typing.Type['DepartmentDto']:
                return DepartmentDto
        
            @staticmethod
            def project() -> typing.Type['ProjectDto']:
                return ProjectDto
        
            @staticmethod
            def docket() -> typing.Type['DocketDto']:
                return DocketDto
        
            @staticmethod
            def team() -> typing.Type['TeamDto']:
                return TeamDto
            workType = schemas.StrSchema
            flag1 = schemas.StrSchema
            flag2 = schemas.StrSchema
            flag3 = schemas.StrSchema
            flag4 = schemas.StrSchema
            flag5 = schemas.StrSchema
            flag6 = schemas.StrSchema
            flag7 = schemas.StrSchema
            flag8 = schemas.StrSchema
            flag9 = schemas.StrSchema
            flag10 = schemas.StrSchema
            udf1 = schemas.StrSchema
            udf2 = schemas.StrSchema
            udf3 = schemas.StrSchema
            udf4 = schemas.StrSchema
            udf5 = schemas.StrSchema
            udf6 = schemas.StrSchema
            udf7 = schemas.StrSchema
            udf8 = schemas.StrSchema
            udf9 = schemas.StrSchema
            udf10 = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "workSummaryId": workSummaryId,
                "startTime": startTime,
                "endTime": endTime,
                "minutes": minutes,
                "rate": rate,
                "timecode": timecode,
                "hourType": hourType,
                "job": job,
                "department": department,
                "project": project,
                "docket": docket,
                "team": team,
                "workType": workType,
                "flag1": flag1,
                "flag2": flag2,
                "flag3": flag3,
                "flag4": flag4,
                "flag5": flag5,
                "flag6": flag6,
                "flag7": flag7,
                "flag8": flag8,
                "flag9": flag9,
                "flag10": flag10,
                "udf1": udf1,
                "udf2": udf2,
                "udf3": udf3,
                "udf4": udf4,
                "udf5": udf5,
                "udf6": udf6,
                "udf7": udf7,
                "udf8": udf8,
                "udf9": udf9,
                "udf10": udf10,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workSummaryId"]) -> MetaOapg.properties.workSummaryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> MetaOapg.properties.minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timecode"]) -> 'TimeCodeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourType"]) -> 'HourTypeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'JobDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'DepartmentDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'ProjectDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docket"]) -> 'DocketDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'TeamDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workType"]) -> MetaOapg.properties.workType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag1"]) -> MetaOapg.properties.flag1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag2"]) -> MetaOapg.properties.flag2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag3"]) -> MetaOapg.properties.flag3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag4"]) -> MetaOapg.properties.flag4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag5"]) -> MetaOapg.properties.flag5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag6"]) -> MetaOapg.properties.flag6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag7"]) -> MetaOapg.properties.flag7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag8"]) -> MetaOapg.properties.flag8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag9"]) -> MetaOapg.properties.flag9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag10"]) -> MetaOapg.properties.flag10: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf1"]) -> MetaOapg.properties.udf1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf2"]) -> MetaOapg.properties.udf2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf3"]) -> MetaOapg.properties.udf3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf4"]) -> MetaOapg.properties.udf4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf5"]) -> MetaOapg.properties.udf5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf6"]) -> MetaOapg.properties.udf6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf7"]) -> MetaOapg.properties.udf7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf8"]) -> MetaOapg.properties.udf8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf9"]) -> MetaOapg.properties.udf9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["udf10"]) -> MetaOapg.properties.udf10: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "workSummaryId", "startTime", "endTime", "minutes", "rate", "timecode", "hourType", "job", "department", "project", "docket", "team", "workType", "flag1", "flag2", "flag3", "flag4", "flag5", "flag6", "flag7", "flag8", "flag9", "flag10", "udf1", "udf2", "udf3", "udf4", "udf5", "udf6", "udf7", "udf8", "udf9", "udf10", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workSummaryId"]) -> typing.Union[MetaOapg.properties.workSummaryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union[MetaOapg.properties.minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timecode"]) -> typing.Union['TimeCodeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourType"]) -> typing.Union['HourTypeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['JobDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['DepartmentDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['ProjectDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docket"]) -> typing.Union['DocketDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['TeamDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workType"]) -> typing.Union[MetaOapg.properties.workType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag1"]) -> typing.Union[MetaOapg.properties.flag1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag2"]) -> typing.Union[MetaOapg.properties.flag2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag3"]) -> typing.Union[MetaOapg.properties.flag3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag4"]) -> typing.Union[MetaOapg.properties.flag4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag5"]) -> typing.Union[MetaOapg.properties.flag5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag6"]) -> typing.Union[MetaOapg.properties.flag6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag7"]) -> typing.Union[MetaOapg.properties.flag7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag8"]) -> typing.Union[MetaOapg.properties.flag8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag9"]) -> typing.Union[MetaOapg.properties.flag9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag10"]) -> typing.Union[MetaOapg.properties.flag10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf1"]) -> typing.Union[MetaOapg.properties.udf1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf2"]) -> typing.Union[MetaOapg.properties.udf2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf3"]) -> typing.Union[MetaOapg.properties.udf3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf4"]) -> typing.Union[MetaOapg.properties.udf4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf5"]) -> typing.Union[MetaOapg.properties.udf5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf6"]) -> typing.Union[MetaOapg.properties.udf6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf7"]) -> typing.Union[MetaOapg.properties.udf7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf8"]) -> typing.Union[MetaOapg.properties.udf8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf9"]) -> typing.Union[MetaOapg.properties.udf9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["udf10"]) -> typing.Union[MetaOapg.properties.udf10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "workSummaryId", "startTime", "endTime", "minutes", "rate", "timecode", "hourType", "job", "department", "project", "docket", "team", "workType", "flag1", "flag2", "flag3", "flag4", "flag5", "flag6", "flag7", "flag8", "flag9", "flag10", "udf1", "udf2", "udf3", "udf4", "udf5", "udf6", "udf7", "udf8", "udf9", "udf10", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workSummaryId: typing.Union[MetaOapg.properties.workSummaryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        minutes: typing.Union[MetaOapg.properties.minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timecode: typing.Union['TimeCodeDto', schemas.Unset] = schemas.unset,
        hourType: typing.Union['HourTypeDto', schemas.Unset] = schemas.unset,
        job: typing.Union['JobDto', schemas.Unset] = schemas.unset,
        department: typing.Union['DepartmentDto', schemas.Unset] = schemas.unset,
        project: typing.Union['ProjectDto', schemas.Unset] = schemas.unset,
        docket: typing.Union['DocketDto', schemas.Unset] = schemas.unset,
        team: typing.Union['TeamDto', schemas.Unset] = schemas.unset,
        workType: typing.Union[MetaOapg.properties.workType, str, schemas.Unset] = schemas.unset,
        flag1: typing.Union[MetaOapg.properties.flag1, str, schemas.Unset] = schemas.unset,
        flag2: typing.Union[MetaOapg.properties.flag2, str, schemas.Unset] = schemas.unset,
        flag3: typing.Union[MetaOapg.properties.flag3, str, schemas.Unset] = schemas.unset,
        flag4: typing.Union[MetaOapg.properties.flag4, str, schemas.Unset] = schemas.unset,
        flag5: typing.Union[MetaOapg.properties.flag5, str, schemas.Unset] = schemas.unset,
        flag6: typing.Union[MetaOapg.properties.flag6, str, schemas.Unset] = schemas.unset,
        flag7: typing.Union[MetaOapg.properties.flag7, str, schemas.Unset] = schemas.unset,
        flag8: typing.Union[MetaOapg.properties.flag8, str, schemas.Unset] = schemas.unset,
        flag9: typing.Union[MetaOapg.properties.flag9, str, schemas.Unset] = schemas.unset,
        flag10: typing.Union[MetaOapg.properties.flag10, str, schemas.Unset] = schemas.unset,
        udf1: typing.Union[MetaOapg.properties.udf1, str, schemas.Unset] = schemas.unset,
        udf2: typing.Union[MetaOapg.properties.udf2, str, schemas.Unset] = schemas.unset,
        udf3: typing.Union[MetaOapg.properties.udf3, str, schemas.Unset] = schemas.unset,
        udf4: typing.Union[MetaOapg.properties.udf4, str, schemas.Unset] = schemas.unset,
        udf5: typing.Union[MetaOapg.properties.udf5, str, schemas.Unset] = schemas.unset,
        udf6: typing.Union[MetaOapg.properties.udf6, str, schemas.Unset] = schemas.unset,
        udf7: typing.Union[MetaOapg.properties.udf7, str, schemas.Unset] = schemas.unset,
        udf8: typing.Union[MetaOapg.properties.udf8, str, schemas.Unset] = schemas.unset,
        udf9: typing.Union[MetaOapg.properties.udf9, str, schemas.Unset] = schemas.unset,
        udf10: typing.Union[MetaOapg.properties.udf10, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkDetailDto':
        return super().__new__(
            cls,
            *args,
            id=id,
            workSummaryId=workSummaryId,
            startTime=startTime,
            endTime=endTime,
            minutes=minutes,
            rate=rate,
            timecode=timecode,
            hourType=hourType,
            job=job,
            department=department,
            project=project,
            docket=docket,
            team=team,
            workType=workType,
            flag1=flag1,
            flag2=flag2,
            flag3=flag3,
            flag4=flag4,
            flag5=flag5,
            flag6=flag6,
            flag7=flag7,
            flag8=flag8,
            flag9=flag9,
            flag10=flag10,
            udf1=udf1,
            udf2=udf2,
            udf3=udf3,
            udf4=udf4,
            udf5=udf5,
            udf6=udf6,
            udf7=udf7,
            udf8=udf8,
            udf9=udf9,
            udf10=udf10,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.department_dto import DepartmentDto
from ukg_python_sdk.model.docket_dto import DocketDto
from ukg_python_sdk.model.hour_type_dto import HourTypeDto
from ukg_python_sdk.model.job_dto import JobDto
from ukg_python_sdk.model.project_dto import ProjectDto
from ukg_python_sdk.model.team_dto import TeamDto
from ukg_python_sdk.model.time_code_dto import TimeCodeDto
