# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Contact(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            city = schemas.StrSchema
            countryCode = schemas.StrSchema
            county = schemas.StrSchema
            addressIsDifferentFromEmployee = schemas.BoolSchema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            state = schemas.StrSchema
            zipCode = schemas.StrSchema
            cobraExport = schemas.BoolSchema
            cobraIsActive = schemas.BoolSchema
            cobraReason = schemas.StrSchema
            cobraStatus = schemas.StrSchema
            cobraStatusDate = schemas.DateTimeSchema
            dateOfBirth = schemas.DateTimeSchema
            dateOfCOBRAEvent = schemas.DateTimeSchema
            dateOfCOBRALetter = schemas.DateTimeSchema
            employeeId = schemas.StrSchema
            gender = schemas.StrSchema
            importId = schemas.StrSchema
            isBeneficiary = schemas.BoolSchema
            isDependent = schemas.BoolSchema
            isDisabled = schemas.BoolSchema
            isEmergencyContact = schemas.BoolSchema
            isSmoker = schemas.BoolSchema
            isStudent = schemas.BoolSchema
            marriageDate = schemas.DateTimeSchema
            firstName = schemas.StrSchema
            formerName = schemas.StrSchema
            lastName = schemas.StrSchema
            middleName = schemas.StrSchema
            nameSuffix = schemas.StrSchema
            occupation = schemas.StrSchema
            otherInsurance = schemas.StrSchema
            homePhoneCountry = schemas.StrSchema
            homePhoneNumber = schemas.StrSchema
            otherPhoneNumber = schemas.StrSchema
            otherPhoneType = schemas.StrSchema
            preferredPhoneNumber = schemas.StrSchema
            relationshipCode = schemas.StrSchema
            relationshipDescription = schemas.StrSchema
            ssn = schemas.StrSchema
            contactId = schemas.StrSchema
            userDefinedField01 = schemas.StrSchema
            workPhoneExtension = schemas.StrSchema
            workPhoneNumber = schemas.StrSchema
            cobraNotes = schemas.StrSchema
            notes = schemas.StrSchema
            isActive = schemas.BoolSchema
            statusAsOfDate = schemas.DateTimeSchema
            deathDate = schemas.DateTimeSchema
            divorceDate = schemas.DateTimeSchema
            emailAddress = schemas.StrSchema
            otherPhoneCountryCode = schemas.StrSchema
            healthCareId = schemas.StrSchema
            nationalId = schemas.StrSchema
            nationalIdExpirationDate = schemas.DateTimeSchema
            personID = schemas.UUIDSchema
            addressID = schemas.UUIDSchema
            workPhoneId = schemas.UUIDSchema
            homePhoneId = schemas.UUIDSchema
            otherPhoneId = schemas.UUIDSchema
            __annotations__ = {
                "city": city,
                "countryCode": countryCode,
                "county": county,
                "addressIsDifferentFromEmployee": addressIsDifferentFromEmployee,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "state": state,
                "zipCode": zipCode,
                "cobraExport": cobraExport,
                "cobraIsActive": cobraIsActive,
                "cobraReason": cobraReason,
                "cobraStatus": cobraStatus,
                "cobraStatusDate": cobraStatusDate,
                "dateOfBirth": dateOfBirth,
                "dateOfCOBRAEvent": dateOfCOBRAEvent,
                "dateOfCOBRALetter": dateOfCOBRALetter,
                "employeeId": employeeId,
                "gender": gender,
                "importId": importId,
                "isBeneficiary": isBeneficiary,
                "isDependent": isDependent,
                "isDisabled": isDisabled,
                "isEmergencyContact": isEmergencyContact,
                "isSmoker": isSmoker,
                "isStudent": isStudent,
                "marriageDate": marriageDate,
                "firstName": firstName,
                "formerName": formerName,
                "lastName": lastName,
                "middleName": middleName,
                "nameSuffix": nameSuffix,
                "occupation": occupation,
                "otherInsurance": otherInsurance,
                "homePhoneCountry": homePhoneCountry,
                "homePhoneNumber": homePhoneNumber,
                "otherPhoneNumber": otherPhoneNumber,
                "otherPhoneType": otherPhoneType,
                "preferredPhoneNumber": preferredPhoneNumber,
                "relationshipCode": relationshipCode,
                "relationshipDescription": relationshipDescription,
                "ssn": ssn,
                "contactId": contactId,
                "userDefinedField01": userDefinedField01,
                "workPhoneExtension": workPhoneExtension,
                "workPhoneNumber": workPhoneNumber,
                "cobraNotes": cobraNotes,
                "notes": notes,
                "isActive": isActive,
                "statusAsOfDate": statusAsOfDate,
                "deathDate": deathDate,
                "divorceDate": divorceDate,
                "emailAddress": emailAddress,
                "otherPhoneCountryCode": otherPhoneCountryCode,
                "healthCareId": healthCareId,
                "nationalId": nationalId,
                "nationalIdExpirationDate": nationalIdExpirationDate,
                "personID": personID,
                "addressID": addressID,
                "workPhoneId": workPhoneId,
                "homePhoneId": homePhoneId,
                "otherPhoneId": otherPhoneId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressIsDifferentFromEmployee"]) -> MetaOapg.properties.addressIsDifferentFromEmployee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> MetaOapg.properties.zipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraExport"]) -> MetaOapg.properties.cobraExport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraIsActive"]) -> MetaOapg.properties.cobraIsActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraReason"]) -> MetaOapg.properties.cobraReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraStatus"]) -> MetaOapg.properties.cobraStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraStatusDate"]) -> MetaOapg.properties.cobraStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfCOBRAEvent"]) -> MetaOapg.properties.dateOfCOBRAEvent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfCOBRALetter"]) -> MetaOapg.properties.dateOfCOBRALetter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importId"]) -> MetaOapg.properties.importId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBeneficiary"]) -> MetaOapg.properties.isBeneficiary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDependent"]) -> MetaOapg.properties.isDependent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDisabled"]) -> MetaOapg.properties.isDisabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEmergencyContact"]) -> MetaOapg.properties.isEmergencyContact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSmoker"]) -> MetaOapg.properties.isSmoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isStudent"]) -> MetaOapg.properties.isStudent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marriageDate"]) -> MetaOapg.properties.marriageDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formerName"]) -> MetaOapg.properties.formerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameSuffix"]) -> MetaOapg.properties.nameSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occupation"]) -> MetaOapg.properties.occupation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherInsurance"]) -> MetaOapg.properties.otherInsurance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneCountry"]) -> MetaOapg.properties.homePhoneCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneNumber"]) -> MetaOapg.properties.homePhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPhoneNumber"]) -> MetaOapg.properties.otherPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPhoneType"]) -> MetaOapg.properties.otherPhoneType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredPhoneNumber"]) -> MetaOapg.properties.preferredPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationshipCode"]) -> MetaOapg.properties.relationshipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationshipDescription"]) -> MetaOapg.properties.relationshipDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField01"]) -> MetaOapg.properties.userDefinedField01: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneExtension"]) -> MetaOapg.properties.workPhoneExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneNumber"]) -> MetaOapg.properties.workPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraNotes"]) -> MetaOapg.properties.cobraNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusAsOfDate"]) -> MetaOapg.properties.statusAsOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deathDate"]) -> MetaOapg.properties.deathDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["divorceDate"]) -> MetaOapg.properties.divorceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPhoneCountryCode"]) -> MetaOapg.properties.otherPhoneCountryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthCareId"]) -> MetaOapg.properties.healthCareId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationalId"]) -> MetaOapg.properties.nationalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationalIdExpirationDate"]) -> MetaOapg.properties.nationalIdExpirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personID"]) -> MetaOapg.properties.personID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressID"]) -> MetaOapg.properties.addressID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneId"]) -> MetaOapg.properties.workPhoneId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneId"]) -> MetaOapg.properties.homePhoneId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPhoneId"]) -> MetaOapg.properties.otherPhoneId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["city", "countryCode", "county", "addressIsDifferentFromEmployee", "addressLine1", "addressLine2", "state", "zipCode", "cobraExport", "cobraIsActive", "cobraReason", "cobraStatus", "cobraStatusDate", "dateOfBirth", "dateOfCOBRAEvent", "dateOfCOBRALetter", "employeeId", "gender", "importId", "isBeneficiary", "isDependent", "isDisabled", "isEmergencyContact", "isSmoker", "isStudent", "marriageDate", "firstName", "formerName", "lastName", "middleName", "nameSuffix", "occupation", "otherInsurance", "homePhoneCountry", "homePhoneNumber", "otherPhoneNumber", "otherPhoneType", "preferredPhoneNumber", "relationshipCode", "relationshipDescription", "ssn", "contactId", "userDefinedField01", "workPhoneExtension", "workPhoneNumber", "cobraNotes", "notes", "isActive", "statusAsOfDate", "deathDate", "divorceDate", "emailAddress", "otherPhoneCountryCode", "healthCareId", "nationalId", "nationalIdExpirationDate", "personID", "addressID", "workPhoneId", "homePhoneId", "otherPhoneId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressIsDifferentFromEmployee"]) -> typing.Union[MetaOapg.properties.addressIsDifferentFromEmployee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union[MetaOapg.properties.zipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraExport"]) -> typing.Union[MetaOapg.properties.cobraExport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraIsActive"]) -> typing.Union[MetaOapg.properties.cobraIsActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraReason"]) -> typing.Union[MetaOapg.properties.cobraReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraStatus"]) -> typing.Union[MetaOapg.properties.cobraStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraStatusDate"]) -> typing.Union[MetaOapg.properties.cobraStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfCOBRAEvent"]) -> typing.Union[MetaOapg.properties.dateOfCOBRAEvent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfCOBRALetter"]) -> typing.Union[MetaOapg.properties.dateOfCOBRALetter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importId"]) -> typing.Union[MetaOapg.properties.importId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBeneficiary"]) -> typing.Union[MetaOapg.properties.isBeneficiary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDependent"]) -> typing.Union[MetaOapg.properties.isDependent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDisabled"]) -> typing.Union[MetaOapg.properties.isDisabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEmergencyContact"]) -> typing.Union[MetaOapg.properties.isEmergencyContact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSmoker"]) -> typing.Union[MetaOapg.properties.isSmoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isStudent"]) -> typing.Union[MetaOapg.properties.isStudent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marriageDate"]) -> typing.Union[MetaOapg.properties.marriageDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formerName"]) -> typing.Union[MetaOapg.properties.formerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameSuffix"]) -> typing.Union[MetaOapg.properties.nameSuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occupation"]) -> typing.Union[MetaOapg.properties.occupation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherInsurance"]) -> typing.Union[MetaOapg.properties.otherInsurance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneCountry"]) -> typing.Union[MetaOapg.properties.homePhoneCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneNumber"]) -> typing.Union[MetaOapg.properties.homePhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPhoneNumber"]) -> typing.Union[MetaOapg.properties.otherPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPhoneType"]) -> typing.Union[MetaOapg.properties.otherPhoneType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredPhoneNumber"]) -> typing.Union[MetaOapg.properties.preferredPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationshipCode"]) -> typing.Union[MetaOapg.properties.relationshipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationshipDescription"]) -> typing.Union[MetaOapg.properties.relationshipDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> typing.Union[MetaOapg.properties.contactId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField01"]) -> typing.Union[MetaOapg.properties.userDefinedField01, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneExtension"]) -> typing.Union[MetaOapg.properties.workPhoneExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneNumber"]) -> typing.Union[MetaOapg.properties.workPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraNotes"]) -> typing.Union[MetaOapg.properties.cobraNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusAsOfDate"]) -> typing.Union[MetaOapg.properties.statusAsOfDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deathDate"]) -> typing.Union[MetaOapg.properties.deathDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["divorceDate"]) -> typing.Union[MetaOapg.properties.divorceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPhoneCountryCode"]) -> typing.Union[MetaOapg.properties.otherPhoneCountryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthCareId"]) -> typing.Union[MetaOapg.properties.healthCareId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationalId"]) -> typing.Union[MetaOapg.properties.nationalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationalIdExpirationDate"]) -> typing.Union[MetaOapg.properties.nationalIdExpirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personID"]) -> typing.Union[MetaOapg.properties.personID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressID"]) -> typing.Union[MetaOapg.properties.addressID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneId"]) -> typing.Union[MetaOapg.properties.workPhoneId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneId"]) -> typing.Union[MetaOapg.properties.homePhoneId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPhoneId"]) -> typing.Union[MetaOapg.properties.otherPhoneId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["city", "countryCode", "county", "addressIsDifferentFromEmployee", "addressLine1", "addressLine2", "state", "zipCode", "cobraExport", "cobraIsActive", "cobraReason", "cobraStatus", "cobraStatusDate", "dateOfBirth", "dateOfCOBRAEvent", "dateOfCOBRALetter", "employeeId", "gender", "importId", "isBeneficiary", "isDependent", "isDisabled", "isEmergencyContact", "isSmoker", "isStudent", "marriageDate", "firstName", "formerName", "lastName", "middleName", "nameSuffix", "occupation", "otherInsurance", "homePhoneCountry", "homePhoneNumber", "otherPhoneNumber", "otherPhoneType", "preferredPhoneNumber", "relationshipCode", "relationshipDescription", "ssn", "contactId", "userDefinedField01", "workPhoneExtension", "workPhoneNumber", "cobraNotes", "notes", "isActive", "statusAsOfDate", "deathDate", "divorceDate", "emailAddress", "otherPhoneCountryCode", "healthCareId", "nationalId", "nationalIdExpirationDate", "personID", "addressID", "workPhoneId", "homePhoneId", "otherPhoneId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        addressIsDifferentFromEmployee: typing.Union[MetaOapg.properties.addressIsDifferentFromEmployee, bool, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zipCode: typing.Union[MetaOapg.properties.zipCode, str, schemas.Unset] = schemas.unset,
        cobraExport: typing.Union[MetaOapg.properties.cobraExport, bool, schemas.Unset] = schemas.unset,
        cobraIsActive: typing.Union[MetaOapg.properties.cobraIsActive, bool, schemas.Unset] = schemas.unset,
        cobraReason: typing.Union[MetaOapg.properties.cobraReason, str, schemas.Unset] = schemas.unset,
        cobraStatus: typing.Union[MetaOapg.properties.cobraStatus, str, schemas.Unset] = schemas.unset,
        cobraStatusDate: typing.Union[MetaOapg.properties.cobraStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, str, datetime, schemas.Unset] = schemas.unset,
        dateOfCOBRAEvent: typing.Union[MetaOapg.properties.dateOfCOBRAEvent, str, datetime, schemas.Unset] = schemas.unset,
        dateOfCOBRALetter: typing.Union[MetaOapg.properties.dateOfCOBRALetter, str, datetime, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        importId: typing.Union[MetaOapg.properties.importId, str, schemas.Unset] = schemas.unset,
        isBeneficiary: typing.Union[MetaOapg.properties.isBeneficiary, bool, schemas.Unset] = schemas.unset,
        isDependent: typing.Union[MetaOapg.properties.isDependent, bool, schemas.Unset] = schemas.unset,
        isDisabled: typing.Union[MetaOapg.properties.isDisabled, bool, schemas.Unset] = schemas.unset,
        isEmergencyContact: typing.Union[MetaOapg.properties.isEmergencyContact, bool, schemas.Unset] = schemas.unset,
        isSmoker: typing.Union[MetaOapg.properties.isSmoker, bool, schemas.Unset] = schemas.unset,
        isStudent: typing.Union[MetaOapg.properties.isStudent, bool, schemas.Unset] = schemas.unset,
        marriageDate: typing.Union[MetaOapg.properties.marriageDate, str, datetime, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        formerName: typing.Union[MetaOapg.properties.formerName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        nameSuffix: typing.Union[MetaOapg.properties.nameSuffix, str, schemas.Unset] = schemas.unset,
        occupation: typing.Union[MetaOapg.properties.occupation, str, schemas.Unset] = schemas.unset,
        otherInsurance: typing.Union[MetaOapg.properties.otherInsurance, str, schemas.Unset] = schemas.unset,
        homePhoneCountry: typing.Union[MetaOapg.properties.homePhoneCountry, str, schemas.Unset] = schemas.unset,
        homePhoneNumber: typing.Union[MetaOapg.properties.homePhoneNumber, str, schemas.Unset] = schemas.unset,
        otherPhoneNumber: typing.Union[MetaOapg.properties.otherPhoneNumber, str, schemas.Unset] = schemas.unset,
        otherPhoneType: typing.Union[MetaOapg.properties.otherPhoneType, str, schemas.Unset] = schemas.unset,
        preferredPhoneNumber: typing.Union[MetaOapg.properties.preferredPhoneNumber, str, schemas.Unset] = schemas.unset,
        relationshipCode: typing.Union[MetaOapg.properties.relationshipCode, str, schemas.Unset] = schemas.unset,
        relationshipDescription: typing.Union[MetaOapg.properties.relationshipDescription, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        contactId: typing.Union[MetaOapg.properties.contactId, str, schemas.Unset] = schemas.unset,
        userDefinedField01: typing.Union[MetaOapg.properties.userDefinedField01, str, schemas.Unset] = schemas.unset,
        workPhoneExtension: typing.Union[MetaOapg.properties.workPhoneExtension, str, schemas.Unset] = schemas.unset,
        workPhoneNumber: typing.Union[MetaOapg.properties.workPhoneNumber, str, schemas.Unset] = schemas.unset,
        cobraNotes: typing.Union[MetaOapg.properties.cobraNotes, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        statusAsOfDate: typing.Union[MetaOapg.properties.statusAsOfDate, str, datetime, schemas.Unset] = schemas.unset,
        deathDate: typing.Union[MetaOapg.properties.deathDate, str, datetime, schemas.Unset] = schemas.unset,
        divorceDate: typing.Union[MetaOapg.properties.divorceDate, str, datetime, schemas.Unset] = schemas.unset,
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        otherPhoneCountryCode: typing.Union[MetaOapg.properties.otherPhoneCountryCode, str, schemas.Unset] = schemas.unset,
        healthCareId: typing.Union[MetaOapg.properties.healthCareId, str, schemas.Unset] = schemas.unset,
        nationalId: typing.Union[MetaOapg.properties.nationalId, str, schemas.Unset] = schemas.unset,
        nationalIdExpirationDate: typing.Union[MetaOapg.properties.nationalIdExpirationDate, str, datetime, schemas.Unset] = schemas.unset,
        personID: typing.Union[MetaOapg.properties.personID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        addressID: typing.Union[MetaOapg.properties.addressID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        workPhoneId: typing.Union[MetaOapg.properties.workPhoneId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        homePhoneId: typing.Union[MetaOapg.properties.homePhoneId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        otherPhoneId: typing.Union[MetaOapg.properties.otherPhoneId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contact':
        return super().__new__(
            cls,
            *args,
            city=city,
            countryCode=countryCode,
            county=county,
            addressIsDifferentFromEmployee=addressIsDifferentFromEmployee,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            state=state,
            zipCode=zipCode,
            cobraExport=cobraExport,
            cobraIsActive=cobraIsActive,
            cobraReason=cobraReason,
            cobraStatus=cobraStatus,
            cobraStatusDate=cobraStatusDate,
            dateOfBirth=dateOfBirth,
            dateOfCOBRAEvent=dateOfCOBRAEvent,
            dateOfCOBRALetter=dateOfCOBRALetter,
            employeeId=employeeId,
            gender=gender,
            importId=importId,
            isBeneficiary=isBeneficiary,
            isDependent=isDependent,
            isDisabled=isDisabled,
            isEmergencyContact=isEmergencyContact,
            isSmoker=isSmoker,
            isStudent=isStudent,
            marriageDate=marriageDate,
            firstName=firstName,
            formerName=formerName,
            lastName=lastName,
            middleName=middleName,
            nameSuffix=nameSuffix,
            occupation=occupation,
            otherInsurance=otherInsurance,
            homePhoneCountry=homePhoneCountry,
            homePhoneNumber=homePhoneNumber,
            otherPhoneNumber=otherPhoneNumber,
            otherPhoneType=otherPhoneType,
            preferredPhoneNumber=preferredPhoneNumber,
            relationshipCode=relationshipCode,
            relationshipDescription=relationshipDescription,
            ssn=ssn,
            contactId=contactId,
            userDefinedField01=userDefinedField01,
            workPhoneExtension=workPhoneExtension,
            workPhoneNumber=workPhoneNumber,
            cobraNotes=cobraNotes,
            notes=notes,
            isActive=isActive,
            statusAsOfDate=statusAsOfDate,
            deathDate=deathDate,
            divorceDate=divorceDate,
            emailAddress=emailAddress,
            otherPhoneCountryCode=otherPhoneCountryCode,
            healthCareId=healthCareId,
            nationalId=nationalId,
            nationalIdExpirationDate=nationalIdExpirationDate,
            personID=personID,
            addressID=addressID,
            workPhoneId=workPhoneId,
            homePhoneId=homePhoneId,
            otherPhoneId=otherPhoneId,
            _configuration=_configuration,
            **kwargs,
        )
