# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeDemographicDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ethnicDescription = schemas.StrSchema
            additionalName1 = schemas.StrSchema
            additionalName2 = schemas.StrSchema
            addressId = schemas.StrSchema
            addressIsOnTaxBoundary = schemas.StrSchema
            addressLatitude = schemas.NumberSchema
            disabilityType = schemas.StrSchema
            formerName = schemas.StrSchema
            healthBloodType = schemas.StrSchema
            healthEyes = schemas.StrSchema
            healthHair = schemas.StrSchema
            healthHeightFeet = schemas.StrSchema
            healthHeightInches = schemas.StrSchema
            healthLastDonateDate = schemas.StrSchema
            healthWeight = schemas.NumberSchema
            previousSSN = schemas.StrSchema
            originCountry = schemas.StrSchema
            originLocation = schemas.StrSchema
            addressSms = schemas.StrSchema
            homePhoneIsPrivate = schemas.BoolSchema
            lastNameNotSameAsSSCard = schemas.StrSchema
            nationality1 = schemas.StrSchema
            nationality2 = schemas.StrSchema
            nationality3 = schemas.StrSchema
            personId = schemas.StrSchema
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            firstName = schemas.StrSchema
            middleName = schemas.StrSchema
            lastName = schemas.StrSchema
            preferredName = schemas.StrSchema
            namePrefixCode = schemas.StrSchema
            nameSuffixCode = schemas.StrSchema
            emailAddress = schemas.StrSchema
            emailAddressAlternate = schemas.StrSchema
            homePhoneID = schemas.StrSchema
            homePhone = schemas.StrSchema
            homePhoneCountry = schemas.StrSchema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            addressLine3 = schemas.StrSchema
            addressLine4 = schemas.StrSchema
            addressCity = schemas.StrSchema
            addressState = schemas.StrSchema
            addressZipCode = schemas.StrSchema
            addressCountry = schemas.StrSchema
            addressCounty = schemas.StrSchema
            dateOfBirth = schemas.StrSchema
            gender = schemas.StrSchema
            ethnicIdCode = schemas.StrSchema
            isSmoker = schemas.BoolSchema
            isDisabled = schemas.StrSchema
            maritalStatusCode = schemas.StrSchema
            ssn = schemas.StrSchema
            ssnIsSuppressed = schemas.BoolSchema
            userID = schemas.StrSchema
            integrationRecordId = schemas.StrSchema
            cellPhoneNumber = schemas.StrSchema
            __annotations__ = {
                "ethnicDescription": ethnicDescription,
                "additionalName1": additionalName1,
                "additionalName2": additionalName2,
                "addressId": addressId,
                "addressIsOnTaxBoundary": addressIsOnTaxBoundary,
                "addressLatitude": addressLatitude,
                "disabilityType": disabilityType,
                "formerName": formerName,
                "healthBloodType": healthBloodType,
                "healthEyes": healthEyes,
                "healthHair": healthHair,
                "healthHeightFeet": healthHeightFeet,
                "healthHeightInches": healthHeightInches,
                "healthLastDonateDate": healthLastDonateDate,
                "healthWeight": healthWeight,
                "previousSSN": previousSSN,
                "originCountry": originCountry,
                "originLocation": originLocation,
                "addressSms": addressSms,
                "homePhoneIsPrivate": homePhoneIsPrivate,
                "lastNameNotSameAsSSCard": lastNameNotSameAsSSCard,
                "nationality1": nationality1,
                "nationality2": nationality2,
                "nationality3": nationality3,
                "personId": personId,
                "employeeId": employeeId,
                "companyId": companyId,
                "firstName": firstName,
                "middleName": middleName,
                "lastName": lastName,
                "preferredName": preferredName,
                "namePrefixCode": namePrefixCode,
                "nameSuffixCode": nameSuffixCode,
                "emailAddress": emailAddress,
                "emailAddressAlternate": emailAddressAlternate,
                "homePhoneID": homePhoneID,
                "homePhone": homePhone,
                "homePhoneCountry": homePhoneCountry,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "addressLine3": addressLine3,
                "addressLine4": addressLine4,
                "addressCity": addressCity,
                "addressState": addressState,
                "addressZipCode": addressZipCode,
                "addressCountry": addressCountry,
                "addressCounty": addressCounty,
                "dateOfBirth": dateOfBirth,
                "gender": gender,
                "ethnicIdCode": ethnicIdCode,
                "isSmoker": isSmoker,
                "isDisabled": isDisabled,
                "maritalStatusCode": maritalStatusCode,
                "ssn": ssn,
                "ssnIsSuppressed": ssnIsSuppressed,
                "userID": userID,
                "integrationRecordId": integrationRecordId,
                "cellPhoneNumber": cellPhoneNumber,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicDescription"]) -> MetaOapg.properties.ethnicDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalName1"]) -> MetaOapg.properties.additionalName1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalName2"]) -> MetaOapg.properties.additionalName2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressId"]) -> MetaOapg.properties.addressId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressIsOnTaxBoundary"]) -> MetaOapg.properties.addressIsOnTaxBoundary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLatitude"]) -> MetaOapg.properties.addressLatitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabilityType"]) -> MetaOapg.properties.disabilityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formerName"]) -> MetaOapg.properties.formerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthBloodType"]) -> MetaOapg.properties.healthBloodType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthEyes"]) -> MetaOapg.properties.healthEyes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthHair"]) -> MetaOapg.properties.healthHair: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthHeightFeet"]) -> MetaOapg.properties.healthHeightFeet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthHeightInches"]) -> MetaOapg.properties.healthHeightInches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthLastDonateDate"]) -> MetaOapg.properties.healthLastDonateDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthWeight"]) -> MetaOapg.properties.healthWeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousSSN"]) -> MetaOapg.properties.previousSSN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originCountry"]) -> MetaOapg.properties.originCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originLocation"]) -> MetaOapg.properties.originLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressSms"]) -> MetaOapg.properties.addressSms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneIsPrivate"]) -> MetaOapg.properties.homePhoneIsPrivate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastNameNotSameAsSSCard"]) -> MetaOapg.properties.lastNameNotSameAsSSCard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality1"]) -> MetaOapg.properties.nationality1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality2"]) -> MetaOapg.properties.nationality2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality3"]) -> MetaOapg.properties.nationality3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namePrefixCode"]) -> MetaOapg.properties.namePrefixCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameSuffixCode"]) -> MetaOapg.properties.nameSuffixCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddressAlternate"]) -> MetaOapg.properties.emailAddressAlternate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneID"]) -> MetaOapg.properties.homePhoneID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhoneCountry"]) -> MetaOapg.properties.homePhoneCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine3"]) -> MetaOapg.properties.addressLine3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine4"]) -> MetaOapg.properties.addressLine4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCity"]) -> MetaOapg.properties.addressCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressState"]) -> MetaOapg.properties.addressState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressZipCode"]) -> MetaOapg.properties.addressZipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCountry"]) -> MetaOapg.properties.addressCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCounty"]) -> MetaOapg.properties.addressCounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicIdCode"]) -> MetaOapg.properties.ethnicIdCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSmoker"]) -> MetaOapg.properties.isSmoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDisabled"]) -> MetaOapg.properties.isDisabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatusCode"]) -> MetaOapg.properties.maritalStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssnIsSuppressed"]) -> MetaOapg.properties.ssnIsSuppressed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userID"]) -> MetaOapg.properties.userID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integrationRecordId"]) -> MetaOapg.properties.integrationRecordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cellPhoneNumber"]) -> MetaOapg.properties.cellPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ethnicDescription", "additionalName1", "additionalName2", "addressId", "addressIsOnTaxBoundary", "addressLatitude", "disabilityType", "formerName", "healthBloodType", "healthEyes", "healthHair", "healthHeightFeet", "healthHeightInches", "healthLastDonateDate", "healthWeight", "previousSSN", "originCountry", "originLocation", "addressSms", "homePhoneIsPrivate", "lastNameNotSameAsSSCard", "nationality1", "nationality2", "nationality3", "personId", "employeeId", "companyId", "firstName", "middleName", "lastName", "preferredName", "namePrefixCode", "nameSuffixCode", "emailAddress", "emailAddressAlternate", "homePhoneID", "homePhone", "homePhoneCountry", "addressLine1", "addressLine2", "addressLine3", "addressLine4", "addressCity", "addressState", "addressZipCode", "addressCountry", "addressCounty", "dateOfBirth", "gender", "ethnicIdCode", "isSmoker", "isDisabled", "maritalStatusCode", "ssn", "ssnIsSuppressed", "userID", "integrationRecordId", "cellPhoneNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicDescription"]) -> typing.Union[MetaOapg.properties.ethnicDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalName1"]) -> typing.Union[MetaOapg.properties.additionalName1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalName2"]) -> typing.Union[MetaOapg.properties.additionalName2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressId"]) -> typing.Union[MetaOapg.properties.addressId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressIsOnTaxBoundary"]) -> typing.Union[MetaOapg.properties.addressIsOnTaxBoundary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLatitude"]) -> typing.Union[MetaOapg.properties.addressLatitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabilityType"]) -> typing.Union[MetaOapg.properties.disabilityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formerName"]) -> typing.Union[MetaOapg.properties.formerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthBloodType"]) -> typing.Union[MetaOapg.properties.healthBloodType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthEyes"]) -> typing.Union[MetaOapg.properties.healthEyes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthHair"]) -> typing.Union[MetaOapg.properties.healthHair, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthHeightFeet"]) -> typing.Union[MetaOapg.properties.healthHeightFeet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthHeightInches"]) -> typing.Union[MetaOapg.properties.healthHeightInches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthLastDonateDate"]) -> typing.Union[MetaOapg.properties.healthLastDonateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthWeight"]) -> typing.Union[MetaOapg.properties.healthWeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousSSN"]) -> typing.Union[MetaOapg.properties.previousSSN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originCountry"]) -> typing.Union[MetaOapg.properties.originCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originLocation"]) -> typing.Union[MetaOapg.properties.originLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressSms"]) -> typing.Union[MetaOapg.properties.addressSms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneIsPrivate"]) -> typing.Union[MetaOapg.properties.homePhoneIsPrivate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastNameNotSameAsSSCard"]) -> typing.Union[MetaOapg.properties.lastNameNotSameAsSSCard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality1"]) -> typing.Union[MetaOapg.properties.nationality1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality2"]) -> typing.Union[MetaOapg.properties.nationality2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality3"]) -> typing.Union[MetaOapg.properties.nationality3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namePrefixCode"]) -> typing.Union[MetaOapg.properties.namePrefixCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameSuffixCode"]) -> typing.Union[MetaOapg.properties.nameSuffixCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddressAlternate"]) -> typing.Union[MetaOapg.properties.emailAddressAlternate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneID"]) -> typing.Union[MetaOapg.properties.homePhoneID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhoneCountry"]) -> typing.Union[MetaOapg.properties.homePhoneCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine3"]) -> typing.Union[MetaOapg.properties.addressLine3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine4"]) -> typing.Union[MetaOapg.properties.addressLine4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCity"]) -> typing.Union[MetaOapg.properties.addressCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressState"]) -> typing.Union[MetaOapg.properties.addressState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressZipCode"]) -> typing.Union[MetaOapg.properties.addressZipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCountry"]) -> typing.Union[MetaOapg.properties.addressCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCounty"]) -> typing.Union[MetaOapg.properties.addressCounty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicIdCode"]) -> typing.Union[MetaOapg.properties.ethnicIdCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSmoker"]) -> typing.Union[MetaOapg.properties.isSmoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDisabled"]) -> typing.Union[MetaOapg.properties.isDisabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatusCode"]) -> typing.Union[MetaOapg.properties.maritalStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssnIsSuppressed"]) -> typing.Union[MetaOapg.properties.ssnIsSuppressed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userID"]) -> typing.Union[MetaOapg.properties.userID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integrationRecordId"]) -> typing.Union[MetaOapg.properties.integrationRecordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cellPhoneNumber"]) -> typing.Union[MetaOapg.properties.cellPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ethnicDescription", "additionalName1", "additionalName2", "addressId", "addressIsOnTaxBoundary", "addressLatitude", "disabilityType", "formerName", "healthBloodType", "healthEyes", "healthHair", "healthHeightFeet", "healthHeightInches", "healthLastDonateDate", "healthWeight", "previousSSN", "originCountry", "originLocation", "addressSms", "homePhoneIsPrivate", "lastNameNotSameAsSSCard", "nationality1", "nationality2", "nationality3", "personId", "employeeId", "companyId", "firstName", "middleName", "lastName", "preferredName", "namePrefixCode", "nameSuffixCode", "emailAddress", "emailAddressAlternate", "homePhoneID", "homePhone", "homePhoneCountry", "addressLine1", "addressLine2", "addressLine3", "addressLine4", "addressCity", "addressState", "addressZipCode", "addressCountry", "addressCounty", "dateOfBirth", "gender", "ethnicIdCode", "isSmoker", "isDisabled", "maritalStatusCode", "ssn", "ssnIsSuppressed", "userID", "integrationRecordId", "cellPhoneNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ethnicDescription: typing.Union[MetaOapg.properties.ethnicDescription, str, schemas.Unset] = schemas.unset,
        additionalName1: typing.Union[MetaOapg.properties.additionalName1, str, schemas.Unset] = schemas.unset,
        additionalName2: typing.Union[MetaOapg.properties.additionalName2, str, schemas.Unset] = schemas.unset,
        addressId: typing.Union[MetaOapg.properties.addressId, str, schemas.Unset] = schemas.unset,
        addressIsOnTaxBoundary: typing.Union[MetaOapg.properties.addressIsOnTaxBoundary, str, schemas.Unset] = schemas.unset,
        addressLatitude: typing.Union[MetaOapg.properties.addressLatitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        disabilityType: typing.Union[MetaOapg.properties.disabilityType, str, schemas.Unset] = schemas.unset,
        formerName: typing.Union[MetaOapg.properties.formerName, str, schemas.Unset] = schemas.unset,
        healthBloodType: typing.Union[MetaOapg.properties.healthBloodType, str, schemas.Unset] = schemas.unset,
        healthEyes: typing.Union[MetaOapg.properties.healthEyes, str, schemas.Unset] = schemas.unset,
        healthHair: typing.Union[MetaOapg.properties.healthHair, str, schemas.Unset] = schemas.unset,
        healthHeightFeet: typing.Union[MetaOapg.properties.healthHeightFeet, str, schemas.Unset] = schemas.unset,
        healthHeightInches: typing.Union[MetaOapg.properties.healthHeightInches, str, schemas.Unset] = schemas.unset,
        healthLastDonateDate: typing.Union[MetaOapg.properties.healthLastDonateDate, str, schemas.Unset] = schemas.unset,
        healthWeight: typing.Union[MetaOapg.properties.healthWeight, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        previousSSN: typing.Union[MetaOapg.properties.previousSSN, str, schemas.Unset] = schemas.unset,
        originCountry: typing.Union[MetaOapg.properties.originCountry, str, schemas.Unset] = schemas.unset,
        originLocation: typing.Union[MetaOapg.properties.originLocation, str, schemas.Unset] = schemas.unset,
        addressSms: typing.Union[MetaOapg.properties.addressSms, str, schemas.Unset] = schemas.unset,
        homePhoneIsPrivate: typing.Union[MetaOapg.properties.homePhoneIsPrivate, bool, schemas.Unset] = schemas.unset,
        lastNameNotSameAsSSCard: typing.Union[MetaOapg.properties.lastNameNotSameAsSSCard, str, schemas.Unset] = schemas.unset,
        nationality1: typing.Union[MetaOapg.properties.nationality1, str, schemas.Unset] = schemas.unset,
        nationality2: typing.Union[MetaOapg.properties.nationality2, str, schemas.Unset] = schemas.unset,
        nationality3: typing.Union[MetaOapg.properties.nationality3, str, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, str, schemas.Unset] = schemas.unset,
        namePrefixCode: typing.Union[MetaOapg.properties.namePrefixCode, str, schemas.Unset] = schemas.unset,
        nameSuffixCode: typing.Union[MetaOapg.properties.nameSuffixCode, str, schemas.Unset] = schemas.unset,
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        emailAddressAlternate: typing.Union[MetaOapg.properties.emailAddressAlternate, str, schemas.Unset] = schemas.unset,
        homePhoneID: typing.Union[MetaOapg.properties.homePhoneID, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, str, schemas.Unset] = schemas.unset,
        homePhoneCountry: typing.Union[MetaOapg.properties.homePhoneCountry, str, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        addressLine3: typing.Union[MetaOapg.properties.addressLine3, str, schemas.Unset] = schemas.unset,
        addressLine4: typing.Union[MetaOapg.properties.addressLine4, str, schemas.Unset] = schemas.unset,
        addressCity: typing.Union[MetaOapg.properties.addressCity, str, schemas.Unset] = schemas.unset,
        addressState: typing.Union[MetaOapg.properties.addressState, str, schemas.Unset] = schemas.unset,
        addressZipCode: typing.Union[MetaOapg.properties.addressZipCode, str, schemas.Unset] = schemas.unset,
        addressCountry: typing.Union[MetaOapg.properties.addressCountry, str, schemas.Unset] = schemas.unset,
        addressCounty: typing.Union[MetaOapg.properties.addressCounty, str, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        ethnicIdCode: typing.Union[MetaOapg.properties.ethnicIdCode, str, schemas.Unset] = schemas.unset,
        isSmoker: typing.Union[MetaOapg.properties.isSmoker, bool, schemas.Unset] = schemas.unset,
        isDisabled: typing.Union[MetaOapg.properties.isDisabled, str, schemas.Unset] = schemas.unset,
        maritalStatusCode: typing.Union[MetaOapg.properties.maritalStatusCode, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        ssnIsSuppressed: typing.Union[MetaOapg.properties.ssnIsSuppressed, bool, schemas.Unset] = schemas.unset,
        userID: typing.Union[MetaOapg.properties.userID, str, schemas.Unset] = schemas.unset,
        integrationRecordId: typing.Union[MetaOapg.properties.integrationRecordId, str, schemas.Unset] = schemas.unset,
        cellPhoneNumber: typing.Union[MetaOapg.properties.cellPhoneNumber, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeDemographicDetails':
        return super().__new__(
            cls,
            *args,
            ethnicDescription=ethnicDescription,
            additionalName1=additionalName1,
            additionalName2=additionalName2,
            addressId=addressId,
            addressIsOnTaxBoundary=addressIsOnTaxBoundary,
            addressLatitude=addressLatitude,
            disabilityType=disabilityType,
            formerName=formerName,
            healthBloodType=healthBloodType,
            healthEyes=healthEyes,
            healthHair=healthHair,
            healthHeightFeet=healthHeightFeet,
            healthHeightInches=healthHeightInches,
            healthLastDonateDate=healthLastDonateDate,
            healthWeight=healthWeight,
            previousSSN=previousSSN,
            originCountry=originCountry,
            originLocation=originLocation,
            addressSms=addressSms,
            homePhoneIsPrivate=homePhoneIsPrivate,
            lastNameNotSameAsSSCard=lastNameNotSameAsSSCard,
            nationality1=nationality1,
            nationality2=nationality2,
            nationality3=nationality3,
            personId=personId,
            employeeId=employeeId,
            companyId=companyId,
            firstName=firstName,
            middleName=middleName,
            lastName=lastName,
            preferredName=preferredName,
            namePrefixCode=namePrefixCode,
            nameSuffixCode=nameSuffixCode,
            emailAddress=emailAddress,
            emailAddressAlternate=emailAddressAlternate,
            homePhoneID=homePhoneID,
            homePhone=homePhone,
            homePhoneCountry=homePhoneCountry,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            addressLine3=addressLine3,
            addressLine4=addressLine4,
            addressCity=addressCity,
            addressState=addressState,
            addressZipCode=addressZipCode,
            addressCountry=addressCountry,
            addressCounty=addressCounty,
            dateOfBirth=dateOfBirth,
            gender=gender,
            ethnicIdCode=ethnicIdCode,
            isSmoker=isSmoker,
            isDisabled=isDisabled,
            maritalStatusCode=maritalStatusCode,
            ssn=ssn,
            ssnIsSuppressed=ssnIsSuppressed,
            userID=userID,
            integrationRecordId=integrationRecordId,
            cellPhoneNumber=cellPhoneNumber,
            _configuration=_configuration,
            **kwargs,
        )
