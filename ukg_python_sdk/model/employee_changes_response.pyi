# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeChangesResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            preferredName = schemas.StrSchema
            emailAddress = schemas.StrSchema
            countryCode = schemas.StrSchema
            languageCode = schemas.StrSchema
            employeeNumber = schemas.NumberSchema
            employeeId = schemas.StrSchema
            personId = schemas.StrSchema
            userIntegrationKey = schemas.StrSchema
            companyName = schemas.StrSchema
            companyId = schemas.StrSchema
            supervisorId = schemas.StrSchema
            salaryOrHourly = schemas.StrSchema
            fullTimeOrPartTime = schemas.StrSchema
            isActive = schemas.BoolSchema
            workLocation = schemas.StrSchema
            jobCode = schemas.StrSchema
            projectCode = schemas.StrSchema
            orgLevel1Code = schemas.StrSchema
            orgLevel2Code = schemas.StrSchema
            orgLevel3Code = schemas.StrSchema
            orgLevel4Code = schemas.StrSchema
            middleName = schemas.StrSchema
            workPhone = schemas.StrSchema
            homePhone = schemas.StrSchema
            employeeAddress1 = schemas.StrSchema
            employeeAddress2 = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zipCode = schemas.StrSchema
            terminationDate = schemas.StrSchema
            hireDate = schemas.StrSchema
            supervisorName = schemas.StrSchema
            prefix = schemas.StrSchema
            suffix = schemas.StrSchema
            alternateEmailAddress = schemas.StrSchema
            gender = schemas.StrSchema
            employeeStatus = schemas.StrSchema
            employeeType = schemas.StrSchema
            emplStatusStartDate = schemas.StrSchema
            dateInJob = schemas.StrSchema
            dateOfLastHire = schemas.StrSchema
            jobGroupCode = schemas.StrSchema
            alternateJobTitle = schemas.StrSchema
            __annotations__ = {
                "firstName": firstName,
                "lastName": lastName,
                "preferredName": preferredName,
                "emailAddress": emailAddress,
                "countryCode": countryCode,
                "languageCode": languageCode,
                "employeeNumber": employeeNumber,
                "employeeId": employeeId,
                "personId": personId,
                "userIntegrationKey": userIntegrationKey,
                "companyName": companyName,
                "companyId": companyId,
                "supervisorId": supervisorId,
                "salaryOrHourly": salaryOrHourly,
                "fullTimeOrPartTime": fullTimeOrPartTime,
                "isActive": isActive,
                "workLocation": workLocation,
                "jobCode": jobCode,
                "projectCode": projectCode,
                "orgLevel1Code": orgLevel1Code,
                "orgLevel2Code": orgLevel2Code,
                "orgLevel3Code": orgLevel3Code,
                "orgLevel4Code": orgLevel4Code,
                "middleName": middleName,
                "workPhone": workPhone,
                "homePhone": homePhone,
                "employeeAddress1": employeeAddress1,
                "employeeAddress2": employeeAddress2,
                "city": city,
                "state": state,
                "zipCode": zipCode,
                "terminationDate": terminationDate,
                "hireDate": hireDate,
                "supervisorName": supervisorName,
                "prefix": prefix,
                "suffix": suffix,
                "alternateEmailAddress": alternateEmailAddress,
                "gender": gender,
                "employeeStatus": employeeStatus,
                "employeeType": employeeType,
                "emplStatusStartDate": emplStatusStartDate,
                "dateInJob": dateInJob,
                "dateOfLastHire": dateOfLastHire,
                "jobGroupCode": jobGroupCode,
                "alternateJobTitle": alternateJobTitle,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userIntegrationKey"]) -> MetaOapg.properties.userIntegrationKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorId"]) -> MetaOapg.properties.supervisorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salaryOrHourly"]) -> MetaOapg.properties.salaryOrHourly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullTimeOrPartTime"]) -> MetaOapg.properties.fullTimeOrPartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workLocation"]) -> MetaOapg.properties.workLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCode"]) -> MetaOapg.properties.jobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectCode"]) -> MetaOapg.properties.projectCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel1Code"]) -> MetaOapg.properties.orgLevel1Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel2Code"]) -> MetaOapg.properties.orgLevel2Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel3Code"]) -> MetaOapg.properties.orgLevel3Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel4Code"]) -> MetaOapg.properties.orgLevel4Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeAddress1"]) -> MetaOapg.properties.employeeAddress1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeAddress2"]) -> MetaOapg.properties.employeeAddress2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> MetaOapg.properties.zipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationDate"]) -> MetaOapg.properties.terminationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireDate"]) -> MetaOapg.properties.hireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorName"]) -> MetaOapg.properties.supervisorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternateEmailAddress"]) -> MetaOapg.properties.alternateEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatus"]) -> MetaOapg.properties.employeeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeType"]) -> MetaOapg.properties.employeeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emplStatusStartDate"]) -> MetaOapg.properties.emplStatusStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateInJob"]) -> MetaOapg.properties.dateInJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfLastHire"]) -> MetaOapg.properties.dateOfLastHire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCode"]) -> MetaOapg.properties.jobGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternateJobTitle"]) -> MetaOapg.properties.alternateJobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "preferredName", "emailAddress", "countryCode", "languageCode", "employeeNumber", "employeeId", "personId", "userIntegrationKey", "companyName", "companyId", "supervisorId", "salaryOrHourly", "fullTimeOrPartTime", "isActive", "workLocation", "jobCode", "projectCode", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", "middleName", "workPhone", "homePhone", "employeeAddress1", "employeeAddress2", "city", "state", "zipCode", "terminationDate", "hireDate", "supervisorName", "prefix", "suffix", "alternateEmailAddress", "gender", "employeeStatus", "employeeType", "emplStatusStartDate", "dateInJob", "dateOfLastHire", "jobGroupCode", "alternateJobTitle", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> typing.Union[MetaOapg.properties.personId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userIntegrationKey"]) -> typing.Union[MetaOapg.properties.userIntegrationKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorId"]) -> typing.Union[MetaOapg.properties.supervisorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salaryOrHourly"]) -> typing.Union[MetaOapg.properties.salaryOrHourly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeOrPartTime"]) -> typing.Union[MetaOapg.properties.fullTimeOrPartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workLocation"]) -> typing.Union[MetaOapg.properties.workLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCode"]) -> typing.Union[MetaOapg.properties.jobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectCode"]) -> typing.Union[MetaOapg.properties.projectCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel1Code"]) -> typing.Union[MetaOapg.properties.orgLevel1Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel2Code"]) -> typing.Union[MetaOapg.properties.orgLevel2Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel3Code"]) -> typing.Union[MetaOapg.properties.orgLevel3Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel4Code"]) -> typing.Union[MetaOapg.properties.orgLevel4Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeAddress1"]) -> typing.Union[MetaOapg.properties.employeeAddress1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeAddress2"]) -> typing.Union[MetaOapg.properties.employeeAddress2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union[MetaOapg.properties.zipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationDate"]) -> typing.Union[MetaOapg.properties.terminationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireDate"]) -> typing.Union[MetaOapg.properties.hireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorName"]) -> typing.Union[MetaOapg.properties.supervisorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternateEmailAddress"]) -> typing.Union[MetaOapg.properties.alternateEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatus"]) -> typing.Union[MetaOapg.properties.employeeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeType"]) -> typing.Union[MetaOapg.properties.employeeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emplStatusStartDate"]) -> typing.Union[MetaOapg.properties.emplStatusStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateInJob"]) -> typing.Union[MetaOapg.properties.dateInJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfLastHire"]) -> typing.Union[MetaOapg.properties.dateOfLastHire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCode"]) -> typing.Union[MetaOapg.properties.jobGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternateJobTitle"]) -> typing.Union[MetaOapg.properties.alternateJobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "preferredName", "emailAddress", "countryCode", "languageCode", "employeeNumber", "employeeId", "personId", "userIntegrationKey", "companyName", "companyId", "supervisorId", "salaryOrHourly", "fullTimeOrPartTime", "isActive", "workLocation", "jobCode", "projectCode", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", "middleName", "workPhone", "homePhone", "employeeAddress1", "employeeAddress2", "city", "state", "zipCode", "terminationDate", "hireDate", "supervisorName", "prefix", "suffix", "alternateEmailAddress", "gender", "employeeStatus", "employeeType", "emplStatusStartDate", "dateInJob", "dateOfLastHire", "jobGroupCode", "alternateJobTitle", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, str, schemas.Unset] = schemas.unset,
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        personId: typing.Union[MetaOapg.properties.personId, str, schemas.Unset] = schemas.unset,
        userIntegrationKey: typing.Union[MetaOapg.properties.userIntegrationKey, str, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        supervisorId: typing.Union[MetaOapg.properties.supervisorId, str, schemas.Unset] = schemas.unset,
        salaryOrHourly: typing.Union[MetaOapg.properties.salaryOrHourly, str, schemas.Unset] = schemas.unset,
        fullTimeOrPartTime: typing.Union[MetaOapg.properties.fullTimeOrPartTime, str, schemas.Unset] = schemas.unset,
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        workLocation: typing.Union[MetaOapg.properties.workLocation, str, schemas.Unset] = schemas.unset,
        jobCode: typing.Union[MetaOapg.properties.jobCode, str, schemas.Unset] = schemas.unset,
        projectCode: typing.Union[MetaOapg.properties.projectCode, str, schemas.Unset] = schemas.unset,
        orgLevel1Code: typing.Union[MetaOapg.properties.orgLevel1Code, str, schemas.Unset] = schemas.unset,
        orgLevel2Code: typing.Union[MetaOapg.properties.orgLevel2Code, str, schemas.Unset] = schemas.unset,
        orgLevel3Code: typing.Union[MetaOapg.properties.orgLevel3Code, str, schemas.Unset] = schemas.unset,
        orgLevel4Code: typing.Union[MetaOapg.properties.orgLevel4Code, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, str, schemas.Unset] = schemas.unset,
        employeeAddress1: typing.Union[MetaOapg.properties.employeeAddress1, str, schemas.Unset] = schemas.unset,
        employeeAddress2: typing.Union[MetaOapg.properties.employeeAddress2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zipCode: typing.Union[MetaOapg.properties.zipCode, str, schemas.Unset] = schemas.unset,
        terminationDate: typing.Union[MetaOapg.properties.terminationDate, str, schemas.Unset] = schemas.unset,
        hireDate: typing.Union[MetaOapg.properties.hireDate, str, schemas.Unset] = schemas.unset,
        supervisorName: typing.Union[MetaOapg.properties.supervisorName, str, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
        alternateEmailAddress: typing.Union[MetaOapg.properties.alternateEmailAddress, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        employeeStatus: typing.Union[MetaOapg.properties.employeeStatus, str, schemas.Unset] = schemas.unset,
        employeeType: typing.Union[MetaOapg.properties.employeeType, str, schemas.Unset] = schemas.unset,
        emplStatusStartDate: typing.Union[MetaOapg.properties.emplStatusStartDate, str, schemas.Unset] = schemas.unset,
        dateInJob: typing.Union[MetaOapg.properties.dateInJob, str, schemas.Unset] = schemas.unset,
        dateOfLastHire: typing.Union[MetaOapg.properties.dateOfLastHire, str, schemas.Unset] = schemas.unset,
        jobGroupCode: typing.Union[MetaOapg.properties.jobGroupCode, str, schemas.Unset] = schemas.unset,
        alternateJobTitle: typing.Union[MetaOapg.properties.alternateJobTitle, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeChangesResponse':
        return super().__new__(
            cls,
            *args,
            firstName=firstName,
            lastName=lastName,
            preferredName=preferredName,
            emailAddress=emailAddress,
            countryCode=countryCode,
            languageCode=languageCode,
            employeeNumber=employeeNumber,
            employeeId=employeeId,
            personId=personId,
            userIntegrationKey=userIntegrationKey,
            companyName=companyName,
            companyId=companyId,
            supervisorId=supervisorId,
            salaryOrHourly=salaryOrHourly,
            fullTimeOrPartTime=fullTimeOrPartTime,
            isActive=isActive,
            workLocation=workLocation,
            jobCode=jobCode,
            projectCode=projectCode,
            orgLevel1Code=orgLevel1Code,
            orgLevel2Code=orgLevel2Code,
            orgLevel3Code=orgLevel3Code,
            orgLevel4Code=orgLevel4Code,
            middleName=middleName,
            workPhone=workPhone,
            homePhone=homePhone,
            employeeAddress1=employeeAddress1,
            employeeAddress2=employeeAddress2,
            city=city,
            state=state,
            zipCode=zipCode,
            terminationDate=terminationDate,
            hireDate=hireDate,
            supervisorName=supervisorName,
            prefix=prefix,
            suffix=suffix,
            alternateEmailAddress=alternateEmailAddress,
            gender=gender,
            employeeStatus=employeeStatus,
            employeeType=employeeType,
            emplStatusStartDate=emplStatusStartDate,
            dateInJob=dateInJob,
            dateOfLastHire=dateOfLastHire,
            jobGroupCode=jobGroupCode,
            alternateJobTitle=alternateJobTitle,
            _configuration=_configuration,
            **kwargs,
        )
