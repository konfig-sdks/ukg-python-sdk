# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            asOfDate = schemas.DateTimeSchema
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            triggerTermination = schemas.BoolSchema
            status = schemas.StrSchema
            statusStartDate = schemas.DateTimeSchema
            statusReason = schemas.StrSchema
            statusReasonDesc = schemas.StrSchema
            isPrimary = schemas.BoolSchema
            isPrimaryEffectiveDate = schemas.DateTimeSchema
            originalHireDate = schemas.DateTimeSchema
            __annotations__ = {
                "asOfDate": asOfDate,
                "employeeId": employeeId,
                "companyId": companyId,
                "triggerTermination": triggerTermination,
                "status": status,
                "statusStartDate": statusStartDate,
                "statusReason": statusReason,
                "statusReasonDesc": statusReasonDesc,
                "isPrimary": isPrimary,
                "isPrimaryEffectiveDate": isPrimaryEffectiveDate,
                "originalHireDate": originalHireDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asOfDate"]) -> MetaOapg.properties.asOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggerTermination"]) -> MetaOapg.properties.triggerTermination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusStartDate"]) -> MetaOapg.properties.statusStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReason"]) -> MetaOapg.properties.statusReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReasonDesc"]) -> MetaOapg.properties.statusReasonDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrimaryEffectiveDate"]) -> MetaOapg.properties.isPrimaryEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalHireDate"]) -> MetaOapg.properties.originalHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["asOfDate", "employeeId", "companyId", "triggerTermination", "status", "statusStartDate", "statusReason", "statusReasonDesc", "isPrimary", "isPrimaryEffectiveDate", "originalHireDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asOfDate"]) -> typing.Union[MetaOapg.properties.asOfDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggerTermination"]) -> typing.Union[MetaOapg.properties.triggerTermination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusStartDate"]) -> typing.Union[MetaOapg.properties.statusStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReason"]) -> typing.Union[MetaOapg.properties.statusReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReasonDesc"]) -> typing.Union[MetaOapg.properties.statusReasonDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrimaryEffectiveDate"]) -> typing.Union[MetaOapg.properties.isPrimaryEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalHireDate"]) -> typing.Union[MetaOapg.properties.originalHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["asOfDate", "employeeId", "companyId", "triggerTermination", "status", "statusStartDate", "statusReason", "statusReasonDesc", "isPrimary", "isPrimaryEffectiveDate", "originalHireDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        asOfDate: typing.Union[MetaOapg.properties.asOfDate, str, datetime, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        triggerTermination: typing.Union[MetaOapg.properties.triggerTermination, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        statusStartDate: typing.Union[MetaOapg.properties.statusStartDate, str, datetime, schemas.Unset] = schemas.unset,
        statusReason: typing.Union[MetaOapg.properties.statusReason, str, schemas.Unset] = schemas.unset,
        statusReasonDesc: typing.Union[MetaOapg.properties.statusReasonDesc, str, schemas.Unset] = schemas.unset,
        isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
        isPrimaryEffectiveDate: typing.Union[MetaOapg.properties.isPrimaryEffectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        originalHireDate: typing.Union[MetaOapg.properties.originalHireDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeStatus':
        return super().__new__(
            cls,
            *args,
            asOfDate=asOfDate,
            employeeId=employeeId,
            companyId=companyId,
            triggerTermination=triggerTermination,
            status=status,
            statusStartDate=statusStartDate,
            statusReason=statusReason,
            statusReasonDesc=statusReasonDesc,
            isPrimary=isPrimary,
            isPrimaryEffectiveDate=isPrimaryEffectiveDate,
            originalHireDate=originalHireDate,
            _configuration=_configuration,
            **kwargs,
        )
