# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class JobGroupDetail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            jobGroupCode = schemas.StrSchema
            jobGroupCodeDescription = schemas.StrSchema
            jobGroupNotes = schemas.StrSchema
            jobGroupCountryCode = schemas.StrSchema
            __annotations__ = {
                "jobGroupCode": jobGroupCode,
                "jobGroupCodeDescription": jobGroupCodeDescription,
                "jobGroupNotes": jobGroupNotes,
                "jobGroupCountryCode": jobGroupCountryCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCode"]) -> MetaOapg.properties.jobGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCodeDescription"]) -> MetaOapg.properties.jobGroupCodeDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupNotes"]) -> MetaOapg.properties.jobGroupNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCountryCode"]) -> MetaOapg.properties.jobGroupCountryCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobGroupCode", "jobGroupCodeDescription", "jobGroupNotes", "jobGroupCountryCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCode"]) -> typing.Union[MetaOapg.properties.jobGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCodeDescription"]) -> typing.Union[MetaOapg.properties.jobGroupCodeDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupNotes"]) -> typing.Union[MetaOapg.properties.jobGroupNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCountryCode"]) -> typing.Union[MetaOapg.properties.jobGroupCountryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobGroupCode", "jobGroupCodeDescription", "jobGroupNotes", "jobGroupCountryCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobGroupCode: typing.Union[MetaOapg.properties.jobGroupCode, str, schemas.Unset] = schemas.unset,
        jobGroupCodeDescription: typing.Union[MetaOapg.properties.jobGroupCodeDescription, str, schemas.Unset] = schemas.unset,
        jobGroupNotes: typing.Union[MetaOapg.properties.jobGroupNotes, str, schemas.Unset] = schemas.unset,
        jobGroupCountryCode: typing.Union[MetaOapg.properties.jobGroupCountryCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobGroupDetail':
        return super().__new__(
            cls,
            *args,
            jobGroupCode=jobGroupCode,
            jobGroupCodeDescription=jobGroupCodeDescription,
            jobGroupNotes=jobGroupNotes,
            jobGroupCountryCode=jobGroupCountryCode,
            _configuration=_configuration,
            **kwargs,
        )
