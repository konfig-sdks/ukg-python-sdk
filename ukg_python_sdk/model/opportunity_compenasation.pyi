# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class OpportunityCompenasation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_fulltime = schemas.BoolSchema
            is_salaried = schemas.BoolSchema
            pay_rate = schemas.NumberSchema
            shown = schemas.StrSchema
        
            @staticmethod
            def currency() -> typing.Type['OpportunityCompenasationCurrency']:
                return OpportunityCompenasationCurrency
            __annotations__ = {
                "is_fulltime": is_fulltime,
                "is_salaried": is_salaried,
                "pay_rate": pay_rate,
                "shown": shown,
                "currency": currency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_fulltime"]) -> MetaOapg.properties.is_fulltime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_salaried"]) -> MetaOapg.properties.is_salaried: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_rate"]) -> MetaOapg.properties.pay_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shown"]) -> MetaOapg.properties.shown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'OpportunityCompenasationCurrency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_fulltime", "is_salaried", "pay_rate", "shown", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_fulltime"]) -> typing.Union[MetaOapg.properties.is_fulltime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_salaried"]) -> typing.Union[MetaOapg.properties.is_salaried, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_rate"]) -> typing.Union[MetaOapg.properties.pay_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shown"]) -> typing.Union[MetaOapg.properties.shown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['OpportunityCompenasationCurrency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_fulltime", "is_salaried", "pay_rate", "shown", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_fulltime: typing.Union[MetaOapg.properties.is_fulltime, bool, schemas.Unset] = schemas.unset,
        is_salaried: typing.Union[MetaOapg.properties.is_salaried, bool, schemas.Unset] = schemas.unset,
        pay_rate: typing.Union[MetaOapg.properties.pay_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shown: typing.Union[MetaOapg.properties.shown, str, schemas.Unset] = schemas.unset,
        currency: typing.Union['OpportunityCompenasationCurrency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpportunityCompenasation':
        return super().__new__(
            cls,
            *args,
            is_fulltime=is_fulltime,
            is_salaried=is_salaried,
            pay_rate=pay_rate,
            shown=shown,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.opportunity_compenasation_currency import OpportunityCompenasationCurrency
