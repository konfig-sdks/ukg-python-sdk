# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Educations(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An array containing candidateâ€™s educations.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def degree() -> typing.Type['EducationsDegree']:
                return EducationsDegree
        
            @staticmethod
            def school() -> typing.Type['EducationsSchool']:
                return EducationsSchool
        
            @staticmethod
            def major() -> typing.Type['EducationsMajor']:
                return EducationsMajor
        
            @staticmethod
            def minor() -> typing.Type['EducationsMinor']:
                return EducationsMinor
        
            @staticmethod
            def _from() -> typing.Type['EducationsFrom']:
                return EducationsFrom
        
            @staticmethod
            def to() -> typing.Type['EducationsTo']:
                return EducationsTo
            __annotations__ = {
                "description": description,
                "id": id,
                "degree": degree,
                "school": school,
                "major": major,
                "minor": minor,
                "from": _from,
                "to": to,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["degree"]) -> 'EducationsDegree': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["school"]) -> 'EducationsSchool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["major"]) -> 'EducationsMajor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minor"]) -> 'EducationsMinor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> 'EducationsFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'EducationsTo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "degree", "school", "major", "minor", "from", "to", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["degree"]) -> typing.Union['EducationsDegree', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["school"]) -> typing.Union['EducationsSchool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["major"]) -> typing.Union['EducationsMajor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minor"]) -> typing.Union['EducationsMinor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union['EducationsFrom', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union['EducationsTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "degree", "school", "major", "minor", "from", "to", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        degree: typing.Union['EducationsDegree', schemas.Unset] = schemas.unset,
        school: typing.Union['EducationsSchool', schemas.Unset] = schemas.unset,
        major: typing.Union['EducationsMajor', schemas.Unset] = schemas.unset,
        minor: typing.Union['EducationsMinor', schemas.Unset] = schemas.unset,
        to: typing.Union['EducationsTo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Educations':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            degree=degree,
            school=school,
            major=major,
            minor=minor,
            to=to,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.educations_degree import EducationsDegree
from ukg_python_sdk.model.educations_from import EducationsFrom
from ukg_python_sdk.model.educations_major import EducationsMajor
from ukg_python_sdk.model.educations_minor import EducationsMinor
from ukg_python_sdk.model.educations_school import EducationsSchool
from ukg_python_sdk.model.educations_to import EducationsTo
