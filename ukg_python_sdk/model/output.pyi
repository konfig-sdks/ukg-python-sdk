# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Output(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def candidate() -> typing.Type['OutputCandidate']:
                return OutputCandidate
        
            @staticmethod
            def application() -> typing.Type['OutputApplication']:
                return OutputApplication
        
            @staticmethod
            def opportunity() -> typing.Type['OutputOpportunity']:
                return OutputOpportunity
        
            @staticmethod
            def creator() -> typing.Type['OutputCreator']:
                return OutputCreator
            __annotations__ = {
                "candidate": candidate,
                "application": application,
                "opportunity": opportunity,
                "creator": creator,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidate"]) -> 'OutputCandidate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application"]) -> 'OutputApplication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opportunity"]) -> 'OutputOpportunity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'OutputCreator': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["candidate", "application", "opportunity", "creator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidate"]) -> typing.Union['OutputCandidate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application"]) -> typing.Union['OutputApplication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opportunity"]) -> typing.Union['OutputOpportunity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> typing.Union['OutputCreator', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["candidate", "application", "opportunity", "creator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        candidate: typing.Union['OutputCandidate', schemas.Unset] = schemas.unset,
        application: typing.Union['OutputApplication', schemas.Unset] = schemas.unset,
        opportunity: typing.Union['OutputOpportunity', schemas.Unset] = schemas.unset,
        creator: typing.Union['OutputCreator', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Output':
        return super().__new__(
            cls,
            *args,
            candidate=candidate,
            application=application,
            opportunity=opportunity,
            creator=creator,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.output_application import OutputApplication
from ukg_python_sdk.model.output_candidate import OutputCandidate
from ukg_python_sdk.model.output_creator import OutputCreator
from ukg_python_sdk.model.output_opportunity import OutputOpportunity
