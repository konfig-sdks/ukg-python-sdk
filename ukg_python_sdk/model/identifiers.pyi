# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Identifiers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "employeeIdentifierValue",
            "employeeIdentifierType",
        }
        
        class properties:
            
            
            class employeeIdentifierType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMAIL_ADDRESS(cls):
                    return cls("EmailAddress")
                
                @schemas.classproperty
                def EMPLOYEE_NUMBER(cls):
                    return cls("EmployeeNumber")
                
                @schemas.classproperty
                def NATIONAL_ID(cls):
                    return cls("NationalID")
                
                @schemas.classproperty
                def SIN(cls):
                    return cls("SIN")
                
                @schemas.classproperty
                def PERSON_ID(cls):
                    return cls("PersonID")
                
                @schemas.classproperty
                def SSN(cls):
                    return cls("SSN")
                
                @schemas.classproperty
                def EMPLOYEE_ID(cls):
                    return cls("EmployeeID")
                
                @schemas.classproperty
                def USER_INTEGRATION_KEY(cls):
                    return cls("UserIntegrationKey")
            employeeIdentifierValue = schemas.StrSchema
            
            
            class companyIdentifierType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMPANY_ID(cls):
                    return cls("Company ID")
                
                @schemas.classproperty
                def COMPANY_CODE(cls):
                    return cls("Company Code")
                
                @schemas.classproperty
                def FEDERAL_ID(cls):
                    return cls("Federal ID")
            companyIdentifierValue = schemas.StrSchema
            __annotations__ = {
                "employeeIdentifierType": employeeIdentifierType,
                "employeeIdentifierValue": employeeIdentifierValue,
                "companyIdentifierType": companyIdentifierType,
                "companyIdentifierValue": companyIdentifierValue,
            }
    
    employeeIdentifierValue: MetaOapg.properties.employeeIdentifierValue
    employeeIdentifierType: MetaOapg.properties.employeeIdentifierType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeIdentifierType"]) -> MetaOapg.properties.employeeIdentifierType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeIdentifierValue"]) -> MetaOapg.properties.employeeIdentifierValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyIdentifierType"]) -> MetaOapg.properties.companyIdentifierType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyIdentifierValue"]) -> MetaOapg.properties.companyIdentifierValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeIdentifierType", "employeeIdentifierValue", "companyIdentifierType", "companyIdentifierValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeIdentifierType"]) -> MetaOapg.properties.employeeIdentifierType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeIdentifierValue"]) -> MetaOapg.properties.employeeIdentifierValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyIdentifierType"]) -> typing.Union[MetaOapg.properties.companyIdentifierType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyIdentifierValue"]) -> typing.Union[MetaOapg.properties.companyIdentifierValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeIdentifierType", "employeeIdentifierValue", "companyIdentifierType", "companyIdentifierValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeIdentifierValue: typing.Union[MetaOapg.properties.employeeIdentifierValue, str, ],
        employeeIdentifierType: typing.Union[MetaOapg.properties.employeeIdentifierType, str, ],
        companyIdentifierType: typing.Union[MetaOapg.properties.companyIdentifierType, str, schemas.Unset] = schemas.unset,
        companyIdentifierValue: typing.Union[MetaOapg.properties.companyIdentifierValue, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Identifiers':
        return super().__new__(
            cls,
            *args,
            employeeIdentifierValue=employeeIdentifierValue,
            employeeIdentifierType=employeeIdentifierType,
            companyIdentifierType=companyIdentifierType,
            companyIdentifierValue=companyIdentifierValue,
            _configuration=_configuration,
            **kwargs,
        )
