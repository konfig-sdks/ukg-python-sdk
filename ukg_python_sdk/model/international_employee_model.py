# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class InternationalEmployeeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            caste = schemas.StrSchema
            casteDescription = schemas.StrSchema
            countryCode = schemas.StrSchema
            employeeId = schemas.StrSchema
            effectiveDate = schemas.DateTimeSchema
            ethnicIdCode = schemas.StrSchema
            healthCareId = schemas.StrSchema
            isAboriginal = schemas.StrSchema
            nationalId = schemas.StrSchema
            nationalIdExpirationDate = schemas.DateTimeSchema
            oldNationalId = schemas.StrSchema
            oldNationalIdExpirationDate = schemas.DateTimeSchema
            userDefinedField1 = schemas.StrSchema
            userDefinedField2 = schemas.StrSchema
            userDefinedField3 = schemas.Float32Schema
            userDefinedField4 = schemas.Float32Schema
            userDefinedField5 = schemas.DateTimeSchema
            userDefinedField6 = schemas.DateTimeSchema
            userDefinedField7 = schemas.StrSchema
            userDefinedField8 = schemas.StrSchema
            userDefinedField9 = schemas.StrSchema
            userDefinedField10 = schemas.Float32Schema
            userDefinedField11 = schemas.Float32Schema
            userDefinedField12 = schemas.DateTimeSchema
            userDefinedField13 = schemas.DateTimeSchema
            userDefinedField14 = schemas.StrSchema
            currencyCode = schemas.StrSchema
            isMilitaryReserve = schemas.StrSchema
            isMilitaryServiceCompleted = schemas.StrSchema
            medicalRegionCode = schemas.StrSchema
            __annotations__ = {
                "caste": caste,
                "casteDescription": casteDescription,
                "countryCode": countryCode,
                "employeeId": employeeId,
                "effectiveDate": effectiveDate,
                "ethnicIdCode": ethnicIdCode,
                "healthCareId": healthCareId,
                "isAboriginal": isAboriginal,
                "nationalId": nationalId,
                "nationalIdExpirationDate": nationalIdExpirationDate,
                "oldNationalId": oldNationalId,
                "oldNationalIdExpirationDate": oldNationalIdExpirationDate,
                "userDefinedField1": userDefinedField1,
                "userDefinedField2": userDefinedField2,
                "userDefinedField3": userDefinedField3,
                "userDefinedField4": userDefinedField4,
                "userDefinedField5": userDefinedField5,
                "userDefinedField6": userDefinedField6,
                "userDefinedField7": userDefinedField7,
                "userDefinedField8": userDefinedField8,
                "userDefinedField9": userDefinedField9,
                "userDefinedField10": userDefinedField10,
                "userDefinedField11": userDefinedField11,
                "userDefinedField12": userDefinedField12,
                "userDefinedField13": userDefinedField13,
                "userDefinedField14": userDefinedField14,
                "currencyCode": currencyCode,
                "isMilitaryReserve": isMilitaryReserve,
                "isMilitaryServiceCompleted": isMilitaryServiceCompleted,
                "medicalRegionCode": medicalRegionCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caste"]) -> MetaOapg.properties.caste: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["casteDescription"]) -> MetaOapg.properties.casteDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicIdCode"]) -> MetaOapg.properties.ethnicIdCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthCareId"]) -> MetaOapg.properties.healthCareId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAboriginal"]) -> MetaOapg.properties.isAboriginal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationalId"]) -> MetaOapg.properties.nationalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationalIdExpirationDate"]) -> MetaOapg.properties.nationalIdExpirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oldNationalId"]) -> MetaOapg.properties.oldNationalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oldNationalIdExpirationDate"]) -> MetaOapg.properties.oldNationalIdExpirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField1"]) -> MetaOapg.properties.userDefinedField1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField2"]) -> MetaOapg.properties.userDefinedField2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField3"]) -> MetaOapg.properties.userDefinedField3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField4"]) -> MetaOapg.properties.userDefinedField4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField5"]) -> MetaOapg.properties.userDefinedField5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField6"]) -> MetaOapg.properties.userDefinedField6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField7"]) -> MetaOapg.properties.userDefinedField7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField8"]) -> MetaOapg.properties.userDefinedField8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField9"]) -> MetaOapg.properties.userDefinedField9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField10"]) -> MetaOapg.properties.userDefinedField10: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField11"]) -> MetaOapg.properties.userDefinedField11: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField12"]) -> MetaOapg.properties.userDefinedField12: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField13"]) -> MetaOapg.properties.userDefinedField13: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDefinedField14"]) -> MetaOapg.properties.userDefinedField14: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMilitaryReserve"]) -> MetaOapg.properties.isMilitaryReserve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMilitaryServiceCompleted"]) -> MetaOapg.properties.isMilitaryServiceCompleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicalRegionCode"]) -> MetaOapg.properties.medicalRegionCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caste", "casteDescription", "countryCode", "employeeId", "effectiveDate", "ethnicIdCode", "healthCareId", "isAboriginal", "nationalId", "nationalIdExpirationDate", "oldNationalId", "oldNationalIdExpirationDate", "userDefinedField1", "userDefinedField2", "userDefinedField3", "userDefinedField4", "userDefinedField5", "userDefinedField6", "userDefinedField7", "userDefinedField8", "userDefinedField9", "userDefinedField10", "userDefinedField11", "userDefinedField12", "userDefinedField13", "userDefinedField14", "currencyCode", "isMilitaryReserve", "isMilitaryServiceCompleted", "medicalRegionCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caste"]) -> typing.Union[MetaOapg.properties.caste, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["casteDescription"]) -> typing.Union[MetaOapg.properties.casteDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicIdCode"]) -> typing.Union[MetaOapg.properties.ethnicIdCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthCareId"]) -> typing.Union[MetaOapg.properties.healthCareId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAboriginal"]) -> typing.Union[MetaOapg.properties.isAboriginal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationalId"]) -> typing.Union[MetaOapg.properties.nationalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationalIdExpirationDate"]) -> typing.Union[MetaOapg.properties.nationalIdExpirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oldNationalId"]) -> typing.Union[MetaOapg.properties.oldNationalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oldNationalIdExpirationDate"]) -> typing.Union[MetaOapg.properties.oldNationalIdExpirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField1"]) -> typing.Union[MetaOapg.properties.userDefinedField1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField2"]) -> typing.Union[MetaOapg.properties.userDefinedField2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField3"]) -> typing.Union[MetaOapg.properties.userDefinedField3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField4"]) -> typing.Union[MetaOapg.properties.userDefinedField4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField5"]) -> typing.Union[MetaOapg.properties.userDefinedField5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField6"]) -> typing.Union[MetaOapg.properties.userDefinedField6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField7"]) -> typing.Union[MetaOapg.properties.userDefinedField7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField8"]) -> typing.Union[MetaOapg.properties.userDefinedField8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField9"]) -> typing.Union[MetaOapg.properties.userDefinedField9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField10"]) -> typing.Union[MetaOapg.properties.userDefinedField10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField11"]) -> typing.Union[MetaOapg.properties.userDefinedField11, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField12"]) -> typing.Union[MetaOapg.properties.userDefinedField12, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField13"]) -> typing.Union[MetaOapg.properties.userDefinedField13, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDefinedField14"]) -> typing.Union[MetaOapg.properties.userDefinedField14, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMilitaryReserve"]) -> typing.Union[MetaOapg.properties.isMilitaryReserve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMilitaryServiceCompleted"]) -> typing.Union[MetaOapg.properties.isMilitaryServiceCompleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicalRegionCode"]) -> typing.Union[MetaOapg.properties.medicalRegionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caste", "casteDescription", "countryCode", "employeeId", "effectiveDate", "ethnicIdCode", "healthCareId", "isAboriginal", "nationalId", "nationalIdExpirationDate", "oldNationalId", "oldNationalIdExpirationDate", "userDefinedField1", "userDefinedField2", "userDefinedField3", "userDefinedField4", "userDefinedField5", "userDefinedField6", "userDefinedField7", "userDefinedField8", "userDefinedField9", "userDefinedField10", "userDefinedField11", "userDefinedField12", "userDefinedField13", "userDefinedField14", "currencyCode", "isMilitaryReserve", "isMilitaryServiceCompleted", "medicalRegionCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        caste: typing.Union[MetaOapg.properties.caste, str, schemas.Unset] = schemas.unset,
        casteDescription: typing.Union[MetaOapg.properties.casteDescription, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        ethnicIdCode: typing.Union[MetaOapg.properties.ethnicIdCode, str, schemas.Unset] = schemas.unset,
        healthCareId: typing.Union[MetaOapg.properties.healthCareId, str, schemas.Unset] = schemas.unset,
        isAboriginal: typing.Union[MetaOapg.properties.isAboriginal, str, schemas.Unset] = schemas.unset,
        nationalId: typing.Union[MetaOapg.properties.nationalId, str, schemas.Unset] = schemas.unset,
        nationalIdExpirationDate: typing.Union[MetaOapg.properties.nationalIdExpirationDate, str, datetime, schemas.Unset] = schemas.unset,
        oldNationalId: typing.Union[MetaOapg.properties.oldNationalId, str, schemas.Unset] = schemas.unset,
        oldNationalIdExpirationDate: typing.Union[MetaOapg.properties.oldNationalIdExpirationDate, str, datetime, schemas.Unset] = schemas.unset,
        userDefinedField1: typing.Union[MetaOapg.properties.userDefinedField1, str, schemas.Unset] = schemas.unset,
        userDefinedField2: typing.Union[MetaOapg.properties.userDefinedField2, str, schemas.Unset] = schemas.unset,
        userDefinedField3: typing.Union[MetaOapg.properties.userDefinedField3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userDefinedField4: typing.Union[MetaOapg.properties.userDefinedField4, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userDefinedField5: typing.Union[MetaOapg.properties.userDefinedField5, str, datetime, schemas.Unset] = schemas.unset,
        userDefinedField6: typing.Union[MetaOapg.properties.userDefinedField6, str, datetime, schemas.Unset] = schemas.unset,
        userDefinedField7: typing.Union[MetaOapg.properties.userDefinedField7, str, schemas.Unset] = schemas.unset,
        userDefinedField8: typing.Union[MetaOapg.properties.userDefinedField8, str, schemas.Unset] = schemas.unset,
        userDefinedField9: typing.Union[MetaOapg.properties.userDefinedField9, str, schemas.Unset] = schemas.unset,
        userDefinedField10: typing.Union[MetaOapg.properties.userDefinedField10, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userDefinedField11: typing.Union[MetaOapg.properties.userDefinedField11, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userDefinedField12: typing.Union[MetaOapg.properties.userDefinedField12, str, datetime, schemas.Unset] = schemas.unset,
        userDefinedField13: typing.Union[MetaOapg.properties.userDefinedField13, str, datetime, schemas.Unset] = schemas.unset,
        userDefinedField14: typing.Union[MetaOapg.properties.userDefinedField14, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        isMilitaryReserve: typing.Union[MetaOapg.properties.isMilitaryReserve, str, schemas.Unset] = schemas.unset,
        isMilitaryServiceCompleted: typing.Union[MetaOapg.properties.isMilitaryServiceCompleted, str, schemas.Unset] = schemas.unset,
        medicalRegionCode: typing.Union[MetaOapg.properties.medicalRegionCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InternationalEmployeeModel':
        return super().__new__(
            cls,
            *args,
            caste=caste,
            casteDescription=casteDescription,
            countryCode=countryCode,
            employeeId=employeeId,
            effectiveDate=effectiveDate,
            ethnicIdCode=ethnicIdCode,
            healthCareId=healthCareId,
            isAboriginal=isAboriginal,
            nationalId=nationalId,
            nationalIdExpirationDate=nationalIdExpirationDate,
            oldNationalId=oldNationalId,
            oldNationalIdExpirationDate=oldNationalIdExpirationDate,
            userDefinedField1=userDefinedField1,
            userDefinedField2=userDefinedField2,
            userDefinedField3=userDefinedField3,
            userDefinedField4=userDefinedField4,
            userDefinedField5=userDefinedField5,
            userDefinedField6=userDefinedField6,
            userDefinedField7=userDefinedField7,
            userDefinedField8=userDefinedField8,
            userDefinedField9=userDefinedField9,
            userDefinedField10=userDefinedField10,
            userDefinedField11=userDefinedField11,
            userDefinedField12=userDefinedField12,
            userDefinedField13=userDefinedField13,
            userDefinedField14=userDefinedField14,
            currencyCode=currencyCode,
            isMilitaryReserve=isMilitaryReserve,
            isMilitaryServiceCompleted=isMilitaryServiceCompleted,
            medicalRegionCode=medicalRegionCode,
            _configuration=_configuration,
            **kwargs,
        )
