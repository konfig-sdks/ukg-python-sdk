# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class UserDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            userId = schemas.IntSchema
            userName = schemas.StrSchema
            fullName = schemas.StrSchema
            userLastLogonDate = schemas.DateTimeSchema
            userLastPasswordChangeDate = schemas.DateTimeSchema
            userStatus = schemas.StrSchema
            integrationUserKey = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "userId": userId,
                "userName": userName,
                "fullName": fullName,
                "userLastLogonDate": userLastLogonDate,
                "userLastPasswordChangeDate": userLastPasswordChangeDate,
                "userStatus": userStatus,
                "integrationUserKey": integrationUserKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userLastLogonDate"]) -> MetaOapg.properties.userLastLogonDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userLastPasswordChangeDate"]) -> MetaOapg.properties.userLastPasswordChangeDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> MetaOapg.properties.userStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integrationUserKey"]) -> MetaOapg.properties.integrationUserKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "userId", "userName", "fullName", "userLastLogonDate", "userLastPasswordChangeDate", "userStatus", "integrationUserKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> typing.Union[MetaOapg.properties.fullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userLastLogonDate"]) -> typing.Union[MetaOapg.properties.userLastLogonDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userLastPasswordChangeDate"]) -> typing.Union[MetaOapg.properties.userLastPasswordChangeDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStatus"]) -> typing.Union[MetaOapg.properties.userStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integrationUserKey"]) -> typing.Union[MetaOapg.properties.integrationUserKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "userId", "userName", "fullName", "userLastLogonDate", "userLastPasswordChangeDate", "userStatus", "integrationUserKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        fullName: typing.Union[MetaOapg.properties.fullName, str, schemas.Unset] = schemas.unset,
        userLastLogonDate: typing.Union[MetaOapg.properties.userLastLogonDate, str, datetime, schemas.Unset] = schemas.unset,
        userLastPasswordChangeDate: typing.Union[MetaOapg.properties.userLastPasswordChangeDate, str, datetime, schemas.Unset] = schemas.unset,
        userStatus: typing.Union[MetaOapg.properties.userStatus, str, schemas.Unset] = schemas.unset,
        integrationUserKey: typing.Union[MetaOapg.properties.integrationUserKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserDetails':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            userId=userId,
            userName=userName,
            fullName=fullName,
            userLastLogonDate=userLastLogonDate,
            userLastPasswordChangeDate=userLastPasswordChangeDate,
            userStatus=userStatus,
            integrationUserKey=integrationUserKey,
            _configuration=_configuration,
            **kwargs,
        )
