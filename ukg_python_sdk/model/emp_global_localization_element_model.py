# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmpGlobalLocalizationElementModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            fieldId = schemas.StrSchema
            fieldName = schemas.StrSchema
            booleanValue = schemas.BoolSchema
            numericValue = schemas.StrSchema
            dateTimeValue = schemas.StrSchema
            stringValue = schemas.StrSchema
            companyId = schemas.StrSchema
            created = schemas.StrSchema
            effective = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "fieldId": fieldId,
                "fieldName": fieldName,
                "booleanValue": booleanValue,
                "numericValue": numericValue,
                "dateTimeValue": dateTimeValue,
                "stringValue": stringValue,
                "companyId": companyId,
                "created": created,
                "effective": effective,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldId"]) -> MetaOapg.properties.fieldId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldName"]) -> MetaOapg.properties.fieldName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["booleanValue"]) -> MetaOapg.properties.booleanValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numericValue"]) -> MetaOapg.properties.numericValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeValue"]) -> MetaOapg.properties.dateTimeValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stringValue"]) -> MetaOapg.properties.stringValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective"]) -> MetaOapg.properties.effective: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "fieldId", "fieldName", "booleanValue", "numericValue", "dateTimeValue", "stringValue", "companyId", "created", "effective", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldId"]) -> typing.Union[MetaOapg.properties.fieldId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldName"]) -> typing.Union[MetaOapg.properties.fieldName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["booleanValue"]) -> typing.Union[MetaOapg.properties.booleanValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numericValue"]) -> typing.Union[MetaOapg.properties.numericValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeValue"]) -> typing.Union[MetaOapg.properties.dateTimeValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stringValue"]) -> typing.Union[MetaOapg.properties.stringValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective"]) -> typing.Union[MetaOapg.properties.effective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "fieldId", "fieldName", "booleanValue", "numericValue", "dateTimeValue", "stringValue", "companyId", "created", "effective", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        fieldId: typing.Union[MetaOapg.properties.fieldId, str, schemas.Unset] = schemas.unset,
        fieldName: typing.Union[MetaOapg.properties.fieldName, str, schemas.Unset] = schemas.unset,
        booleanValue: typing.Union[MetaOapg.properties.booleanValue, bool, schemas.Unset] = schemas.unset,
        numericValue: typing.Union[MetaOapg.properties.numericValue, str, schemas.Unset] = schemas.unset,
        dateTimeValue: typing.Union[MetaOapg.properties.dateTimeValue, str, schemas.Unset] = schemas.unset,
        stringValue: typing.Union[MetaOapg.properties.stringValue, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        effective: typing.Union[MetaOapg.properties.effective, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmpGlobalLocalizationElementModel':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            fieldId=fieldId,
            fieldName=fieldName,
            booleanValue=booleanValue,
            numericValue=numericValue,
            dateTimeValue=dateTimeValue,
            stringValue=stringValue,
            companyId=companyId,
            created=created,
            effective=effective,
            _configuration=_configuration,
            **kwargs,
        )
