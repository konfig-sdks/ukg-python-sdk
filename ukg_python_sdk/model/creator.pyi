# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Creator(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The section that contains details of a recruiter who submitted this background check order.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            person_id = schemas.StrSchema
            created_at = schemas.StrSchema
            integration_user_id = schemas.StrSchema
            is_internal = schemas.BoolSchema
            is_active = schemas.BoolSchema
        
            @staticmethod
            def preferred_locale() -> typing.Type['CreatorPreferredLocale']:
                return CreatorPreferredLocale
        
            @staticmethod
            def name() -> typing.Type['CreatorName']:
                return CreatorName
        
            @staticmethod
            def contact_info() -> typing.Type['CreatorContactInfo']:
                return CreatorContactInfo
        
            @staticmethod
            def roles() -> typing.Type['CreatorRoles']:
                return CreatorRoles
            
            
            class hyperlinks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Hyperlinks']:
                        return Hyperlinks
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Hyperlinks'], typing.List['Hyperlinks']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hyperlinks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Hyperlinks':
                    return super().__getitem__(i)
            updated_at = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Links']:
                        return Links
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Links'], typing.List['Links']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Links':
                    return super().__getitem__(i)
        
            @staticmethod
            def background_check_integration() -> typing.Type['CreatorBackgroundCheckIntegration']:
                return CreatorBackgroundCheckIntegration
            __annotations__ = {
                "id": id,
                "person_id": person_id,
                "created_at": created_at,
                "integration_user_id": integration_user_id,
                "is_internal": is_internal,
                "is_active": is_active,
                "preferred_locale": preferred_locale,
                "name": name,
                "contact_info": contact_info,
                "roles": roles,
                "hyperlinks": hyperlinks,
                "updated_at": updated_at,
                "links": links,
                "background_check_integration": background_check_integration,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person_id"]) -> MetaOapg.properties.person_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration_user_id"]) -> MetaOapg.properties.integration_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_internal"]) -> MetaOapg.properties.is_internal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_locale"]) -> 'CreatorPreferredLocale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'CreatorName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_info"]) -> 'CreatorContactInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> 'CreatorRoles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hyperlinks"]) -> MetaOapg.properties.hyperlinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["background_check_integration"]) -> 'CreatorBackgroundCheckIntegration': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "person_id", "created_at", "integration_user_id", "is_internal", "is_active", "preferred_locale", "name", "contact_info", "roles", "hyperlinks", "updated_at", "links", "background_check_integration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person_id"]) -> typing.Union[MetaOapg.properties.person_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration_user_id"]) -> typing.Union[MetaOapg.properties.integration_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_internal"]) -> typing.Union[MetaOapg.properties.is_internal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_locale"]) -> typing.Union['CreatorPreferredLocale', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['CreatorName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_info"]) -> typing.Union['CreatorContactInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union['CreatorRoles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hyperlinks"]) -> typing.Union[MetaOapg.properties.hyperlinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["background_check_integration"]) -> typing.Union['CreatorBackgroundCheckIntegration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "person_id", "created_at", "integration_user_id", "is_internal", "is_active", "preferred_locale", "name", "contact_info", "roles", "hyperlinks", "updated_at", "links", "background_check_integration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        person_id: typing.Union[MetaOapg.properties.person_id, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        integration_user_id: typing.Union[MetaOapg.properties.integration_user_id, str, schemas.Unset] = schemas.unset,
        is_internal: typing.Union[MetaOapg.properties.is_internal, bool, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        preferred_locale: typing.Union['CreatorPreferredLocale', schemas.Unset] = schemas.unset,
        name: typing.Union['CreatorName', schemas.Unset] = schemas.unset,
        contact_info: typing.Union['CreatorContactInfo', schemas.Unset] = schemas.unset,
        roles: typing.Union['CreatorRoles', schemas.Unset] = schemas.unset,
        hyperlinks: typing.Union[MetaOapg.properties.hyperlinks, list, tuple, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        background_check_integration: typing.Union['CreatorBackgroundCheckIntegration', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Creator':
        return super().__new__(
            cls,
            *args,
            id=id,
            person_id=person_id,
            created_at=created_at,
            integration_user_id=integration_user_id,
            is_internal=is_internal,
            is_active=is_active,
            preferred_locale=preferred_locale,
            name=name,
            contact_info=contact_info,
            roles=roles,
            hyperlinks=hyperlinks,
            updated_at=updated_at,
            links=links,
            background_check_integration=background_check_integration,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.creator_background_check_integration import CreatorBackgroundCheckIntegration
from ukg_python_sdk.model.creator_contact_info import CreatorContactInfo
from ukg_python_sdk.model.creator_name import CreatorName
from ukg_python_sdk.model.creator_preferred_locale import CreatorPreferredLocale
from ukg_python_sdk.model.creator_roles import CreatorRoles
from ukg_python_sdk.model.hyperlinks import Hyperlinks
from ukg_python_sdk.model.links import Links
