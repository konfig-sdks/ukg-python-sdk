# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmpDedHistoryEffectiveChangeDate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            deductionCode = schemas.StrSchema
            effectiveDate = schemas.DateTimeSchema
            fieldValueDataType = schemas.StrSchema
            fieldValue = schemas.StrSchema
            fieldValueDate = schemas.DateTimeSchema
            fieldValueNumber = schemas.NumberSchema
            changeReason = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "companyId": companyId,
                "deductionCode": deductionCode,
                "effectiveDate": effectiveDate,
                "fieldValueDataType": fieldValueDataType,
                "fieldValue": fieldValue,
                "fieldValueDate": fieldValueDate,
                "fieldValueNumber": fieldValueNumber,
                "changeReason": changeReason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldValueDataType"]) -> MetaOapg.properties.fieldValueDataType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldValue"]) -> MetaOapg.properties.fieldValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldValueDate"]) -> MetaOapg.properties.fieldValueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldValueNumber"]) -> MetaOapg.properties.fieldValueNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "deductionCode", "effectiveDate", "fieldValueDataType", "fieldValue", "fieldValueDate", "fieldValueNumber", "changeReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldValueDataType"]) -> typing.Union[MetaOapg.properties.fieldValueDataType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldValue"]) -> typing.Union[MetaOapg.properties.fieldValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldValueDate"]) -> typing.Union[MetaOapg.properties.fieldValueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldValueNumber"]) -> typing.Union[MetaOapg.properties.fieldValueNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "companyId", "deductionCode", "effectiveDate", "fieldValueDataType", "fieldValue", "fieldValueDate", "fieldValueNumber", "changeReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        fieldValueDataType: typing.Union[MetaOapg.properties.fieldValueDataType, str, schemas.Unset] = schemas.unset,
        fieldValue: typing.Union[MetaOapg.properties.fieldValue, str, schemas.Unset] = schemas.unset,
        fieldValueDate: typing.Union[MetaOapg.properties.fieldValueDate, str, datetime, schemas.Unset] = schemas.unset,
        fieldValueNumber: typing.Union[MetaOapg.properties.fieldValueNumber, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        changeReason: typing.Union[MetaOapg.properties.changeReason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmpDedHistoryEffectiveChangeDate':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            companyId=companyId,
            deductionCode=deductionCode,
            effectiveDate=effectiveDate,
            fieldValueDataType=fieldValueDataType,
            fieldValue=fieldValue,
            fieldValueDate=fieldValueDate,
            fieldValueNumber=fieldValueNumber,
            changeReason=changeReason,
            _configuration=_configuration,
            **kwargs,
        )
