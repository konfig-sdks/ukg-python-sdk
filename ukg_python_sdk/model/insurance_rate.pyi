# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class InsuranceRate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            deductionCode = schemas.StrSchema
            minimumAge = schemas.NumberSchema
            maximumAge = schemas.NumberSchema
            employeeRateNonSmokerFemale = schemas.NumberSchema
            employeeRateNonSmokerMale = schemas.NumberSchema
            employeeRateSmokerFemale = schemas.NumberSchema
            employeeRateSmokerMale = schemas.NumberSchema
            effectiveDate = schemas.DateTimeSchema
            employerRateNonSmokerFemale = schemas.NumberSchema
            employerRateNonSmokerMale = schemas.NumberSchema
            employerRateSmokerFemale = schemas.NumberSchema
            employerRateSmokerMale = schemas.NumberSchema
            payFrequency = schemas.StrSchema
            stopDate = schemas.DateTimeSchema
            employeeRateNonSmokerNotSpecified = schemas.NumberSchema
            employeeRateSmokerNotSpecified = schemas.NumberSchema
            employerRateNonSmokerNotSpecified = schemas.NumberSchema
            employerRateSmokerNotSpecified = schemas.NumberSchema
            __annotations__ = {
                "deductionCode": deductionCode,
                "minimumAge": minimumAge,
                "maximumAge": maximumAge,
                "employeeRateNonSmokerFemale": employeeRateNonSmokerFemale,
                "employeeRateNonSmokerMale": employeeRateNonSmokerMale,
                "employeeRateSmokerFemale": employeeRateSmokerFemale,
                "employeeRateSmokerMale": employeeRateSmokerMale,
                "effectiveDate": effectiveDate,
                "employerRateNonSmokerFemale": employerRateNonSmokerFemale,
                "employerRateNonSmokerMale": employerRateNonSmokerMale,
                "employerRateSmokerFemale": employerRateSmokerFemale,
                "employerRateSmokerMale": employerRateSmokerMale,
                "payFrequency": payFrequency,
                "stopDate": stopDate,
                "employeeRateNonSmokerNotSpecified": employeeRateNonSmokerNotSpecified,
                "employeeRateSmokerNotSpecified": employeeRateSmokerNotSpecified,
                "employerRateNonSmokerNotSpecified": employerRateNonSmokerNotSpecified,
                "employerRateSmokerNotSpecified": employerRateSmokerNotSpecified,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumAge"]) -> MetaOapg.properties.minimumAge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumAge"]) -> MetaOapg.properties.maximumAge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateNonSmokerFemale"]) -> MetaOapg.properties.employeeRateNonSmokerFemale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateNonSmokerMale"]) -> MetaOapg.properties.employeeRateNonSmokerMale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateSmokerFemale"]) -> MetaOapg.properties.employeeRateSmokerFemale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateSmokerMale"]) -> MetaOapg.properties.employeeRateSmokerMale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateNonSmokerFemale"]) -> MetaOapg.properties.employerRateNonSmokerFemale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateNonSmokerMale"]) -> MetaOapg.properties.employerRateNonSmokerMale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateSmokerFemale"]) -> MetaOapg.properties.employerRateSmokerFemale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateSmokerMale"]) -> MetaOapg.properties.employerRateSmokerMale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopDate"]) -> MetaOapg.properties.stopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateNonSmokerNotSpecified"]) -> MetaOapg.properties.employeeRateNonSmokerNotSpecified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRateSmokerNotSpecified"]) -> MetaOapg.properties.employeeRateSmokerNotSpecified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateNonSmokerNotSpecified"]) -> MetaOapg.properties.employerRateNonSmokerNotSpecified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRateSmokerNotSpecified"]) -> MetaOapg.properties.employerRateSmokerNotSpecified: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deductionCode", "minimumAge", "maximumAge", "employeeRateNonSmokerFemale", "employeeRateNonSmokerMale", "employeeRateSmokerFemale", "employeeRateSmokerMale", "effectiveDate", "employerRateNonSmokerFemale", "employerRateNonSmokerMale", "employerRateSmokerFemale", "employerRateSmokerMale", "payFrequency", "stopDate", "employeeRateNonSmokerNotSpecified", "employeeRateSmokerNotSpecified", "employerRateNonSmokerNotSpecified", "employerRateSmokerNotSpecified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumAge"]) -> typing.Union[MetaOapg.properties.minimumAge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumAge"]) -> typing.Union[MetaOapg.properties.maximumAge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateNonSmokerFemale"]) -> typing.Union[MetaOapg.properties.employeeRateNonSmokerFemale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateNonSmokerMale"]) -> typing.Union[MetaOapg.properties.employeeRateNonSmokerMale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateSmokerFemale"]) -> typing.Union[MetaOapg.properties.employeeRateSmokerFemale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateSmokerMale"]) -> typing.Union[MetaOapg.properties.employeeRateSmokerMale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateNonSmokerFemale"]) -> typing.Union[MetaOapg.properties.employerRateNonSmokerFemale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateNonSmokerMale"]) -> typing.Union[MetaOapg.properties.employerRateNonSmokerMale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateSmokerFemale"]) -> typing.Union[MetaOapg.properties.employerRateSmokerFemale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateSmokerMale"]) -> typing.Union[MetaOapg.properties.employerRateSmokerMale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopDate"]) -> typing.Union[MetaOapg.properties.stopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateNonSmokerNotSpecified"]) -> typing.Union[MetaOapg.properties.employeeRateNonSmokerNotSpecified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRateSmokerNotSpecified"]) -> typing.Union[MetaOapg.properties.employeeRateSmokerNotSpecified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateNonSmokerNotSpecified"]) -> typing.Union[MetaOapg.properties.employerRateNonSmokerNotSpecified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRateSmokerNotSpecified"]) -> typing.Union[MetaOapg.properties.employerRateSmokerNotSpecified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deductionCode", "minimumAge", "maximumAge", "employeeRateNonSmokerFemale", "employeeRateNonSmokerMale", "employeeRateSmokerFemale", "employeeRateSmokerMale", "effectiveDate", "employerRateNonSmokerFemale", "employerRateNonSmokerMale", "employerRateSmokerFemale", "employerRateSmokerMale", "payFrequency", "stopDate", "employeeRateNonSmokerNotSpecified", "employeeRateSmokerNotSpecified", "employerRateNonSmokerNotSpecified", "employerRateSmokerNotSpecified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        minimumAge: typing.Union[MetaOapg.properties.minimumAge, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maximumAge: typing.Union[MetaOapg.properties.maximumAge, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeRateNonSmokerFemale: typing.Union[MetaOapg.properties.employeeRateNonSmokerFemale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeRateNonSmokerMale: typing.Union[MetaOapg.properties.employeeRateNonSmokerMale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeRateSmokerFemale: typing.Union[MetaOapg.properties.employeeRateSmokerFemale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeRateSmokerMale: typing.Union[MetaOapg.properties.employeeRateSmokerMale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        employerRateNonSmokerFemale: typing.Union[MetaOapg.properties.employerRateNonSmokerFemale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRateNonSmokerMale: typing.Union[MetaOapg.properties.employerRateNonSmokerMale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRateSmokerFemale: typing.Union[MetaOapg.properties.employerRateSmokerFemale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRateSmokerMale: typing.Union[MetaOapg.properties.employerRateSmokerMale, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        stopDate: typing.Union[MetaOapg.properties.stopDate, str, datetime, schemas.Unset] = schemas.unset,
        employeeRateNonSmokerNotSpecified: typing.Union[MetaOapg.properties.employeeRateNonSmokerNotSpecified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeRateSmokerNotSpecified: typing.Union[MetaOapg.properties.employeeRateSmokerNotSpecified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRateNonSmokerNotSpecified: typing.Union[MetaOapg.properties.employerRateNonSmokerNotSpecified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRateSmokerNotSpecified: typing.Union[MetaOapg.properties.employerRateSmokerNotSpecified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsuranceRate':
        return super().__new__(
            cls,
            *args,
            deductionCode=deductionCode,
            minimumAge=minimumAge,
            maximumAge=maximumAge,
            employeeRateNonSmokerFemale=employeeRateNonSmokerFemale,
            employeeRateNonSmokerMale=employeeRateNonSmokerMale,
            employeeRateSmokerFemale=employeeRateSmokerFemale,
            employeeRateSmokerMale=employeeRateSmokerMale,
            effectiveDate=effectiveDate,
            employerRateNonSmokerFemale=employerRateNonSmokerFemale,
            employerRateNonSmokerMale=employerRateNonSmokerMale,
            employerRateSmokerFemale=employerRateSmokerFemale,
            employerRateSmokerMale=employerRateSmokerMale,
            payFrequency=payFrequency,
            stopDate=stopDate,
            employeeRateNonSmokerNotSpecified=employeeRateNonSmokerNotSpecified,
            employeeRateSmokerNotSpecified=employeeRateSmokerNotSpecified,
            employerRateNonSmokerNotSpecified=employerRateNonSmokerNotSpecified,
            employerRateSmokerNotSpecified=employerRateSmokerNotSpecified,
            _configuration=_configuration,
            **kwargs,
        )
