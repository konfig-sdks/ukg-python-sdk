# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeePayStatementModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class accruals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeePayStatementAccrualsModel']:
                        return EmployeePayStatementAccrualsModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeePayStatementAccrualsModel'], typing.List['EmployeePayStatementAccrualsModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accruals':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeePayStatementAccrualsModel':
                    return super().__getitem__(i)
            addressline1 = schemas.StrSchema
            addressline2 = schemas.StrSchema
            city = schemas.StrSchema
            companyaddresscity = schemas.StrSchema
            companyaddresscountry = schemas.StrSchema
            companyaddresscounty = schemas.StrSchema
            companyaddressline1 = schemas.StrSchema
            companyaddressline2 = schemas.StrSchema
            companyaddresspostalcode = schemas.StrSchema
            companyaddressstateorprovince = schemas.StrSchema
            companyname = schemas.StrSchema
            companyphone = schemas.StrSchema
            companyphoneext = schemas.StrSchema
            country = schemas.StrSchema
            
            
            class deductions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeePayStatementDeductionsModel']:
                        return EmployeePayStatementDeductionsModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeePayStatementDeductionsModel'], typing.List['EmployeePayStatementDeductionsModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deductions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeePayStatementDeductionsModel':
                    return super().__getitem__(i)
            deductionscurrent = schemas.Float32Schema
            deductionsytd = schemas.Float32Schema
            document = schemas.StrSchema
            
            
            class earnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeePayStatementEarningsModel']:
                        return EmployeePayStatementEarningsModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeePayStatementEarningsModel'], typing.List['EmployeePayStatementEarningsModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'earnings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeePayStatementEarningsModel':
                    return super().__getitem__(i)
        
            @staticmethod
            def employeeidentifier() -> typing.Type['EmployeePayStatementIdentifierModel']:
                return EmployeePayStatementIdentifierModel
            employeenumber = schemas.StrSchema
            federaladditionalamountWithheld = schemas.Float32Schema
            federalallowancesclaimed = schemas.Int32Schema
            federalfilingstatus = schemas.StrSchema
            federaltaxablewagescurrent = schemas.Float32Schema
            federaltaxablewagesytd = schemas.Float32Schema
            fullname = schemas.StrSchema
            grosswagescurrent = schemas.Float32Schema
            grosswagesytd = schemas.Float32Schema
            job = schemas.StrSchema
            location = schemas.StrSchema
            
            
            class netpay(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeePayStatementNetPayModel']:
                        return EmployeePayStatementNetPayModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeePayStatementNetPayModel'], typing.List['EmployeePayStatementNetPayModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'netpay':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeePayStatementNetPayModel':
                    return super().__getitem__(i)
            netpaycurrent = schemas.Float32Schema
            netpayytd = schemas.Float32Schema
            orglevel1 = schemas.StrSchema
            orglevel2 = schemas.StrSchema
            orglevel3 = schemas.StrSchema
            orglevel4 = schemas.StrSchema
            paydate = schemas.DateTimeSchema
            payperiodfrequency = schemas.StrSchema
            paygroup = schemas.StrSchema
            payidentifier = schemas.StrSchema
            payrate = schemas.Float32Schema
            periodenddate = schemas.DateTimeSchema
            periodstartdate = schemas.DateTimeSchema
            postalcode = schemas.StrSchema
            residentstateallowancesclaimed = schemas.Int32Schema
            residentstatefilingstatus = schemas.StrSchema
            ssn = schemas.StrSchema
            stateorprovince = schemas.StrSchema
            
            
            class taxes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeePayStatementTaxesModel']:
                        return EmployeePayStatementTaxesModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeePayStatementTaxesModel'], typing.List['EmployeePayStatementTaxesModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeePayStatementTaxesModel':
                    return super().__getitem__(i)
            taxescurrent = schemas.Float32Schema
            taxesytd = schemas.Float32Schema
            workstateallowancesclaimed = schemas.Int32Schema
            workstatefilingstatus = schemas.StrSchema
            __annotations__ = {
                "accruals": accruals,
                "addressline1": addressline1,
                "addressline2": addressline2,
                "city": city,
                "companyaddresscity": companyaddresscity,
                "companyaddresscountry": companyaddresscountry,
                "companyaddresscounty": companyaddresscounty,
                "companyaddressline1": companyaddressline1,
                "companyaddressline2": companyaddressline2,
                "companyaddresspostalcode": companyaddresspostalcode,
                "companyaddressstateorprovince": companyaddressstateorprovince,
                "companyname": companyname,
                "companyphone": companyphone,
                "companyphoneext": companyphoneext,
                "country": country,
                "deductions": deductions,
                "deductionscurrent": deductionscurrent,
                "deductionsytd": deductionsytd,
                "document": document,
                "earnings": earnings,
                "employeeidentifier": employeeidentifier,
                "employeenumber": employeenumber,
                "federaladditionalamountWithheld": federaladditionalamountWithheld,
                "federalallowancesclaimed": federalallowancesclaimed,
                "federalfilingstatus": federalfilingstatus,
                "federaltaxablewagescurrent": federaltaxablewagescurrent,
                "federaltaxablewagesytd": federaltaxablewagesytd,
                "fullname": fullname,
                "grosswagescurrent": grosswagescurrent,
                "grosswagesytd": grosswagesytd,
                "job": job,
                "location": location,
                "netpay": netpay,
                "netpaycurrent": netpaycurrent,
                "netpayytd": netpayytd,
                "orglevel1": orglevel1,
                "orglevel2": orglevel2,
                "orglevel3": orglevel3,
                "orglevel4": orglevel4,
                "paydate": paydate,
                "payperiodfrequency": payperiodfrequency,
                "paygroup": paygroup,
                "payidentifier": payidentifier,
                "payrate": payrate,
                "periodenddate": periodenddate,
                "periodstartdate": periodstartdate,
                "postalcode": postalcode,
                "residentstateallowancesclaimed": residentstateallowancesclaimed,
                "residentstatefilingstatus": residentstatefilingstatus,
                "ssn": ssn,
                "stateorprovince": stateorprovince,
                "taxes": taxes,
                "taxescurrent": taxescurrent,
                "taxesytd": taxesytd,
                "workstateallowancesclaimed": workstateallowancesclaimed,
                "workstatefilingstatus": workstatefilingstatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accruals"]) -> MetaOapg.properties.accruals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressline1"]) -> MetaOapg.properties.addressline1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressline2"]) -> MetaOapg.properties.addressline2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddresscity"]) -> MetaOapg.properties.companyaddresscity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddresscountry"]) -> MetaOapg.properties.companyaddresscountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddresscounty"]) -> MetaOapg.properties.companyaddresscounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddressline1"]) -> MetaOapg.properties.companyaddressline1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddressline2"]) -> MetaOapg.properties.companyaddressline2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddresspostalcode"]) -> MetaOapg.properties.companyaddresspostalcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyaddressstateorprovince"]) -> MetaOapg.properties.companyaddressstateorprovince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyname"]) -> MetaOapg.properties.companyname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyphone"]) -> MetaOapg.properties.companyphone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyphoneext"]) -> MetaOapg.properties.companyphoneext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionscurrent"]) -> MetaOapg.properties.deductionscurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionsytd"]) -> MetaOapg.properties.deductionsytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document"]) -> MetaOapg.properties.document: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> MetaOapg.properties.earnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeidentifier"]) -> 'EmployeePayStatementIdentifierModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeenumber"]) -> MetaOapg.properties.employeenumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federaladditionalamountWithheld"]) -> MetaOapg.properties.federaladditionalamountWithheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalallowancesclaimed"]) -> MetaOapg.properties.federalallowancesclaimed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalfilingstatus"]) -> MetaOapg.properties.federalfilingstatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federaltaxablewagescurrent"]) -> MetaOapg.properties.federaltaxablewagescurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federaltaxablewagesytd"]) -> MetaOapg.properties.federaltaxablewagesytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullname"]) -> MetaOapg.properties.fullname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grosswagescurrent"]) -> MetaOapg.properties.grosswagescurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grosswagesytd"]) -> MetaOapg.properties.grosswagesytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netpay"]) -> MetaOapg.properties.netpay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netpaycurrent"]) -> MetaOapg.properties.netpaycurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netpayytd"]) -> MetaOapg.properties.netpayytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orglevel1"]) -> MetaOapg.properties.orglevel1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orglevel2"]) -> MetaOapg.properties.orglevel2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orglevel3"]) -> MetaOapg.properties.orglevel3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orglevel4"]) -> MetaOapg.properties.orglevel4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paydate"]) -> MetaOapg.properties.paydate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payperiodfrequency"]) -> MetaOapg.properties.payperiodfrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paygroup"]) -> MetaOapg.properties.paygroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payidentifier"]) -> MetaOapg.properties.payidentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrate"]) -> MetaOapg.properties.payrate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodenddate"]) -> MetaOapg.properties.periodenddate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodstartdate"]) -> MetaOapg.properties.periodstartdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalcode"]) -> MetaOapg.properties.postalcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residentstateallowancesclaimed"]) -> MetaOapg.properties.residentstateallowancesclaimed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residentstatefilingstatus"]) -> MetaOapg.properties.residentstatefilingstatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateorprovince"]) -> MetaOapg.properties.stateorprovince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> MetaOapg.properties.taxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxescurrent"]) -> MetaOapg.properties.taxescurrent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxesytd"]) -> MetaOapg.properties.taxesytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workstateallowancesclaimed"]) -> MetaOapg.properties.workstateallowancesclaimed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workstatefilingstatus"]) -> MetaOapg.properties.workstatefilingstatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accruals", "addressline1", "addressline2", "city", "companyaddresscity", "companyaddresscountry", "companyaddresscounty", "companyaddressline1", "companyaddressline2", "companyaddresspostalcode", "companyaddressstateorprovince", "companyname", "companyphone", "companyphoneext", "country", "deductions", "deductionscurrent", "deductionsytd", "document", "earnings", "employeeidentifier", "employeenumber", "federaladditionalamountWithheld", "federalallowancesclaimed", "federalfilingstatus", "federaltaxablewagescurrent", "federaltaxablewagesytd", "fullname", "grosswagescurrent", "grosswagesytd", "job", "location", "netpay", "netpaycurrent", "netpayytd", "orglevel1", "orglevel2", "orglevel3", "orglevel4", "paydate", "payperiodfrequency", "paygroup", "payidentifier", "payrate", "periodenddate", "periodstartdate", "postalcode", "residentstateallowancesclaimed", "residentstatefilingstatus", "ssn", "stateorprovince", "taxes", "taxescurrent", "taxesytd", "workstateallowancesclaimed", "workstatefilingstatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accruals"]) -> typing.Union[MetaOapg.properties.accruals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressline1"]) -> typing.Union[MetaOapg.properties.addressline1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressline2"]) -> typing.Union[MetaOapg.properties.addressline2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddresscity"]) -> typing.Union[MetaOapg.properties.companyaddresscity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddresscountry"]) -> typing.Union[MetaOapg.properties.companyaddresscountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddresscounty"]) -> typing.Union[MetaOapg.properties.companyaddresscounty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddressline1"]) -> typing.Union[MetaOapg.properties.companyaddressline1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddressline2"]) -> typing.Union[MetaOapg.properties.companyaddressline2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddresspostalcode"]) -> typing.Union[MetaOapg.properties.companyaddresspostalcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyaddressstateorprovince"]) -> typing.Union[MetaOapg.properties.companyaddressstateorprovince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyname"]) -> typing.Union[MetaOapg.properties.companyname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyphone"]) -> typing.Union[MetaOapg.properties.companyphone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyphoneext"]) -> typing.Union[MetaOapg.properties.companyphoneext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionscurrent"]) -> typing.Union[MetaOapg.properties.deductionscurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionsytd"]) -> typing.Union[MetaOapg.properties.deductionsytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document"]) -> typing.Union[MetaOapg.properties.document, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> typing.Union[MetaOapg.properties.earnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeidentifier"]) -> typing.Union['EmployeePayStatementIdentifierModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeenumber"]) -> typing.Union[MetaOapg.properties.employeenumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federaladditionalamountWithheld"]) -> typing.Union[MetaOapg.properties.federaladditionalamountWithheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalallowancesclaimed"]) -> typing.Union[MetaOapg.properties.federalallowancesclaimed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalfilingstatus"]) -> typing.Union[MetaOapg.properties.federalfilingstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federaltaxablewagescurrent"]) -> typing.Union[MetaOapg.properties.federaltaxablewagescurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federaltaxablewagesytd"]) -> typing.Union[MetaOapg.properties.federaltaxablewagesytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullname"]) -> typing.Union[MetaOapg.properties.fullname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grosswagescurrent"]) -> typing.Union[MetaOapg.properties.grosswagescurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grosswagesytd"]) -> typing.Union[MetaOapg.properties.grosswagesytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netpay"]) -> typing.Union[MetaOapg.properties.netpay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netpaycurrent"]) -> typing.Union[MetaOapg.properties.netpaycurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netpayytd"]) -> typing.Union[MetaOapg.properties.netpayytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orglevel1"]) -> typing.Union[MetaOapg.properties.orglevel1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orglevel2"]) -> typing.Union[MetaOapg.properties.orglevel2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orglevel3"]) -> typing.Union[MetaOapg.properties.orglevel3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orglevel4"]) -> typing.Union[MetaOapg.properties.orglevel4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paydate"]) -> typing.Union[MetaOapg.properties.paydate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payperiodfrequency"]) -> typing.Union[MetaOapg.properties.payperiodfrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paygroup"]) -> typing.Union[MetaOapg.properties.paygroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payidentifier"]) -> typing.Union[MetaOapg.properties.payidentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrate"]) -> typing.Union[MetaOapg.properties.payrate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodenddate"]) -> typing.Union[MetaOapg.properties.periodenddate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodstartdate"]) -> typing.Union[MetaOapg.properties.periodstartdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalcode"]) -> typing.Union[MetaOapg.properties.postalcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residentstateallowancesclaimed"]) -> typing.Union[MetaOapg.properties.residentstateallowancesclaimed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residentstatefilingstatus"]) -> typing.Union[MetaOapg.properties.residentstatefilingstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateorprovince"]) -> typing.Union[MetaOapg.properties.stateorprovince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union[MetaOapg.properties.taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxescurrent"]) -> typing.Union[MetaOapg.properties.taxescurrent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxesytd"]) -> typing.Union[MetaOapg.properties.taxesytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workstateallowancesclaimed"]) -> typing.Union[MetaOapg.properties.workstateallowancesclaimed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workstatefilingstatus"]) -> typing.Union[MetaOapg.properties.workstatefilingstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accruals", "addressline1", "addressline2", "city", "companyaddresscity", "companyaddresscountry", "companyaddresscounty", "companyaddressline1", "companyaddressline2", "companyaddresspostalcode", "companyaddressstateorprovince", "companyname", "companyphone", "companyphoneext", "country", "deductions", "deductionscurrent", "deductionsytd", "document", "earnings", "employeeidentifier", "employeenumber", "federaladditionalamountWithheld", "federalallowancesclaimed", "federalfilingstatus", "federaltaxablewagescurrent", "federaltaxablewagesytd", "fullname", "grosswagescurrent", "grosswagesytd", "job", "location", "netpay", "netpaycurrent", "netpayytd", "orglevel1", "orglevel2", "orglevel3", "orglevel4", "paydate", "payperiodfrequency", "paygroup", "payidentifier", "payrate", "periodenddate", "periodstartdate", "postalcode", "residentstateallowancesclaimed", "residentstatefilingstatus", "ssn", "stateorprovince", "taxes", "taxescurrent", "taxesytd", "workstateallowancesclaimed", "workstatefilingstatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accruals: typing.Union[MetaOapg.properties.accruals, list, tuple, schemas.Unset] = schemas.unset,
        addressline1: typing.Union[MetaOapg.properties.addressline1, str, schemas.Unset] = schemas.unset,
        addressline2: typing.Union[MetaOapg.properties.addressline2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        companyaddresscity: typing.Union[MetaOapg.properties.companyaddresscity, str, schemas.Unset] = schemas.unset,
        companyaddresscountry: typing.Union[MetaOapg.properties.companyaddresscountry, str, schemas.Unset] = schemas.unset,
        companyaddresscounty: typing.Union[MetaOapg.properties.companyaddresscounty, str, schemas.Unset] = schemas.unset,
        companyaddressline1: typing.Union[MetaOapg.properties.companyaddressline1, str, schemas.Unset] = schemas.unset,
        companyaddressline2: typing.Union[MetaOapg.properties.companyaddressline2, str, schemas.Unset] = schemas.unset,
        companyaddresspostalcode: typing.Union[MetaOapg.properties.companyaddresspostalcode, str, schemas.Unset] = schemas.unset,
        companyaddressstateorprovince: typing.Union[MetaOapg.properties.companyaddressstateorprovince, str, schemas.Unset] = schemas.unset,
        companyname: typing.Union[MetaOapg.properties.companyname, str, schemas.Unset] = schemas.unset,
        companyphone: typing.Union[MetaOapg.properties.companyphone, str, schemas.Unset] = schemas.unset,
        companyphoneext: typing.Union[MetaOapg.properties.companyphoneext, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, list, tuple, schemas.Unset] = schemas.unset,
        deductionscurrent: typing.Union[MetaOapg.properties.deductionscurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deductionsytd: typing.Union[MetaOapg.properties.deductionsytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        document: typing.Union[MetaOapg.properties.document, str, schemas.Unset] = schemas.unset,
        earnings: typing.Union[MetaOapg.properties.earnings, list, tuple, schemas.Unset] = schemas.unset,
        employeeidentifier: typing.Union['EmployeePayStatementIdentifierModel', schemas.Unset] = schemas.unset,
        employeenumber: typing.Union[MetaOapg.properties.employeenumber, str, schemas.Unset] = schemas.unset,
        federaladditionalamountWithheld: typing.Union[MetaOapg.properties.federaladditionalamountWithheld, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        federalallowancesclaimed: typing.Union[MetaOapg.properties.federalallowancesclaimed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        federalfilingstatus: typing.Union[MetaOapg.properties.federalfilingstatus, str, schemas.Unset] = schemas.unset,
        federaltaxablewagescurrent: typing.Union[MetaOapg.properties.federaltaxablewagescurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        federaltaxablewagesytd: typing.Union[MetaOapg.properties.federaltaxablewagesytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fullname: typing.Union[MetaOapg.properties.fullname, str, schemas.Unset] = schemas.unset,
        grosswagescurrent: typing.Union[MetaOapg.properties.grosswagescurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grosswagesytd: typing.Union[MetaOapg.properties.grosswagesytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        job: typing.Union[MetaOapg.properties.job, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        netpay: typing.Union[MetaOapg.properties.netpay, list, tuple, schemas.Unset] = schemas.unset,
        netpaycurrent: typing.Union[MetaOapg.properties.netpaycurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netpayytd: typing.Union[MetaOapg.properties.netpayytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        orglevel1: typing.Union[MetaOapg.properties.orglevel1, str, schemas.Unset] = schemas.unset,
        orglevel2: typing.Union[MetaOapg.properties.orglevel2, str, schemas.Unset] = schemas.unset,
        orglevel3: typing.Union[MetaOapg.properties.orglevel3, str, schemas.Unset] = schemas.unset,
        orglevel4: typing.Union[MetaOapg.properties.orglevel4, str, schemas.Unset] = schemas.unset,
        paydate: typing.Union[MetaOapg.properties.paydate, str, datetime, schemas.Unset] = schemas.unset,
        payperiodfrequency: typing.Union[MetaOapg.properties.payperiodfrequency, str, schemas.Unset] = schemas.unset,
        paygroup: typing.Union[MetaOapg.properties.paygroup, str, schemas.Unset] = schemas.unset,
        payidentifier: typing.Union[MetaOapg.properties.payidentifier, str, schemas.Unset] = schemas.unset,
        payrate: typing.Union[MetaOapg.properties.payrate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        periodenddate: typing.Union[MetaOapg.properties.periodenddate, str, datetime, schemas.Unset] = schemas.unset,
        periodstartdate: typing.Union[MetaOapg.properties.periodstartdate, str, datetime, schemas.Unset] = schemas.unset,
        postalcode: typing.Union[MetaOapg.properties.postalcode, str, schemas.Unset] = schemas.unset,
        residentstateallowancesclaimed: typing.Union[MetaOapg.properties.residentstateallowancesclaimed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        residentstatefilingstatus: typing.Union[MetaOapg.properties.residentstatefilingstatus, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        stateorprovince: typing.Union[MetaOapg.properties.stateorprovince, str, schemas.Unset] = schemas.unset,
        taxes: typing.Union[MetaOapg.properties.taxes, list, tuple, schemas.Unset] = schemas.unset,
        taxescurrent: typing.Union[MetaOapg.properties.taxescurrent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        taxesytd: typing.Union[MetaOapg.properties.taxesytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workstateallowancesclaimed: typing.Union[MetaOapg.properties.workstateallowancesclaimed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workstatefilingstatus: typing.Union[MetaOapg.properties.workstatefilingstatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePayStatementModel':
        return super().__new__(
            cls,
            *args,
            accruals=accruals,
            addressline1=addressline1,
            addressline2=addressline2,
            city=city,
            companyaddresscity=companyaddresscity,
            companyaddresscountry=companyaddresscountry,
            companyaddresscounty=companyaddresscounty,
            companyaddressline1=companyaddressline1,
            companyaddressline2=companyaddressline2,
            companyaddresspostalcode=companyaddresspostalcode,
            companyaddressstateorprovince=companyaddressstateorprovince,
            companyname=companyname,
            companyphone=companyphone,
            companyphoneext=companyphoneext,
            country=country,
            deductions=deductions,
            deductionscurrent=deductionscurrent,
            deductionsytd=deductionsytd,
            document=document,
            earnings=earnings,
            employeeidentifier=employeeidentifier,
            employeenumber=employeenumber,
            federaladditionalamountWithheld=federaladditionalamountWithheld,
            federalallowancesclaimed=federalallowancesclaimed,
            federalfilingstatus=federalfilingstatus,
            federaltaxablewagescurrent=federaltaxablewagescurrent,
            federaltaxablewagesytd=federaltaxablewagesytd,
            fullname=fullname,
            grosswagescurrent=grosswagescurrent,
            grosswagesytd=grosswagesytd,
            job=job,
            location=location,
            netpay=netpay,
            netpaycurrent=netpaycurrent,
            netpayytd=netpayytd,
            orglevel1=orglevel1,
            orglevel2=orglevel2,
            orglevel3=orglevel3,
            orglevel4=orglevel4,
            paydate=paydate,
            payperiodfrequency=payperiodfrequency,
            paygroup=paygroup,
            payidentifier=payidentifier,
            payrate=payrate,
            periodenddate=periodenddate,
            periodstartdate=periodstartdate,
            postalcode=postalcode,
            residentstateallowancesclaimed=residentstateallowancesclaimed,
            residentstatefilingstatus=residentstatefilingstatus,
            ssn=ssn,
            stateorprovince=stateorprovince,
            taxes=taxes,
            taxescurrent=taxescurrent,
            taxesytd=taxesytd,
            workstateallowancesclaimed=workstateallowancesclaimed,
            workstatefilingstatus=workstatefilingstatus,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.employee_pay_statement_accruals_model import EmployeePayStatementAccrualsModel
from ukg_python_sdk.model.employee_pay_statement_deductions_model import EmployeePayStatementDeductionsModel
from ukg_python_sdk.model.employee_pay_statement_earnings_model import EmployeePayStatementEarningsModel
from ukg_python_sdk.model.employee_pay_statement_identifier_model import EmployeePayStatementIdentifierModel
from ukg_python_sdk.model.employee_pay_statement_net_pay_model import EmployeePayStatementNetPayModel
from ukg_python_sdk.model.employee_pay_statement_taxes_model import EmployeePayStatementTaxesModel
