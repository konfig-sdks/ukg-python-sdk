# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class PositionReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            dateTimeChanged = schemas.DateTimeSchema
            dateTimeCreated = schemas.DateTimeSchema
            effectiveStartDate = schemas.DateTimeSchema
            effectiveStopDate = schemas.DateTimeSchema
            positionCode = schemas.StrSchema
            reportsToPositionCode = schemas.StrSchema
            __annotations__ = {
                "dateTimeChanged": dateTimeChanged,
                "dateTimeCreated": dateTimeCreated,
                "effectiveStartDate": effectiveStartDate,
                "effectiveStopDate": effectiveStopDate,
                "positionCode": positionCode,
                "reportsToPositionCode": reportsToPositionCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeCreated"]) -> MetaOapg.properties.dateTimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveStartDate"]) -> MetaOapg.properties.effectiveStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveStopDate"]) -> MetaOapg.properties.effectiveStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionCode"]) -> MetaOapg.properties.positionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportsToPositionCode"]) -> MetaOapg.properties.reportsToPositionCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateTimeChanged", "dateTimeCreated", "effectiveStartDate", "effectiveStopDate", "positionCode", "reportsToPositionCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeCreated"]) -> typing.Union[MetaOapg.properties.dateTimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveStartDate"]) -> typing.Union[MetaOapg.properties.effectiveStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveStopDate"]) -> typing.Union[MetaOapg.properties.effectiveStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionCode"]) -> typing.Union[MetaOapg.properties.positionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportsToPositionCode"]) -> typing.Union[MetaOapg.properties.reportsToPositionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateTimeChanged", "dateTimeCreated", "effectiveStartDate", "effectiveStopDate", "positionCode", "reportsToPositionCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        dateTimeCreated: typing.Union[MetaOapg.properties.dateTimeCreated, str, datetime, schemas.Unset] = schemas.unset,
        effectiveStartDate: typing.Union[MetaOapg.properties.effectiveStartDate, str, datetime, schemas.Unset] = schemas.unset,
        effectiveStopDate: typing.Union[MetaOapg.properties.effectiveStopDate, str, datetime, schemas.Unset] = schemas.unset,
        positionCode: typing.Union[MetaOapg.properties.positionCode, str, schemas.Unset] = schemas.unset,
        reportsToPositionCode: typing.Union[MetaOapg.properties.reportsToPositionCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PositionReport':
        return super().__new__(
            cls,
            *args,
            dateTimeChanged=dateTimeChanged,
            dateTimeCreated=dateTimeCreated,
            effectiveStartDate=effectiveStartDate,
            effectiveStopDate=effectiveStopDate,
            positionCode=positionCode,
            reportsToPositionCode=reportsToPositionCode,
            _configuration=_configuration,
            **kwargs,
        )
