# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Translations(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The translations in all available languages.
    """


    class MetaOapg:
        
        class properties:
            en_us = schemas.StrSchema
            en_gb = schemas.StrSchema
            es_es = schemas.StrSchema
            fr_ca = schemas.StrSchema
            de_de = schemas.StrSchema
            pr_br = schemas.StrSchema
            __annotations__ = {
                "en_us": en_us,
                "en_gb": en_gb,
                "es_es": es_es,
                "fr_ca": fr_ca,
                "de_de": de_de,
                "pr_br": pr_br,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["en_us"]) -> MetaOapg.properties.en_us: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["en_gb"]) -> MetaOapg.properties.en_gb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["es_es"]) -> MetaOapg.properties.es_es: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fr_ca"]) -> MetaOapg.properties.fr_ca: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["de_de"]) -> MetaOapg.properties.de_de: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pr_br"]) -> MetaOapg.properties.pr_br: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["en_us", "en_gb", "es_es", "fr_ca", "de_de", "pr_br", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["en_us"]) -> typing.Union[MetaOapg.properties.en_us, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["en_gb"]) -> typing.Union[MetaOapg.properties.en_gb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["es_es"]) -> typing.Union[MetaOapg.properties.es_es, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fr_ca"]) -> typing.Union[MetaOapg.properties.fr_ca, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["de_de"]) -> typing.Union[MetaOapg.properties.de_de, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pr_br"]) -> typing.Union[MetaOapg.properties.pr_br, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["en_us", "en_gb", "es_es", "fr_ca", "de_de", "pr_br", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        en_us: typing.Union[MetaOapg.properties.en_us, str, schemas.Unset] = schemas.unset,
        en_gb: typing.Union[MetaOapg.properties.en_gb, str, schemas.Unset] = schemas.unset,
        es_es: typing.Union[MetaOapg.properties.es_es, str, schemas.Unset] = schemas.unset,
        fr_ca: typing.Union[MetaOapg.properties.fr_ca, str, schemas.Unset] = schemas.unset,
        de_de: typing.Union[MetaOapg.properties.de_de, str, schemas.Unset] = schemas.unset,
        pr_br: typing.Union[MetaOapg.properties.pr_br, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Translations':
        return super().__new__(
            cls,
            *args,
            en_us=en_us,
            en_gb=en_gb,
            es_es=es_es,
            fr_ca=fr_ca,
            de_de=de_de,
            pr_br=pr_br,
            _configuration=_configuration,
            **kwargs,
        )
