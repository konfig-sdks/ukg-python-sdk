# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeCobraDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            personID = schemas.StrSchema
            employeeID = schemas.StrSchema
            companyID = schemas.StrSchema
            cobraExport = schemas.StrSchema
            cobraIsActive = schemas.BoolSchema
            cobraNotes = schemas.StrSchema
            cobraReason = schemas.StrSchema
            cobraStatus = schemas.StrSchema
            cobraStatusDate = schemas.DateTimeSchema
            dateOfCobraEvent = schemas.DateTimeSchema
            dateOfCobraExport = schemas.DateTimeSchema
            dateOfCobraLetter = schemas.DateTimeSchema
            __annotations__ = {
                "personID": personID,
                "employeeID": employeeID,
                "companyID": companyID,
                "cobraExport": cobraExport,
                "cobraIsActive": cobraIsActive,
                "cobraNotes": cobraNotes,
                "cobraReason": cobraReason,
                "cobraStatus": cobraStatus,
                "cobraStatusDate": cobraStatusDate,
                "dateOfCobraEvent": dateOfCobraEvent,
                "dateOfCobraExport": dateOfCobraExport,
                "dateOfCobraLetter": dateOfCobraLetter,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personID"]) -> MetaOapg.properties.personID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeID"]) -> MetaOapg.properties.employeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraExport"]) -> MetaOapg.properties.cobraExport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraIsActive"]) -> MetaOapg.properties.cobraIsActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraNotes"]) -> MetaOapg.properties.cobraNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraReason"]) -> MetaOapg.properties.cobraReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraStatus"]) -> MetaOapg.properties.cobraStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cobraStatusDate"]) -> MetaOapg.properties.cobraStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfCobraEvent"]) -> MetaOapg.properties.dateOfCobraEvent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfCobraExport"]) -> MetaOapg.properties.dateOfCobraExport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfCobraLetter"]) -> MetaOapg.properties.dateOfCobraLetter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["personID", "employeeID", "companyID", "cobraExport", "cobraIsActive", "cobraNotes", "cobraReason", "cobraStatus", "cobraStatusDate", "dateOfCobraEvent", "dateOfCobraExport", "dateOfCobraLetter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personID"]) -> typing.Union[MetaOapg.properties.personID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeID"]) -> typing.Union[MetaOapg.properties.employeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraExport"]) -> typing.Union[MetaOapg.properties.cobraExport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraIsActive"]) -> typing.Union[MetaOapg.properties.cobraIsActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraNotes"]) -> typing.Union[MetaOapg.properties.cobraNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraReason"]) -> typing.Union[MetaOapg.properties.cobraReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraStatus"]) -> typing.Union[MetaOapg.properties.cobraStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cobraStatusDate"]) -> typing.Union[MetaOapg.properties.cobraStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfCobraEvent"]) -> typing.Union[MetaOapg.properties.dateOfCobraEvent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfCobraExport"]) -> typing.Union[MetaOapg.properties.dateOfCobraExport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfCobraLetter"]) -> typing.Union[MetaOapg.properties.dateOfCobraLetter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["personID", "employeeID", "companyID", "cobraExport", "cobraIsActive", "cobraNotes", "cobraReason", "cobraStatus", "cobraStatusDate", "dateOfCobraEvent", "dateOfCobraExport", "dateOfCobraLetter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        personID: typing.Union[MetaOapg.properties.personID, str, schemas.Unset] = schemas.unset,
        employeeID: typing.Union[MetaOapg.properties.employeeID, str, schemas.Unset] = schemas.unset,
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        cobraExport: typing.Union[MetaOapg.properties.cobraExport, str, schemas.Unset] = schemas.unset,
        cobraIsActive: typing.Union[MetaOapg.properties.cobraIsActive, bool, schemas.Unset] = schemas.unset,
        cobraNotes: typing.Union[MetaOapg.properties.cobraNotes, str, schemas.Unset] = schemas.unset,
        cobraReason: typing.Union[MetaOapg.properties.cobraReason, str, schemas.Unset] = schemas.unset,
        cobraStatus: typing.Union[MetaOapg.properties.cobraStatus, str, schemas.Unset] = schemas.unset,
        cobraStatusDate: typing.Union[MetaOapg.properties.cobraStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        dateOfCobraEvent: typing.Union[MetaOapg.properties.dateOfCobraEvent, str, datetime, schemas.Unset] = schemas.unset,
        dateOfCobraExport: typing.Union[MetaOapg.properties.dateOfCobraExport, str, datetime, schemas.Unset] = schemas.unset,
        dateOfCobraLetter: typing.Union[MetaOapg.properties.dateOfCobraLetter, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeCobraDetails':
        return super().__new__(
            cls,
            *args,
            personID=personID,
            employeeID=employeeID,
            companyID=companyID,
            cobraExport=cobraExport,
            cobraIsActive=cobraIsActive,
            cobraNotes=cobraNotes,
            cobraReason=cobraReason,
            cobraStatus=cobraStatus,
            cobraStatusDate=cobraStatusDate,
            dateOfCobraEvent=dateOfCobraEvent,
            dateOfCobraExport=dateOfCobraExport,
            dateOfCobraLetter=dateOfCobraLetter,
            _configuration=_configuration,
            **kwargs,
        )
