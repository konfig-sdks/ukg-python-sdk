# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class PayRegister(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            annualSalary = schemas.NumberSchema
            autoAllocate = schemas.BoolSchema
            bonusTotalHours = schemas.NumberSchema
            bonusTotalOTHours = schemas.NumberSchema
            checkAddMode = schemas.StrSchema
            checkAmount = schemas.NumberSchema
            companyId = schemas.StrSchema
            payPeriodFrequency = schemas.StrSchema
            currencyCode = schemas.StrSchema
            directDepositAmount = schemas.NumberSchema
            documentNumber = schemas.StrSchema
            earningTaxReportingType = schemas.StrSchema
            employeeId = schemas.StrSchema
            employeeStatus = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            checkId = schemas.StrSchema
            hourlyPayRate = schemas.NumberSchema
            isRegularPayForCumulative = schemas.StrSchema
            isVoided = schemas.BoolSchema
            isVoidingRecord = schemas.BoolSchema
            jobCode = schemas.StrSchema
            lastRegularPayDate = schemas.DateTimeSchema
            locationCode = schemas.StrSchema
            nameFirst = schemas.StrSchema
            nameLast = schemas.StrSchema
            nameMiddle = schemas.StrSchema
            nameSuffix = schemas.StrSchema
            netAmount = schemas.NumberSchema
            organizationLevel1 = schemas.StrSchema
            organizationLevel2 = schemas.StrSchema
            organizationLevel3 = schemas.StrSchema
            organizationLevel4 = schemas.StrSchema
            originalPayPeriodFrequency = schemas.StrSchema
            payDate = schemas.DateTimeSchema
            payGroup = schemas.StrSchema
            periodControl = schemas.StrSchema
            periodEndDate = schemas.DateTimeSchema
            periodStartDate = schemas.DateTimeSchema
            project = schemas.StrSchema
            reconciled = schemas.StrSchema
            reconcileDate = schemas.DateTimeSchema
            sequenceNumber = schemas.IntSchema
            shift = schemas.StrSchema
            ssn = schemas.StrSchema
            stateSui = schemas.StrSchema
            suiGross = schemas.NumberSchema
            taxCalculationGroupID = schemas.StrSchema
            taxCalculationSequence = schemas.StrSchema
            totalDeductionAmount = schemas.NumberSchema
            totalEarningsAmount = schemas.NumberSchema
            totalHours = schemas.NumberSchema
            totalHoursWorked = schemas.NumberSchema
            totalShiftAmount = schemas.NumberSchema
            totalTaxAmount = schemas.NumberSchema
            voidDate = schemas.DateTimeSchema
            __annotations__ = {
                "annualSalary": annualSalary,
                "autoAllocate": autoAllocate,
                "bonusTotalHours": bonusTotalHours,
                "bonusTotalOTHours": bonusTotalOTHours,
                "checkAddMode": checkAddMode,
                "checkAmount": checkAmount,
                "companyId": companyId,
                "payPeriodFrequency": payPeriodFrequency,
                "currencyCode": currencyCode,
                "directDepositAmount": directDepositAmount,
                "documentNumber": documentNumber,
                "earningTaxReportingType": earningTaxReportingType,
                "employeeId": employeeId,
                "employeeStatus": employeeStatus,
                "employeeNumber": employeeNumber,
                "checkId": checkId,
                "hourlyPayRate": hourlyPayRate,
                "isRegularPayForCumulative": isRegularPayForCumulative,
                "isVoided": isVoided,
                "isVoidingRecord": isVoidingRecord,
                "jobCode": jobCode,
                "lastRegularPayDate": lastRegularPayDate,
                "locationCode": locationCode,
                "nameFirst": nameFirst,
                "nameLast": nameLast,
                "nameMiddle": nameMiddle,
                "nameSuffix": nameSuffix,
                "netAmount": netAmount,
                "organizationLevel1": organizationLevel1,
                "organizationLevel2": organizationLevel2,
                "organizationLevel3": organizationLevel3,
                "organizationLevel4": organizationLevel4,
                "originalPayPeriodFrequency": originalPayPeriodFrequency,
                "payDate": payDate,
                "payGroup": payGroup,
                "periodControl": periodControl,
                "periodEndDate": periodEndDate,
                "periodStartDate": periodStartDate,
                "project": project,
                "reconciled": reconciled,
                "reconcileDate": reconcileDate,
                "sequenceNumber": sequenceNumber,
                "shift": shift,
                "ssn": ssn,
                "stateSui": stateSui,
                "suiGross": suiGross,
                "taxCalculationGroupID": taxCalculationGroupID,
                "taxCalculationSequence": taxCalculationSequence,
                "totalDeductionAmount": totalDeductionAmount,
                "totalEarningsAmount": totalEarningsAmount,
                "totalHours": totalHours,
                "totalHoursWorked": totalHoursWorked,
                "totalShiftAmount": totalShiftAmount,
                "totalTaxAmount": totalTaxAmount,
                "voidDate": voidDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSalary"]) -> MetaOapg.properties.annualSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoAllocate"]) -> MetaOapg.properties.autoAllocate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusTotalHours"]) -> MetaOapg.properties.bonusTotalHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusTotalOTHours"]) -> MetaOapg.properties.bonusTotalOTHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkAddMode"]) -> MetaOapg.properties.checkAddMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkAmount"]) -> MetaOapg.properties.checkAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodFrequency"]) -> MetaOapg.properties.payPeriodFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directDepositAmount"]) -> MetaOapg.properties.directDepositAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentNumber"]) -> MetaOapg.properties.documentNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earningTaxReportingType"]) -> MetaOapg.properties.earningTaxReportingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatus"]) -> MetaOapg.properties.employeeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkId"]) -> MetaOapg.properties.checkId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourlyPayRate"]) -> MetaOapg.properties.hourlyPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRegularPayForCumulative"]) -> MetaOapg.properties.isRegularPayForCumulative: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVoided"]) -> MetaOapg.properties.isVoided: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVoidingRecord"]) -> MetaOapg.properties.isVoidingRecord: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCode"]) -> MetaOapg.properties.jobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRegularPayDate"]) -> MetaOapg.properties.lastRegularPayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationCode"]) -> MetaOapg.properties.locationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameFirst"]) -> MetaOapg.properties.nameFirst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameLast"]) -> MetaOapg.properties.nameLast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameMiddle"]) -> MetaOapg.properties.nameMiddle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameSuffix"]) -> MetaOapg.properties.nameSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netAmount"]) -> MetaOapg.properties.netAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationLevel1"]) -> MetaOapg.properties.organizationLevel1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationLevel2"]) -> MetaOapg.properties.organizationLevel2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationLevel3"]) -> MetaOapg.properties.organizationLevel3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationLevel4"]) -> MetaOapg.properties.organizationLevel4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalPayPeriodFrequency"]) -> MetaOapg.properties.originalPayPeriodFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodControl"]) -> MetaOapg.properties.periodControl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndDate"]) -> MetaOapg.properties.periodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStartDate"]) -> MetaOapg.properties.periodStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reconciled"]) -> MetaOapg.properties.reconciled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reconcileDate"]) -> MetaOapg.properties.reconcileDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequenceNumber"]) -> MetaOapg.properties.sequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift"]) -> MetaOapg.properties.shift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateSui"]) -> MetaOapg.properties.stateSui: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiGross"]) -> MetaOapg.properties.suiGross: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCalculationGroupID"]) -> MetaOapg.properties.taxCalculationGroupID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCalculationSequence"]) -> MetaOapg.properties.taxCalculationSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDeductionAmount"]) -> MetaOapg.properties.totalDeductionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalEarningsAmount"]) -> MetaOapg.properties.totalEarningsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalHours"]) -> MetaOapg.properties.totalHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalHoursWorked"]) -> MetaOapg.properties.totalHoursWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalShiftAmount"]) -> MetaOapg.properties.totalShiftAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalTaxAmount"]) -> MetaOapg.properties.totalTaxAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voidDate"]) -> MetaOapg.properties.voidDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annualSalary", "autoAllocate", "bonusTotalHours", "bonusTotalOTHours", "checkAddMode", "checkAmount", "companyId", "payPeriodFrequency", "currencyCode", "directDepositAmount", "documentNumber", "earningTaxReportingType", "employeeId", "employeeStatus", "employeeNumber", "checkId", "hourlyPayRate", "isRegularPayForCumulative", "isVoided", "isVoidingRecord", "jobCode", "lastRegularPayDate", "locationCode", "nameFirst", "nameLast", "nameMiddle", "nameSuffix", "netAmount", "organizationLevel1", "organizationLevel2", "organizationLevel3", "organizationLevel4", "originalPayPeriodFrequency", "payDate", "payGroup", "periodControl", "periodEndDate", "periodStartDate", "project", "reconciled", "reconcileDate", "sequenceNumber", "shift", "ssn", "stateSui", "suiGross", "taxCalculationGroupID", "taxCalculationSequence", "totalDeductionAmount", "totalEarningsAmount", "totalHours", "totalHoursWorked", "totalShiftAmount", "totalTaxAmount", "voidDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSalary"]) -> typing.Union[MetaOapg.properties.annualSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoAllocate"]) -> typing.Union[MetaOapg.properties.autoAllocate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusTotalHours"]) -> typing.Union[MetaOapg.properties.bonusTotalHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusTotalOTHours"]) -> typing.Union[MetaOapg.properties.bonusTotalOTHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkAddMode"]) -> typing.Union[MetaOapg.properties.checkAddMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkAmount"]) -> typing.Union[MetaOapg.properties.checkAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodFrequency"]) -> typing.Union[MetaOapg.properties.payPeriodFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directDepositAmount"]) -> typing.Union[MetaOapg.properties.directDepositAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentNumber"]) -> typing.Union[MetaOapg.properties.documentNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earningTaxReportingType"]) -> typing.Union[MetaOapg.properties.earningTaxReportingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatus"]) -> typing.Union[MetaOapg.properties.employeeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkId"]) -> typing.Union[MetaOapg.properties.checkId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourlyPayRate"]) -> typing.Union[MetaOapg.properties.hourlyPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRegularPayForCumulative"]) -> typing.Union[MetaOapg.properties.isRegularPayForCumulative, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVoided"]) -> typing.Union[MetaOapg.properties.isVoided, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVoidingRecord"]) -> typing.Union[MetaOapg.properties.isVoidingRecord, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCode"]) -> typing.Union[MetaOapg.properties.jobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRegularPayDate"]) -> typing.Union[MetaOapg.properties.lastRegularPayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationCode"]) -> typing.Union[MetaOapg.properties.locationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameFirst"]) -> typing.Union[MetaOapg.properties.nameFirst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameLast"]) -> typing.Union[MetaOapg.properties.nameLast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameMiddle"]) -> typing.Union[MetaOapg.properties.nameMiddle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameSuffix"]) -> typing.Union[MetaOapg.properties.nameSuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netAmount"]) -> typing.Union[MetaOapg.properties.netAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationLevel1"]) -> typing.Union[MetaOapg.properties.organizationLevel1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationLevel2"]) -> typing.Union[MetaOapg.properties.organizationLevel2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationLevel3"]) -> typing.Union[MetaOapg.properties.organizationLevel3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationLevel4"]) -> typing.Union[MetaOapg.properties.organizationLevel4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalPayPeriodFrequency"]) -> typing.Union[MetaOapg.properties.originalPayPeriodFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> typing.Union[MetaOapg.properties.payDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodControl"]) -> typing.Union[MetaOapg.properties.periodControl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndDate"]) -> typing.Union[MetaOapg.properties.periodEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStartDate"]) -> typing.Union[MetaOapg.properties.periodStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reconciled"]) -> typing.Union[MetaOapg.properties.reconciled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reconcileDate"]) -> typing.Union[MetaOapg.properties.reconcileDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequenceNumber"]) -> typing.Union[MetaOapg.properties.sequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift"]) -> typing.Union[MetaOapg.properties.shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateSui"]) -> typing.Union[MetaOapg.properties.stateSui, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiGross"]) -> typing.Union[MetaOapg.properties.suiGross, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCalculationGroupID"]) -> typing.Union[MetaOapg.properties.taxCalculationGroupID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCalculationSequence"]) -> typing.Union[MetaOapg.properties.taxCalculationSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDeductionAmount"]) -> typing.Union[MetaOapg.properties.totalDeductionAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalEarningsAmount"]) -> typing.Union[MetaOapg.properties.totalEarningsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalHours"]) -> typing.Union[MetaOapg.properties.totalHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalHoursWorked"]) -> typing.Union[MetaOapg.properties.totalHoursWorked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalShiftAmount"]) -> typing.Union[MetaOapg.properties.totalShiftAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalTaxAmount"]) -> typing.Union[MetaOapg.properties.totalTaxAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voidDate"]) -> typing.Union[MetaOapg.properties.voidDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annualSalary", "autoAllocate", "bonusTotalHours", "bonusTotalOTHours", "checkAddMode", "checkAmount", "companyId", "payPeriodFrequency", "currencyCode", "directDepositAmount", "documentNumber", "earningTaxReportingType", "employeeId", "employeeStatus", "employeeNumber", "checkId", "hourlyPayRate", "isRegularPayForCumulative", "isVoided", "isVoidingRecord", "jobCode", "lastRegularPayDate", "locationCode", "nameFirst", "nameLast", "nameMiddle", "nameSuffix", "netAmount", "organizationLevel1", "organizationLevel2", "organizationLevel3", "organizationLevel4", "originalPayPeriodFrequency", "payDate", "payGroup", "periodControl", "periodEndDate", "periodStartDate", "project", "reconciled", "reconcileDate", "sequenceNumber", "shift", "ssn", "stateSui", "suiGross", "taxCalculationGroupID", "taxCalculationSequence", "totalDeductionAmount", "totalEarningsAmount", "totalHours", "totalHoursWorked", "totalShiftAmount", "totalTaxAmount", "voidDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        annualSalary: typing.Union[MetaOapg.properties.annualSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        autoAllocate: typing.Union[MetaOapg.properties.autoAllocate, bool, schemas.Unset] = schemas.unset,
        bonusTotalHours: typing.Union[MetaOapg.properties.bonusTotalHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bonusTotalOTHours: typing.Union[MetaOapg.properties.bonusTotalOTHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        checkAddMode: typing.Union[MetaOapg.properties.checkAddMode, str, schemas.Unset] = schemas.unset,
        checkAmount: typing.Union[MetaOapg.properties.checkAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        payPeriodFrequency: typing.Union[MetaOapg.properties.payPeriodFrequency, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        directDepositAmount: typing.Union[MetaOapg.properties.directDepositAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        documentNumber: typing.Union[MetaOapg.properties.documentNumber, str, schemas.Unset] = schemas.unset,
        earningTaxReportingType: typing.Union[MetaOapg.properties.earningTaxReportingType, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeStatus: typing.Union[MetaOapg.properties.employeeStatus, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        checkId: typing.Union[MetaOapg.properties.checkId, str, schemas.Unset] = schemas.unset,
        hourlyPayRate: typing.Union[MetaOapg.properties.hourlyPayRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isRegularPayForCumulative: typing.Union[MetaOapg.properties.isRegularPayForCumulative, str, schemas.Unset] = schemas.unset,
        isVoided: typing.Union[MetaOapg.properties.isVoided, bool, schemas.Unset] = schemas.unset,
        isVoidingRecord: typing.Union[MetaOapg.properties.isVoidingRecord, bool, schemas.Unset] = schemas.unset,
        jobCode: typing.Union[MetaOapg.properties.jobCode, str, schemas.Unset] = schemas.unset,
        lastRegularPayDate: typing.Union[MetaOapg.properties.lastRegularPayDate, str, datetime, schemas.Unset] = schemas.unset,
        locationCode: typing.Union[MetaOapg.properties.locationCode, str, schemas.Unset] = schemas.unset,
        nameFirst: typing.Union[MetaOapg.properties.nameFirst, str, schemas.Unset] = schemas.unset,
        nameLast: typing.Union[MetaOapg.properties.nameLast, str, schemas.Unset] = schemas.unset,
        nameMiddle: typing.Union[MetaOapg.properties.nameMiddle, str, schemas.Unset] = schemas.unset,
        nameSuffix: typing.Union[MetaOapg.properties.nameSuffix, str, schemas.Unset] = schemas.unset,
        netAmount: typing.Union[MetaOapg.properties.netAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        organizationLevel1: typing.Union[MetaOapg.properties.organizationLevel1, str, schemas.Unset] = schemas.unset,
        organizationLevel2: typing.Union[MetaOapg.properties.organizationLevel2, str, schemas.Unset] = schemas.unset,
        organizationLevel3: typing.Union[MetaOapg.properties.organizationLevel3, str, schemas.Unset] = schemas.unset,
        organizationLevel4: typing.Union[MetaOapg.properties.organizationLevel4, str, schemas.Unset] = schemas.unset,
        originalPayPeriodFrequency: typing.Union[MetaOapg.properties.originalPayPeriodFrequency, str, schemas.Unset] = schemas.unset,
        payDate: typing.Union[MetaOapg.properties.payDate, str, datetime, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        periodControl: typing.Union[MetaOapg.properties.periodControl, str, schemas.Unset] = schemas.unset,
        periodEndDate: typing.Union[MetaOapg.properties.periodEndDate, str, datetime, schemas.Unset] = schemas.unset,
        periodStartDate: typing.Union[MetaOapg.properties.periodStartDate, str, datetime, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        reconciled: typing.Union[MetaOapg.properties.reconciled, str, schemas.Unset] = schemas.unset,
        reconcileDate: typing.Union[MetaOapg.properties.reconcileDate, str, datetime, schemas.Unset] = schemas.unset,
        sequenceNumber: typing.Union[MetaOapg.properties.sequenceNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shift: typing.Union[MetaOapg.properties.shift, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        stateSui: typing.Union[MetaOapg.properties.stateSui, str, schemas.Unset] = schemas.unset,
        suiGross: typing.Union[MetaOapg.properties.suiGross, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        taxCalculationGroupID: typing.Union[MetaOapg.properties.taxCalculationGroupID, str, schemas.Unset] = schemas.unset,
        taxCalculationSequence: typing.Union[MetaOapg.properties.taxCalculationSequence, str, schemas.Unset] = schemas.unset,
        totalDeductionAmount: typing.Union[MetaOapg.properties.totalDeductionAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalEarningsAmount: typing.Union[MetaOapg.properties.totalEarningsAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalHours: typing.Union[MetaOapg.properties.totalHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalHoursWorked: typing.Union[MetaOapg.properties.totalHoursWorked, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalShiftAmount: typing.Union[MetaOapg.properties.totalShiftAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalTaxAmount: typing.Union[MetaOapg.properties.totalTaxAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voidDate: typing.Union[MetaOapg.properties.voidDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayRegister':
        return super().__new__(
            cls,
            *args,
            annualSalary=annualSalary,
            autoAllocate=autoAllocate,
            bonusTotalHours=bonusTotalHours,
            bonusTotalOTHours=bonusTotalOTHours,
            checkAddMode=checkAddMode,
            checkAmount=checkAmount,
            companyId=companyId,
            payPeriodFrequency=payPeriodFrequency,
            currencyCode=currencyCode,
            directDepositAmount=directDepositAmount,
            documentNumber=documentNumber,
            earningTaxReportingType=earningTaxReportingType,
            employeeId=employeeId,
            employeeStatus=employeeStatus,
            employeeNumber=employeeNumber,
            checkId=checkId,
            hourlyPayRate=hourlyPayRate,
            isRegularPayForCumulative=isRegularPayForCumulative,
            isVoided=isVoided,
            isVoidingRecord=isVoidingRecord,
            jobCode=jobCode,
            lastRegularPayDate=lastRegularPayDate,
            locationCode=locationCode,
            nameFirst=nameFirst,
            nameLast=nameLast,
            nameMiddle=nameMiddle,
            nameSuffix=nameSuffix,
            netAmount=netAmount,
            organizationLevel1=organizationLevel1,
            organizationLevel2=organizationLevel2,
            organizationLevel3=organizationLevel3,
            organizationLevel4=organizationLevel4,
            originalPayPeriodFrequency=originalPayPeriodFrequency,
            payDate=payDate,
            payGroup=payGroup,
            periodControl=periodControl,
            periodEndDate=periodEndDate,
            periodStartDate=periodStartDate,
            project=project,
            reconciled=reconciled,
            reconcileDate=reconcileDate,
            sequenceNumber=sequenceNumber,
            shift=shift,
            ssn=ssn,
            stateSui=stateSui,
            suiGross=suiGross,
            taxCalculationGroupID=taxCalculationGroupID,
            taxCalculationSequence=taxCalculationSequence,
            totalDeductionAmount=totalDeductionAmount,
            totalEarningsAmount=totalEarningsAmount,
            totalHours=totalHours,
            totalHoursWorked=totalHoursWorked,
            totalShiftAmount=totalShiftAmount,
            totalTaxAmount=totalTaxAmount,
            voidDate=voidDate,
            _configuration=_configuration,
            **kwargs,
        )
