# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class PayrollDeductionsHistory(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            allowPartialDeduction = schemas.StrSchema
            batchID = schemas.StrSchema
            benefitAmount = schemas.NumberSchema
            benefitOption = schemas.StrSchema
            benefitProvider = schemas.StrSchema
            childSupportType = schemas.StrSchema
            companyId = schemas.StrSchema
            checkId = schemas.StrSchema
            currentArrearsAmount = schemas.NumberSchema
            customAmount1 = schemas.NumberSchema
            customAmount2 = schemas.NumberSchema
            customDate = schemas.DateTimeSchema
            deductionCalculationBasisAmt = schemas.NumberSchema
            deductionCode = schemas.StrSchema
            deductionForBonusOnly = schemas.StrSchema
            deductionPlanType = schemas.StrSchema
            deductionType = schemas.StrSchema
            deferredCompensationCap = schemas.NumberSchema
            deferredCompensationRegularCap = schemas.NumberSchema
            dependentRecordId = schemas.StrSchema
            employeeCalculationRateOrPercent = schemas.NumberSchema
            employeeCalculaitonRule = schemas.StrSchema
            employeeCurrentAmount = schemas.NumberSchema
            employeeDeductionLastPaid = schemas.DateTimeSchema
            employeeGoalAmount = schemas.NumberSchema
            employeeGoalRule = schemas.StrSchema
            employeeGoalToDateAmount = schemas.NumberSchema
            employeeId = schemas.StrSchema
            employeeOriginalAmount = schemas.NumberSchema
            employeeNumber = schemas.StrSchema
            employerAnnualCapCalculationRule = schemas.StrSchema
            employerCalculationRateOrPercent = schemas.NumberSchema
            employerCalculationRule = schemas.StrSchema
            employerCurrentAmount = schemas.NumberSchema
            employerPeriodCapCalculationRule = schemas.StrSchema
            excludeFromWorkersCompensation = schemas.StrSchema
            generalLedgerExpenseAccount = schemas.StrSchema
            generalLedgerPayAccount = schemas.StrSchema
            is401k = schemas.BoolSchema
            is403b = schemas.BoolSchema
            is408k = schemas.BoolSchema
            is408p = schemas.BoolSchema
            is457 = schemas.BoolSchema
            is457b = schemas.BoolSchema
            is457F = schemas.BoolSchema
            is501C = schemas.BoolSchema
            isD125 = schemas.BoolSchema
            isDeductionOffSet = schemas.BoolSchema
            isDeferredCompensation = schemas.BoolSchema
            isDependentCare = schemas.BoolSchema
            isHousing = schemas.BoolSchema
            isNonQualifiedPlan = schemas.BoolSchema
            isPublicEmployeeRetirement = schemas.BoolSchema
            isProrated = schemas.BoolSchema
            isSection125 = schemas.BoolSchema
            isVoided = schemas.BoolSchema
            isVoidingRecord = schemas.StrSchema
            payDate = schemas.DateTimeSchema
            payeeID = schemas.StrSchema
            payGroup = schemas.StrSchema
            periodControl = schemas.StrSchema
            recordId = schemas.NumberSchema
            taxCalculationGroupId = schemas.StrSchema
            taxCategory = schemas.StrSchema
            timeclockCode = schemas.StrSchema
            vendor = schemas.StrSchema
            wageGarnishmentAdditionalArrearageAmount = schemas.NumberSchema
            wageGarnishmentAllocateAsArrears = schemas.StrSchema
            wageGarnishmentAmountExempt = schemas.NumberSchema
            wageGarnishmentAmountExemptFromLevy = schemas.NumberSchema
            wageGarnishmentAmountExemtFromGarn = schemas.NumberSchema
            wageGarnishmentAmountSubjectToCS = schemas.NumberSchema
            wageGarnishmentAmountSubjectToGarnishment = schemas.NumberSchema
            wageGarnishmentDeductionTaxCategory = schemas.StrSchema
            wageGarnishmentDisposableIncome = schemas.NumberSchema
            wageGarnishmentMinimumWageFactor = schemas.NumberSchema
            wageGarnishmentWageCode = schemas.StrSchema
            yearToDateDeferredCompensationCombinedAmount = schemas.NumberSchema
            __annotations__ = {
                "allowPartialDeduction": allowPartialDeduction,
                "batchID": batchID,
                "benefitAmount": benefitAmount,
                "benefitOption": benefitOption,
                "benefitProvider": benefitProvider,
                "childSupportType": childSupportType,
                "companyId": companyId,
                "checkId": checkId,
                "currentArrearsAmount": currentArrearsAmount,
                "customAmount1": customAmount1,
                "customAmount2": customAmount2,
                "customDate": customDate,
                "deductionCalculationBasisAmt": deductionCalculationBasisAmt,
                "deductionCode": deductionCode,
                "deductionForBonusOnly": deductionForBonusOnly,
                "deductionPlanType": deductionPlanType,
                "deductionType": deductionType,
                "deferredCompensationCap": deferredCompensationCap,
                "deferredCompensationRegularCap": deferredCompensationRegularCap,
                "dependentRecordId": dependentRecordId,
                "employeeCalculationRateOrPercent": employeeCalculationRateOrPercent,
                "employeeCalculaitonRule": employeeCalculaitonRule,
                "employeeCurrentAmount": employeeCurrentAmount,
                "employeeDeductionLastPaid": employeeDeductionLastPaid,
                "employeeGoalAmount": employeeGoalAmount,
                "employeeGoalRule": employeeGoalRule,
                "employeeGoalToDateAmount": employeeGoalToDateAmount,
                "employeeId": employeeId,
                "employeeOriginalAmount": employeeOriginalAmount,
                "employeeNumber": employeeNumber,
                "employerAnnualCapCalculationRule": employerAnnualCapCalculationRule,
                "employerCalculationRateOrPercent": employerCalculationRateOrPercent,
                "employerCalculationRule": employerCalculationRule,
                "employerCurrentAmount": employerCurrentAmount,
                "employerPeriodCapCalculationRule": employerPeriodCapCalculationRule,
                "excludeFromWorkersCompensation": excludeFromWorkersCompensation,
                "generalLedgerExpenseAccount": generalLedgerExpenseAccount,
                "generalLedgerPayAccount": generalLedgerPayAccount,
                "is401k": is401k,
                "is403b": is403b,
                "is408k": is408k,
                "is408p": is408p,
                "is457": is457,
                "is457b": is457b,
                "is457F": is457F,
                "is501C": is501C,
                "isD125": isD125,
                "isDeductionOffSet": isDeductionOffSet,
                "isDeferredCompensation": isDeferredCompensation,
                "isDependentCare": isDependentCare,
                "isHousing": isHousing,
                "isNonQualifiedPlan": isNonQualifiedPlan,
                "isPublicEmployeeRetirement": isPublicEmployeeRetirement,
                "isProrated": isProrated,
                "isSection125": isSection125,
                "isVoided": isVoided,
                "isVoidingRecord": isVoidingRecord,
                "payDate": payDate,
                "payeeID": payeeID,
                "payGroup": payGroup,
                "periodControl": periodControl,
                "recordId": recordId,
                "taxCalculationGroupId": taxCalculationGroupId,
                "taxCategory": taxCategory,
                "timeclockCode": timeclockCode,
                "vendor": vendor,
                "wageGarnishmentAdditionalArrearageAmount": wageGarnishmentAdditionalArrearageAmount,
                "wageGarnishmentAllocateAsArrears": wageGarnishmentAllocateAsArrears,
                "wageGarnishmentAmountExempt": wageGarnishmentAmountExempt,
                "wageGarnishmentAmountExemptFromLevy": wageGarnishmentAmountExemptFromLevy,
                "wageGarnishmentAmountExemtFromGarn": wageGarnishmentAmountExemtFromGarn,
                "wageGarnishmentAmountSubjectToCS": wageGarnishmentAmountSubjectToCS,
                "wageGarnishmentAmountSubjectToGarnishment": wageGarnishmentAmountSubjectToGarnishment,
                "wageGarnishmentDeductionTaxCategory": wageGarnishmentDeductionTaxCategory,
                "wageGarnishmentDisposableIncome": wageGarnishmentDisposableIncome,
                "wageGarnishmentMinimumWageFactor": wageGarnishmentMinimumWageFactor,
                "wageGarnishmentWageCode": wageGarnishmentWageCode,
                "yearToDateDeferredCompensationCombinedAmount": yearToDateDeferredCompensationCombinedAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowPartialDeduction"]) -> MetaOapg.properties.allowPartialDeduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchID"]) -> MetaOapg.properties.batchID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmount"]) -> MetaOapg.properties.benefitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitOption"]) -> MetaOapg.properties.benefitOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitProvider"]) -> MetaOapg.properties.benefitProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childSupportType"]) -> MetaOapg.properties.childSupportType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkId"]) -> MetaOapg.properties.checkId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentArrearsAmount"]) -> MetaOapg.properties.currentArrearsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount1"]) -> MetaOapg.properties.customAmount1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount2"]) -> MetaOapg.properties.customAmount2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDate"]) -> MetaOapg.properties.customDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCalculationBasisAmt"]) -> MetaOapg.properties.deductionCalculationBasisAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionForBonusOnly"]) -> MetaOapg.properties.deductionForBonusOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionPlanType"]) -> MetaOapg.properties.deductionPlanType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionType"]) -> MetaOapg.properties.deductionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deferredCompensationCap"]) -> MetaOapg.properties.deferredCompensationCap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deferredCompensationRegularCap"]) -> MetaOapg.properties.deferredCompensationRegularCap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentRecordId"]) -> MetaOapg.properties.dependentRecordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCalculationRateOrPercent"]) -> MetaOapg.properties.employeeCalculationRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCalculaitonRule"]) -> MetaOapg.properties.employeeCalculaitonRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCurrentAmount"]) -> MetaOapg.properties.employeeCurrentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeDeductionLastPaid"]) -> MetaOapg.properties.employeeDeductionLastPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalAmount"]) -> MetaOapg.properties.employeeGoalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalRule"]) -> MetaOapg.properties.employeeGoalRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalToDateAmount"]) -> MetaOapg.properties.employeeGoalToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeOriginalAmount"]) -> MetaOapg.properties.employeeOriginalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerAnnualCapCalculationRule"]) -> MetaOapg.properties.employerAnnualCapCalculationRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalculationRateOrPercent"]) -> MetaOapg.properties.employerCalculationRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalculationRule"]) -> MetaOapg.properties.employerCalculationRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCurrentAmount"]) -> MetaOapg.properties.employerCurrentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerPeriodCapCalculationRule"]) -> MetaOapg.properties.employerPeriodCapCalculationRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeFromWorkersCompensation"]) -> MetaOapg.properties.excludeFromWorkersCompensation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generalLedgerExpenseAccount"]) -> MetaOapg.properties.generalLedgerExpenseAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generalLedgerPayAccount"]) -> MetaOapg.properties.generalLedgerPayAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is401k"]) -> MetaOapg.properties.is401k: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is403b"]) -> MetaOapg.properties.is403b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is408k"]) -> MetaOapg.properties.is408k: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is408p"]) -> MetaOapg.properties.is408p: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is457"]) -> MetaOapg.properties.is457: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is457b"]) -> MetaOapg.properties.is457b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is457F"]) -> MetaOapg.properties.is457F: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is501C"]) -> MetaOapg.properties.is501C: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isD125"]) -> MetaOapg.properties.isD125: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeductionOffSet"]) -> MetaOapg.properties.isDeductionOffSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeferredCompensation"]) -> MetaOapg.properties.isDeferredCompensation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDependentCare"]) -> MetaOapg.properties.isDependentCare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHousing"]) -> MetaOapg.properties.isHousing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNonQualifiedPlan"]) -> MetaOapg.properties.isNonQualifiedPlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublicEmployeeRetirement"]) -> MetaOapg.properties.isPublicEmployeeRetirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isProrated"]) -> MetaOapg.properties.isProrated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSection125"]) -> MetaOapg.properties.isSection125: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVoided"]) -> MetaOapg.properties.isVoided: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVoidingRecord"]) -> MetaOapg.properties.isVoidingRecord: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payeeID"]) -> MetaOapg.properties.payeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodControl"]) -> MetaOapg.properties.periodControl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordId"]) -> MetaOapg.properties.recordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCalculationGroupId"]) -> MetaOapg.properties.taxCalculationGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCategory"]) -> MetaOapg.properties.taxCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeclockCode"]) -> MetaOapg.properties.timeclockCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAdditionalArrearageAmount"]) -> MetaOapg.properties.wageGarnishmentAdditionalArrearageAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAllocateAsArrears"]) -> MetaOapg.properties.wageGarnishmentAllocateAsArrears: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAmountExempt"]) -> MetaOapg.properties.wageGarnishmentAmountExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAmountExemptFromLevy"]) -> MetaOapg.properties.wageGarnishmentAmountExemptFromLevy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAmountExemtFromGarn"]) -> MetaOapg.properties.wageGarnishmentAmountExemtFromGarn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAmountSubjectToCS"]) -> MetaOapg.properties.wageGarnishmentAmountSubjectToCS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentAmountSubjectToGarnishment"]) -> MetaOapg.properties.wageGarnishmentAmountSubjectToGarnishment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentDeductionTaxCategory"]) -> MetaOapg.properties.wageGarnishmentDeductionTaxCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentDisposableIncome"]) -> MetaOapg.properties.wageGarnishmentDisposableIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentMinimumWageFactor"]) -> MetaOapg.properties.wageGarnishmentMinimumWageFactor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wageGarnishmentWageCode"]) -> MetaOapg.properties.wageGarnishmentWageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearToDateDeferredCompensationCombinedAmount"]) -> MetaOapg.properties.yearToDateDeferredCompensationCombinedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowPartialDeduction", "batchID", "benefitAmount", "benefitOption", "benefitProvider", "childSupportType", "companyId", "checkId", "currentArrearsAmount", "customAmount1", "customAmount2", "customDate", "deductionCalculationBasisAmt", "deductionCode", "deductionForBonusOnly", "deductionPlanType", "deductionType", "deferredCompensationCap", "deferredCompensationRegularCap", "dependentRecordId", "employeeCalculationRateOrPercent", "employeeCalculaitonRule", "employeeCurrentAmount", "employeeDeductionLastPaid", "employeeGoalAmount", "employeeGoalRule", "employeeGoalToDateAmount", "employeeId", "employeeOriginalAmount", "employeeNumber", "employerAnnualCapCalculationRule", "employerCalculationRateOrPercent", "employerCalculationRule", "employerCurrentAmount", "employerPeriodCapCalculationRule", "excludeFromWorkersCompensation", "generalLedgerExpenseAccount", "generalLedgerPayAccount", "is401k", "is403b", "is408k", "is408p", "is457", "is457b", "is457F", "is501C", "isD125", "isDeductionOffSet", "isDeferredCompensation", "isDependentCare", "isHousing", "isNonQualifiedPlan", "isPublicEmployeeRetirement", "isProrated", "isSection125", "isVoided", "isVoidingRecord", "payDate", "payeeID", "payGroup", "periodControl", "recordId", "taxCalculationGroupId", "taxCategory", "timeclockCode", "vendor", "wageGarnishmentAdditionalArrearageAmount", "wageGarnishmentAllocateAsArrears", "wageGarnishmentAmountExempt", "wageGarnishmentAmountExemptFromLevy", "wageGarnishmentAmountExemtFromGarn", "wageGarnishmentAmountSubjectToCS", "wageGarnishmentAmountSubjectToGarnishment", "wageGarnishmentDeductionTaxCategory", "wageGarnishmentDisposableIncome", "wageGarnishmentMinimumWageFactor", "wageGarnishmentWageCode", "yearToDateDeferredCompensationCombinedAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowPartialDeduction"]) -> typing.Union[MetaOapg.properties.allowPartialDeduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchID"]) -> typing.Union[MetaOapg.properties.batchID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmount"]) -> typing.Union[MetaOapg.properties.benefitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitOption"]) -> typing.Union[MetaOapg.properties.benefitOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitProvider"]) -> typing.Union[MetaOapg.properties.benefitProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childSupportType"]) -> typing.Union[MetaOapg.properties.childSupportType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkId"]) -> typing.Union[MetaOapg.properties.checkId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentArrearsAmount"]) -> typing.Union[MetaOapg.properties.currentArrearsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount1"]) -> typing.Union[MetaOapg.properties.customAmount1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount2"]) -> typing.Union[MetaOapg.properties.customAmount2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDate"]) -> typing.Union[MetaOapg.properties.customDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCalculationBasisAmt"]) -> typing.Union[MetaOapg.properties.deductionCalculationBasisAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionForBonusOnly"]) -> typing.Union[MetaOapg.properties.deductionForBonusOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionPlanType"]) -> typing.Union[MetaOapg.properties.deductionPlanType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionType"]) -> typing.Union[MetaOapg.properties.deductionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deferredCompensationCap"]) -> typing.Union[MetaOapg.properties.deferredCompensationCap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deferredCompensationRegularCap"]) -> typing.Union[MetaOapg.properties.deferredCompensationRegularCap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentRecordId"]) -> typing.Union[MetaOapg.properties.dependentRecordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCalculationRateOrPercent"]) -> typing.Union[MetaOapg.properties.employeeCalculationRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCalculaitonRule"]) -> typing.Union[MetaOapg.properties.employeeCalculaitonRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCurrentAmount"]) -> typing.Union[MetaOapg.properties.employeeCurrentAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeDeductionLastPaid"]) -> typing.Union[MetaOapg.properties.employeeDeductionLastPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalAmount"]) -> typing.Union[MetaOapg.properties.employeeGoalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalRule"]) -> typing.Union[MetaOapg.properties.employeeGoalRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeGoalToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeOriginalAmount"]) -> typing.Union[MetaOapg.properties.employeeOriginalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerAnnualCapCalculationRule"]) -> typing.Union[MetaOapg.properties.employerAnnualCapCalculationRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalculationRateOrPercent"]) -> typing.Union[MetaOapg.properties.employerCalculationRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalculationRule"]) -> typing.Union[MetaOapg.properties.employerCalculationRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCurrentAmount"]) -> typing.Union[MetaOapg.properties.employerCurrentAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerPeriodCapCalculationRule"]) -> typing.Union[MetaOapg.properties.employerPeriodCapCalculationRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeFromWorkersCompensation"]) -> typing.Union[MetaOapg.properties.excludeFromWorkersCompensation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generalLedgerExpenseAccount"]) -> typing.Union[MetaOapg.properties.generalLedgerExpenseAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generalLedgerPayAccount"]) -> typing.Union[MetaOapg.properties.generalLedgerPayAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is401k"]) -> typing.Union[MetaOapg.properties.is401k, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is403b"]) -> typing.Union[MetaOapg.properties.is403b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is408k"]) -> typing.Union[MetaOapg.properties.is408k, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is408p"]) -> typing.Union[MetaOapg.properties.is408p, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is457"]) -> typing.Union[MetaOapg.properties.is457, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is457b"]) -> typing.Union[MetaOapg.properties.is457b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is457F"]) -> typing.Union[MetaOapg.properties.is457F, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is501C"]) -> typing.Union[MetaOapg.properties.is501C, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isD125"]) -> typing.Union[MetaOapg.properties.isD125, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeductionOffSet"]) -> typing.Union[MetaOapg.properties.isDeductionOffSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeferredCompensation"]) -> typing.Union[MetaOapg.properties.isDeferredCompensation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDependentCare"]) -> typing.Union[MetaOapg.properties.isDependentCare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHousing"]) -> typing.Union[MetaOapg.properties.isHousing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNonQualifiedPlan"]) -> typing.Union[MetaOapg.properties.isNonQualifiedPlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublicEmployeeRetirement"]) -> typing.Union[MetaOapg.properties.isPublicEmployeeRetirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isProrated"]) -> typing.Union[MetaOapg.properties.isProrated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSection125"]) -> typing.Union[MetaOapg.properties.isSection125, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVoided"]) -> typing.Union[MetaOapg.properties.isVoided, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVoidingRecord"]) -> typing.Union[MetaOapg.properties.isVoidingRecord, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> typing.Union[MetaOapg.properties.payDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payeeID"]) -> typing.Union[MetaOapg.properties.payeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodControl"]) -> typing.Union[MetaOapg.properties.periodControl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordId"]) -> typing.Union[MetaOapg.properties.recordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCalculationGroupId"]) -> typing.Union[MetaOapg.properties.taxCalculationGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCategory"]) -> typing.Union[MetaOapg.properties.taxCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeclockCode"]) -> typing.Union[MetaOapg.properties.timeclockCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAdditionalArrearageAmount"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAdditionalArrearageAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAllocateAsArrears"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAllocateAsArrears, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAmountExempt"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAmountExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAmountExemptFromLevy"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAmountExemptFromLevy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAmountExemtFromGarn"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAmountExemtFromGarn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAmountSubjectToCS"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAmountSubjectToCS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentAmountSubjectToGarnishment"]) -> typing.Union[MetaOapg.properties.wageGarnishmentAmountSubjectToGarnishment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentDeductionTaxCategory"]) -> typing.Union[MetaOapg.properties.wageGarnishmentDeductionTaxCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentDisposableIncome"]) -> typing.Union[MetaOapg.properties.wageGarnishmentDisposableIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentMinimumWageFactor"]) -> typing.Union[MetaOapg.properties.wageGarnishmentMinimumWageFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wageGarnishmentWageCode"]) -> typing.Union[MetaOapg.properties.wageGarnishmentWageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearToDateDeferredCompensationCombinedAmount"]) -> typing.Union[MetaOapg.properties.yearToDateDeferredCompensationCombinedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowPartialDeduction", "batchID", "benefitAmount", "benefitOption", "benefitProvider", "childSupportType", "companyId", "checkId", "currentArrearsAmount", "customAmount1", "customAmount2", "customDate", "deductionCalculationBasisAmt", "deductionCode", "deductionForBonusOnly", "deductionPlanType", "deductionType", "deferredCompensationCap", "deferredCompensationRegularCap", "dependentRecordId", "employeeCalculationRateOrPercent", "employeeCalculaitonRule", "employeeCurrentAmount", "employeeDeductionLastPaid", "employeeGoalAmount", "employeeGoalRule", "employeeGoalToDateAmount", "employeeId", "employeeOriginalAmount", "employeeNumber", "employerAnnualCapCalculationRule", "employerCalculationRateOrPercent", "employerCalculationRule", "employerCurrentAmount", "employerPeriodCapCalculationRule", "excludeFromWorkersCompensation", "generalLedgerExpenseAccount", "generalLedgerPayAccount", "is401k", "is403b", "is408k", "is408p", "is457", "is457b", "is457F", "is501C", "isD125", "isDeductionOffSet", "isDeferredCompensation", "isDependentCare", "isHousing", "isNonQualifiedPlan", "isPublicEmployeeRetirement", "isProrated", "isSection125", "isVoided", "isVoidingRecord", "payDate", "payeeID", "payGroup", "periodControl", "recordId", "taxCalculationGroupId", "taxCategory", "timeclockCode", "vendor", "wageGarnishmentAdditionalArrearageAmount", "wageGarnishmentAllocateAsArrears", "wageGarnishmentAmountExempt", "wageGarnishmentAmountExemptFromLevy", "wageGarnishmentAmountExemtFromGarn", "wageGarnishmentAmountSubjectToCS", "wageGarnishmentAmountSubjectToGarnishment", "wageGarnishmentDeductionTaxCategory", "wageGarnishmentDisposableIncome", "wageGarnishmentMinimumWageFactor", "wageGarnishmentWageCode", "yearToDateDeferredCompensationCombinedAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allowPartialDeduction: typing.Union[MetaOapg.properties.allowPartialDeduction, str, schemas.Unset] = schemas.unset,
        batchID: typing.Union[MetaOapg.properties.batchID, str, schemas.Unset] = schemas.unset,
        benefitAmount: typing.Union[MetaOapg.properties.benefitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitOption: typing.Union[MetaOapg.properties.benefitOption, str, schemas.Unset] = schemas.unset,
        benefitProvider: typing.Union[MetaOapg.properties.benefitProvider, str, schemas.Unset] = schemas.unset,
        childSupportType: typing.Union[MetaOapg.properties.childSupportType, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        checkId: typing.Union[MetaOapg.properties.checkId, str, schemas.Unset] = schemas.unset,
        currentArrearsAmount: typing.Union[MetaOapg.properties.currentArrearsAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customAmount1: typing.Union[MetaOapg.properties.customAmount1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customAmount2: typing.Union[MetaOapg.properties.customAmount2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customDate: typing.Union[MetaOapg.properties.customDate, str, datetime, schemas.Unset] = schemas.unset,
        deductionCalculationBasisAmt: typing.Union[MetaOapg.properties.deductionCalculationBasisAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        deductionForBonusOnly: typing.Union[MetaOapg.properties.deductionForBonusOnly, str, schemas.Unset] = schemas.unset,
        deductionPlanType: typing.Union[MetaOapg.properties.deductionPlanType, str, schemas.Unset] = schemas.unset,
        deductionType: typing.Union[MetaOapg.properties.deductionType, str, schemas.Unset] = schemas.unset,
        deferredCompensationCap: typing.Union[MetaOapg.properties.deferredCompensationCap, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deferredCompensationRegularCap: typing.Union[MetaOapg.properties.deferredCompensationRegularCap, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dependentRecordId: typing.Union[MetaOapg.properties.dependentRecordId, str, schemas.Unset] = schemas.unset,
        employeeCalculationRateOrPercent: typing.Union[MetaOapg.properties.employeeCalculationRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeCalculaitonRule: typing.Union[MetaOapg.properties.employeeCalculaitonRule, str, schemas.Unset] = schemas.unset,
        employeeCurrentAmount: typing.Union[MetaOapg.properties.employeeCurrentAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeDeductionLastPaid: typing.Union[MetaOapg.properties.employeeDeductionLastPaid, str, datetime, schemas.Unset] = schemas.unset,
        employeeGoalAmount: typing.Union[MetaOapg.properties.employeeGoalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeGoalRule: typing.Union[MetaOapg.properties.employeeGoalRule, str, schemas.Unset] = schemas.unset,
        employeeGoalToDateAmount: typing.Union[MetaOapg.properties.employeeGoalToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeOriginalAmount: typing.Union[MetaOapg.properties.employeeOriginalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        employerAnnualCapCalculationRule: typing.Union[MetaOapg.properties.employerAnnualCapCalculationRule, str, schemas.Unset] = schemas.unset,
        employerCalculationRateOrPercent: typing.Union[MetaOapg.properties.employerCalculationRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerCalculationRule: typing.Union[MetaOapg.properties.employerCalculationRule, str, schemas.Unset] = schemas.unset,
        employerCurrentAmount: typing.Union[MetaOapg.properties.employerCurrentAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerPeriodCapCalculationRule: typing.Union[MetaOapg.properties.employerPeriodCapCalculationRule, str, schemas.Unset] = schemas.unset,
        excludeFromWorkersCompensation: typing.Union[MetaOapg.properties.excludeFromWorkersCompensation, str, schemas.Unset] = schemas.unset,
        generalLedgerExpenseAccount: typing.Union[MetaOapg.properties.generalLedgerExpenseAccount, str, schemas.Unset] = schemas.unset,
        generalLedgerPayAccount: typing.Union[MetaOapg.properties.generalLedgerPayAccount, str, schemas.Unset] = schemas.unset,
        is401k: typing.Union[MetaOapg.properties.is401k, bool, schemas.Unset] = schemas.unset,
        is403b: typing.Union[MetaOapg.properties.is403b, bool, schemas.Unset] = schemas.unset,
        is408k: typing.Union[MetaOapg.properties.is408k, bool, schemas.Unset] = schemas.unset,
        is408p: typing.Union[MetaOapg.properties.is408p, bool, schemas.Unset] = schemas.unset,
        is457: typing.Union[MetaOapg.properties.is457, bool, schemas.Unset] = schemas.unset,
        is457b: typing.Union[MetaOapg.properties.is457b, bool, schemas.Unset] = schemas.unset,
        is457F: typing.Union[MetaOapg.properties.is457F, bool, schemas.Unset] = schemas.unset,
        is501C: typing.Union[MetaOapg.properties.is501C, bool, schemas.Unset] = schemas.unset,
        isD125: typing.Union[MetaOapg.properties.isD125, bool, schemas.Unset] = schemas.unset,
        isDeductionOffSet: typing.Union[MetaOapg.properties.isDeductionOffSet, bool, schemas.Unset] = schemas.unset,
        isDeferredCompensation: typing.Union[MetaOapg.properties.isDeferredCompensation, bool, schemas.Unset] = schemas.unset,
        isDependentCare: typing.Union[MetaOapg.properties.isDependentCare, bool, schemas.Unset] = schemas.unset,
        isHousing: typing.Union[MetaOapg.properties.isHousing, bool, schemas.Unset] = schemas.unset,
        isNonQualifiedPlan: typing.Union[MetaOapg.properties.isNonQualifiedPlan, bool, schemas.Unset] = schemas.unset,
        isPublicEmployeeRetirement: typing.Union[MetaOapg.properties.isPublicEmployeeRetirement, bool, schemas.Unset] = schemas.unset,
        isProrated: typing.Union[MetaOapg.properties.isProrated, bool, schemas.Unset] = schemas.unset,
        isSection125: typing.Union[MetaOapg.properties.isSection125, bool, schemas.Unset] = schemas.unset,
        isVoided: typing.Union[MetaOapg.properties.isVoided, bool, schemas.Unset] = schemas.unset,
        isVoidingRecord: typing.Union[MetaOapg.properties.isVoidingRecord, str, schemas.Unset] = schemas.unset,
        payDate: typing.Union[MetaOapg.properties.payDate, str, datetime, schemas.Unset] = schemas.unset,
        payeeID: typing.Union[MetaOapg.properties.payeeID, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        periodControl: typing.Union[MetaOapg.properties.periodControl, str, schemas.Unset] = schemas.unset,
        recordId: typing.Union[MetaOapg.properties.recordId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        taxCalculationGroupId: typing.Union[MetaOapg.properties.taxCalculationGroupId, str, schemas.Unset] = schemas.unset,
        taxCategory: typing.Union[MetaOapg.properties.taxCategory, str, schemas.Unset] = schemas.unset,
        timeclockCode: typing.Union[MetaOapg.properties.timeclockCode, str, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        wageGarnishmentAdditionalArrearageAmount: typing.Union[MetaOapg.properties.wageGarnishmentAdditionalArrearageAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentAllocateAsArrears: typing.Union[MetaOapg.properties.wageGarnishmentAllocateAsArrears, str, schemas.Unset] = schemas.unset,
        wageGarnishmentAmountExempt: typing.Union[MetaOapg.properties.wageGarnishmentAmountExempt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentAmountExemptFromLevy: typing.Union[MetaOapg.properties.wageGarnishmentAmountExemptFromLevy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentAmountExemtFromGarn: typing.Union[MetaOapg.properties.wageGarnishmentAmountExemtFromGarn, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentAmountSubjectToCS: typing.Union[MetaOapg.properties.wageGarnishmentAmountSubjectToCS, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentAmountSubjectToGarnishment: typing.Union[MetaOapg.properties.wageGarnishmentAmountSubjectToGarnishment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentDeductionTaxCategory: typing.Union[MetaOapg.properties.wageGarnishmentDeductionTaxCategory, str, schemas.Unset] = schemas.unset,
        wageGarnishmentDisposableIncome: typing.Union[MetaOapg.properties.wageGarnishmentDisposableIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentMinimumWageFactor: typing.Union[MetaOapg.properties.wageGarnishmentMinimumWageFactor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wageGarnishmentWageCode: typing.Union[MetaOapg.properties.wageGarnishmentWageCode, str, schemas.Unset] = schemas.unset,
        yearToDateDeferredCompensationCombinedAmount: typing.Union[MetaOapg.properties.yearToDateDeferredCompensationCombinedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollDeductionsHistory':
        return super().__new__(
            cls,
            *args,
            allowPartialDeduction=allowPartialDeduction,
            batchID=batchID,
            benefitAmount=benefitAmount,
            benefitOption=benefitOption,
            benefitProvider=benefitProvider,
            childSupportType=childSupportType,
            companyId=companyId,
            checkId=checkId,
            currentArrearsAmount=currentArrearsAmount,
            customAmount1=customAmount1,
            customAmount2=customAmount2,
            customDate=customDate,
            deductionCalculationBasisAmt=deductionCalculationBasisAmt,
            deductionCode=deductionCode,
            deductionForBonusOnly=deductionForBonusOnly,
            deductionPlanType=deductionPlanType,
            deductionType=deductionType,
            deferredCompensationCap=deferredCompensationCap,
            deferredCompensationRegularCap=deferredCompensationRegularCap,
            dependentRecordId=dependentRecordId,
            employeeCalculationRateOrPercent=employeeCalculationRateOrPercent,
            employeeCalculaitonRule=employeeCalculaitonRule,
            employeeCurrentAmount=employeeCurrentAmount,
            employeeDeductionLastPaid=employeeDeductionLastPaid,
            employeeGoalAmount=employeeGoalAmount,
            employeeGoalRule=employeeGoalRule,
            employeeGoalToDateAmount=employeeGoalToDateAmount,
            employeeId=employeeId,
            employeeOriginalAmount=employeeOriginalAmount,
            employeeNumber=employeeNumber,
            employerAnnualCapCalculationRule=employerAnnualCapCalculationRule,
            employerCalculationRateOrPercent=employerCalculationRateOrPercent,
            employerCalculationRule=employerCalculationRule,
            employerCurrentAmount=employerCurrentAmount,
            employerPeriodCapCalculationRule=employerPeriodCapCalculationRule,
            excludeFromWorkersCompensation=excludeFromWorkersCompensation,
            generalLedgerExpenseAccount=generalLedgerExpenseAccount,
            generalLedgerPayAccount=generalLedgerPayAccount,
            is401k=is401k,
            is403b=is403b,
            is408k=is408k,
            is408p=is408p,
            is457=is457,
            is457b=is457b,
            is457F=is457F,
            is501C=is501C,
            isD125=isD125,
            isDeductionOffSet=isDeductionOffSet,
            isDeferredCompensation=isDeferredCompensation,
            isDependentCare=isDependentCare,
            isHousing=isHousing,
            isNonQualifiedPlan=isNonQualifiedPlan,
            isPublicEmployeeRetirement=isPublicEmployeeRetirement,
            isProrated=isProrated,
            isSection125=isSection125,
            isVoided=isVoided,
            isVoidingRecord=isVoidingRecord,
            payDate=payDate,
            payeeID=payeeID,
            payGroup=payGroup,
            periodControl=periodControl,
            recordId=recordId,
            taxCalculationGroupId=taxCalculationGroupId,
            taxCategory=taxCategory,
            timeclockCode=timeclockCode,
            vendor=vendor,
            wageGarnishmentAdditionalArrearageAmount=wageGarnishmentAdditionalArrearageAmount,
            wageGarnishmentAllocateAsArrears=wageGarnishmentAllocateAsArrears,
            wageGarnishmentAmountExempt=wageGarnishmentAmountExempt,
            wageGarnishmentAmountExemptFromLevy=wageGarnishmentAmountExemptFromLevy,
            wageGarnishmentAmountExemtFromGarn=wageGarnishmentAmountExemtFromGarn,
            wageGarnishmentAmountSubjectToCS=wageGarnishmentAmountSubjectToCS,
            wageGarnishmentAmountSubjectToGarnishment=wageGarnishmentAmountSubjectToGarnishment,
            wageGarnishmentDeductionTaxCategory=wageGarnishmentDeductionTaxCategory,
            wageGarnishmentDisposableIncome=wageGarnishmentDisposableIncome,
            wageGarnishmentMinimumWageFactor=wageGarnishmentMinimumWageFactor,
            wageGarnishmentWageCode=wageGarnishmentWageCode,
            yearToDateDeferredCompensationCombinedAmount=yearToDateDeferredCompensationCombinedAmount,
            _configuration=_configuration,
            **kwargs,
        )
