# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class TimeOffRequestDayDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            requestId = schemas.Int64Schema
            date = schemas.DateTimeSchema
            _from = schemas.Int32Schema
            to = schemas.Int32Schema
            fullDay = schemas.BoolSchema
            status = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['TimeOffTypeDto']:
                return TimeOffTypeDto
        
            @staticmethod
            def reason() -> typing.Type['TimeOffReasonDto']:
                return TimeOffReasonDto
            empComment = schemas.StrSchema
            conclusionDate = schemas.DateTimeSchema
            conclusionComment = schemas.StrSchema
            payInAdv = schemas.BoolSchema
            submittedDate = schemas.DateTimeSchema
            empId = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "requestId": requestId,
                "date": date,
                "from": _from,
                "to": to,
                "fullDay": fullDay,
                "status": status,
                "type": type,
                "reason": reason,
                "empComment": empComment,
                "conclusionDate": conclusionDate,
                "conclusionComment": conclusionComment,
                "payInAdv": payInAdv,
                "submittedDate": submittedDate,
                "empId": empId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullDay"]) -> MetaOapg.properties.fullDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TimeOffTypeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'TimeOffReasonDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empComment"]) -> MetaOapg.properties.empComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conclusionDate"]) -> MetaOapg.properties.conclusionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conclusionComment"]) -> MetaOapg.properties.conclusionComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payInAdv"]) -> MetaOapg.properties.payInAdv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submittedDate"]) -> MetaOapg.properties.submittedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empId"]) -> MetaOapg.properties.empId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "requestId", "date", "from", "to", "fullDay", "status", "type", "reason", "empComment", "conclusionDate", "conclusionComment", "payInAdv", "submittedDate", "empId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> typing.Union[MetaOapg.properties.requestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullDay"]) -> typing.Union[MetaOapg.properties.fullDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['TimeOffTypeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union['TimeOffReasonDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empComment"]) -> typing.Union[MetaOapg.properties.empComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conclusionDate"]) -> typing.Union[MetaOapg.properties.conclusionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conclusionComment"]) -> typing.Union[MetaOapg.properties.conclusionComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payInAdv"]) -> typing.Union[MetaOapg.properties.payInAdv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submittedDate"]) -> typing.Union[MetaOapg.properties.submittedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empId"]) -> typing.Union[MetaOapg.properties.empId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "requestId", "date", "from", "to", "fullDay", "status", "type", "reason", "empComment", "conclusionDate", "conclusionComment", "payInAdv", "submittedDate", "empId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requestId: typing.Union[MetaOapg.properties.requestId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fullDay: typing.Union[MetaOapg.properties.fullDay, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        type: typing.Union['TimeOffTypeDto', schemas.Unset] = schemas.unset,
        reason: typing.Union['TimeOffReasonDto', schemas.Unset] = schemas.unset,
        empComment: typing.Union[MetaOapg.properties.empComment, str, schemas.Unset] = schemas.unset,
        conclusionDate: typing.Union[MetaOapg.properties.conclusionDate, str, datetime, schemas.Unset] = schemas.unset,
        conclusionComment: typing.Union[MetaOapg.properties.conclusionComment, str, schemas.Unset] = schemas.unset,
        payInAdv: typing.Union[MetaOapg.properties.payInAdv, bool, schemas.Unset] = schemas.unset,
        submittedDate: typing.Union[MetaOapg.properties.submittedDate, str, datetime, schemas.Unset] = schemas.unset,
        empId: typing.Union[MetaOapg.properties.empId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffRequestDayDto':
        return super().__new__(
            cls,
            *args,
            id=id,
            requestId=requestId,
            date=date,
            to=to,
            fullDay=fullDay,
            status=status,
            type=type,
            reason=reason,
            empComment=empComment,
            conclusionDate=conclusionDate,
            conclusionComment=conclusionComment,
            payInAdv=payInAdv,
            submittedDate=submittedDate,
            empId=empId,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.time_off_reason_dto import TimeOffReasonDto
from ukg_python_sdk.model.time_off_type_dto import TimeOffTypeDto
