# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            empId = schemas.Int64Schema
            empName = schemas.StrSchema
            teamName = schemas.StrSchema
            eeId = schemas.StrSchema
            coId = schemas.StrSchema
            __annotations__ = {
                "empId": empId,
                "empName": empName,
                "teamName": teamName,
                "eeId": eeId,
                "coId": coId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empId"]) -> MetaOapg.properties.empId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empName"]) -> MetaOapg.properties.empName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamName"]) -> MetaOapg.properties.teamName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eeId"]) -> MetaOapg.properties.eeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coId"]) -> MetaOapg.properties.coId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["empId", "empName", "teamName", "eeId", "coId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empId"]) -> typing.Union[MetaOapg.properties.empId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empName"]) -> typing.Union[MetaOapg.properties.empName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamName"]) -> typing.Union[MetaOapg.properties.teamName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eeId"]) -> typing.Union[MetaOapg.properties.eeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coId"]) -> typing.Union[MetaOapg.properties.coId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["empId", "empName", "teamName", "eeId", "coId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        empId: typing.Union[MetaOapg.properties.empId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        empName: typing.Union[MetaOapg.properties.empName, str, schemas.Unset] = schemas.unset,
        teamName: typing.Union[MetaOapg.properties.teamName, str, schemas.Unset] = schemas.unset,
        eeId: typing.Union[MetaOapg.properties.eeId, str, schemas.Unset] = schemas.unset,
        coId: typing.Union[MetaOapg.properties.coId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeDto':
        return super().__new__(
            cls,
            *args,
            empId=empId,
            empName=empName,
            teamName=teamName,
            eeId=eeId,
            coId=coId,
            _configuration=_configuration,
            **kwargs,
        )
