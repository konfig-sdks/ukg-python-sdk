# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeGlobalBanksModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            bankId = schemas.StrSchema
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            payGroup = schemas.StrSchema
            currencyCode = schemas.StrSchema
            fundingMethod = schemas.StrSchema
            fundingMethodDescription = schemas.StrSchema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            addressLine3 = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            postalCode = schemas.StrSchema
            country = schemas.StrSchema
            bankName = schemas.StrSchema
            bankBranch = schemas.StrSchema
            bankCountryCode = schemas.StrSchema
            beneficiaryName = schemas.StrSchema
            bankAccountType = schemas.StrSchema
            bankAccountTypeDescription = schemas.StrSchema
            bankAccountNumber = schemas.StrSchema
            iban = schemas.StrSchema
            swiftCode = schemas.StrSchema
            bankRequirement1 = schemas.StrSchema
            bankRequirement2 = schemas.StrSchema
            bankRequirement3 = schemas.StrSchema
            dateModified = schemas.DateTimeSchema
            bankRequestCode1 = schemas.StrSchema
            bankRequestLabel1 = schemas.StrSchema
            bankRequestCode2 = schemas.StrSchema
            bankRequestLabel2 = schemas.StrSchema
            bankRequestCode3 = schemas.StrSchema
            bankRequestLabel3 = schemas.StrSchema
            employeeCountry = schemas.StrSchema
            __annotations__ = {
                "bankId": bankId,
                "employeeId": employeeId,
                "companyId": companyId,
                "employeeNumber": employeeNumber,
                "payGroup": payGroup,
                "currencyCode": currencyCode,
                "fundingMethod": fundingMethod,
                "fundingMethodDescription": fundingMethodDescription,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "addressLine3": addressLine3,
                "city": city,
                "state": state,
                "postalCode": postalCode,
                "country": country,
                "bankName": bankName,
                "bankBranch": bankBranch,
                "bankCountryCode": bankCountryCode,
                "beneficiaryName": beneficiaryName,
                "bankAccountType": bankAccountType,
                "bankAccountTypeDescription": bankAccountTypeDescription,
                "bankAccountNumber": bankAccountNumber,
                "iban": iban,
                "swiftCode": swiftCode,
                "bankRequirement1": bankRequirement1,
                "bankRequirement2": bankRequirement2,
                "bankRequirement3": bankRequirement3,
                "dateModified": dateModified,
                "bankRequestCode1": bankRequestCode1,
                "bankRequestLabel1": bankRequestLabel1,
                "bankRequestCode2": bankRequestCode2,
                "bankRequestLabel2": bankRequestLabel2,
                "bankRequestCode3": bankRequestCode3,
                "bankRequestLabel3": bankRequestLabel3,
                "employeeCountry": employeeCountry,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankId"]) -> MetaOapg.properties.bankId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fundingMethod"]) -> MetaOapg.properties.fundingMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fundingMethodDescription"]) -> MetaOapg.properties.fundingMethodDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine3"]) -> MetaOapg.properties.addressLine3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankName"]) -> MetaOapg.properties.bankName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankBranch"]) -> MetaOapg.properties.bankBranch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankCountryCode"]) -> MetaOapg.properties.bankCountryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryName"]) -> MetaOapg.properties.beneficiaryName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountType"]) -> MetaOapg.properties.bankAccountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountTypeDescription"]) -> MetaOapg.properties.bankAccountTypeDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountNumber"]) -> MetaOapg.properties.bankAccountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swiftCode"]) -> MetaOapg.properties.swiftCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequirement1"]) -> MetaOapg.properties.bankRequirement1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequirement2"]) -> MetaOapg.properties.bankRequirement2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequirement3"]) -> MetaOapg.properties.bankRequirement3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestCode1"]) -> MetaOapg.properties.bankRequestCode1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestLabel1"]) -> MetaOapg.properties.bankRequestLabel1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestCode2"]) -> MetaOapg.properties.bankRequestCode2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestLabel2"]) -> MetaOapg.properties.bankRequestLabel2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestCode3"]) -> MetaOapg.properties.bankRequestCode3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankRequestLabel3"]) -> MetaOapg.properties.bankRequestLabel3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCountry"]) -> MetaOapg.properties.employeeCountry: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bankId", "employeeId", "companyId", "employeeNumber", "payGroup", "currencyCode", "fundingMethod", "fundingMethodDescription", "addressLine1", "addressLine2", "addressLine3", "city", "state", "postalCode", "country", "bankName", "bankBranch", "bankCountryCode", "beneficiaryName", "bankAccountType", "bankAccountTypeDescription", "bankAccountNumber", "iban", "swiftCode", "bankRequirement1", "bankRequirement2", "bankRequirement3", "dateModified", "bankRequestCode1", "bankRequestLabel1", "bankRequestCode2", "bankRequestLabel2", "bankRequestCode3", "bankRequestLabel3", "employeeCountry", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankId"]) -> typing.Union[MetaOapg.properties.bankId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fundingMethod"]) -> typing.Union[MetaOapg.properties.fundingMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fundingMethodDescription"]) -> typing.Union[MetaOapg.properties.fundingMethodDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine3"]) -> typing.Union[MetaOapg.properties.addressLine3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankName"]) -> typing.Union[MetaOapg.properties.bankName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankBranch"]) -> typing.Union[MetaOapg.properties.bankBranch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankCountryCode"]) -> typing.Union[MetaOapg.properties.bankCountryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryName"]) -> typing.Union[MetaOapg.properties.beneficiaryName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountType"]) -> typing.Union[MetaOapg.properties.bankAccountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountTypeDescription"]) -> typing.Union[MetaOapg.properties.bankAccountTypeDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountNumber"]) -> typing.Union[MetaOapg.properties.bankAccountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> typing.Union[MetaOapg.properties.iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swiftCode"]) -> typing.Union[MetaOapg.properties.swiftCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequirement1"]) -> typing.Union[MetaOapg.properties.bankRequirement1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequirement2"]) -> typing.Union[MetaOapg.properties.bankRequirement2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequirement3"]) -> typing.Union[MetaOapg.properties.bankRequirement3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> typing.Union[MetaOapg.properties.dateModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestCode1"]) -> typing.Union[MetaOapg.properties.bankRequestCode1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestLabel1"]) -> typing.Union[MetaOapg.properties.bankRequestLabel1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestCode2"]) -> typing.Union[MetaOapg.properties.bankRequestCode2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestLabel2"]) -> typing.Union[MetaOapg.properties.bankRequestLabel2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestCode3"]) -> typing.Union[MetaOapg.properties.bankRequestCode3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankRequestLabel3"]) -> typing.Union[MetaOapg.properties.bankRequestLabel3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCountry"]) -> typing.Union[MetaOapg.properties.employeeCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bankId", "employeeId", "companyId", "employeeNumber", "payGroup", "currencyCode", "fundingMethod", "fundingMethodDescription", "addressLine1", "addressLine2", "addressLine3", "city", "state", "postalCode", "country", "bankName", "bankBranch", "bankCountryCode", "beneficiaryName", "bankAccountType", "bankAccountTypeDescription", "bankAccountNumber", "iban", "swiftCode", "bankRequirement1", "bankRequirement2", "bankRequirement3", "dateModified", "bankRequestCode1", "bankRequestLabel1", "bankRequestCode2", "bankRequestLabel2", "bankRequestCode3", "bankRequestLabel3", "employeeCountry", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bankId: typing.Union[MetaOapg.properties.bankId, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        fundingMethod: typing.Union[MetaOapg.properties.fundingMethod, str, schemas.Unset] = schemas.unset,
        fundingMethodDescription: typing.Union[MetaOapg.properties.fundingMethodDescription, str, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        addressLine3: typing.Union[MetaOapg.properties.addressLine3, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        bankName: typing.Union[MetaOapg.properties.bankName, str, schemas.Unset] = schemas.unset,
        bankBranch: typing.Union[MetaOapg.properties.bankBranch, str, schemas.Unset] = schemas.unset,
        bankCountryCode: typing.Union[MetaOapg.properties.bankCountryCode, str, schemas.Unset] = schemas.unset,
        beneficiaryName: typing.Union[MetaOapg.properties.beneficiaryName, str, schemas.Unset] = schemas.unset,
        bankAccountType: typing.Union[MetaOapg.properties.bankAccountType, str, schemas.Unset] = schemas.unset,
        bankAccountTypeDescription: typing.Union[MetaOapg.properties.bankAccountTypeDescription, str, schemas.Unset] = schemas.unset,
        bankAccountNumber: typing.Union[MetaOapg.properties.bankAccountNumber, str, schemas.Unset] = schemas.unset,
        iban: typing.Union[MetaOapg.properties.iban, str, schemas.Unset] = schemas.unset,
        swiftCode: typing.Union[MetaOapg.properties.swiftCode, str, schemas.Unset] = schemas.unset,
        bankRequirement1: typing.Union[MetaOapg.properties.bankRequirement1, str, schemas.Unset] = schemas.unset,
        bankRequirement2: typing.Union[MetaOapg.properties.bankRequirement2, str, schemas.Unset] = schemas.unset,
        bankRequirement3: typing.Union[MetaOapg.properties.bankRequirement3, str, schemas.Unset] = schemas.unset,
        dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, schemas.Unset] = schemas.unset,
        bankRequestCode1: typing.Union[MetaOapg.properties.bankRequestCode1, str, schemas.Unset] = schemas.unset,
        bankRequestLabel1: typing.Union[MetaOapg.properties.bankRequestLabel1, str, schemas.Unset] = schemas.unset,
        bankRequestCode2: typing.Union[MetaOapg.properties.bankRequestCode2, str, schemas.Unset] = schemas.unset,
        bankRequestLabel2: typing.Union[MetaOapg.properties.bankRequestLabel2, str, schemas.Unset] = schemas.unset,
        bankRequestCode3: typing.Union[MetaOapg.properties.bankRequestCode3, str, schemas.Unset] = schemas.unset,
        bankRequestLabel3: typing.Union[MetaOapg.properties.bankRequestLabel3, str, schemas.Unset] = schemas.unset,
        employeeCountry: typing.Union[MetaOapg.properties.employeeCountry, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeGlobalBanksModel':
        return super().__new__(
            cls,
            *args,
            bankId=bankId,
            employeeId=employeeId,
            companyId=companyId,
            employeeNumber=employeeNumber,
            payGroup=payGroup,
            currencyCode=currencyCode,
            fundingMethod=fundingMethod,
            fundingMethodDescription=fundingMethodDescription,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            addressLine3=addressLine3,
            city=city,
            state=state,
            postalCode=postalCode,
            country=country,
            bankName=bankName,
            bankBranch=bankBranch,
            bankCountryCode=bankCountryCode,
            beneficiaryName=beneficiaryName,
            bankAccountType=bankAccountType,
            bankAccountTypeDescription=bankAccountTypeDescription,
            bankAccountNumber=bankAccountNumber,
            iban=iban,
            swiftCode=swiftCode,
            bankRequirement1=bankRequirement1,
            bankRequirement2=bankRequirement2,
            bankRequirement3=bankRequirement3,
            dateModified=dateModified,
            bankRequestCode1=bankRequestCode1,
            bankRequestLabel1=bankRequestLabel1,
            bankRequestCode2=bankRequestCode2,
            bankRequestLabel2=bankRequestLabel2,
            bankRequestCode3=bankRequestCode3,
            bankRequestLabel3=bankRequestLabel3,
            employeeCountry=employeeCountry,
            _configuration=_configuration,
            **kwargs,
        )
