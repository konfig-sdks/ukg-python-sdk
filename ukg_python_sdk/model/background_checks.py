# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class BackgroundChecks(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "application",
            "author",
            "order_number",
            "packages",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def author() -> typing.Type['BackgroundChecksAuthor']:
                return BackgroundChecksAuthor
        
            @staticmethod
            def application() -> typing.Type['BackgroundChecksApplication']:
                return BackgroundChecksApplication
            status = schemas.StrSchema
            order_number = schemas.StrSchema
        
            @staticmethod
            def packages() -> typing.Type['BackgroundChecksPackages']:
                return BackgroundChecksPackages
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Links']:
                        return Links
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Links'], typing.List['Links']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Links':
                    return super().__getitem__(i)
            __annotations__ = {
                "author": author,
                "application": application,
                "status": status,
                "order_number": order_number,
                "packages": packages,
                "links": links,
            }
    
    application: 'BackgroundChecksApplication'
    author: 'BackgroundChecksAuthor'
    order_number: MetaOapg.properties.order_number
    packages: 'BackgroundChecksPackages'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'BackgroundChecksAuthor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application"]) -> 'BackgroundChecksApplication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_number"]) -> MetaOapg.properties.order_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packages"]) -> 'BackgroundChecksPackages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["author", "application", "status", "order_number", "packages", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> 'BackgroundChecksAuthor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application"]) -> 'BackgroundChecksApplication': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_number"]) -> MetaOapg.properties.order_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packages"]) -> 'BackgroundChecksPackages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["author", "application", "status", "order_number", "packages", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        application: 'BackgroundChecksApplication',
        author: 'BackgroundChecksAuthor',
        order_number: typing.Union[MetaOapg.properties.order_number, str, ],
        packages: 'BackgroundChecksPackages',
        status: typing.Union[MetaOapg.properties.status, str, ],
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BackgroundChecks':
        return super().__new__(
            cls,
            *args,
            application=application,
            author=author,
            order_number=order_number,
            packages=packages,
            status=status,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.background_checks_application import BackgroundChecksApplication
from ukg_python_sdk.model.background_checks_author import BackgroundChecksAuthor
from ukg_python_sdk.model.background_checks_packages import BackgroundChecksPackages
from ukg_python_sdk.model.links import Links
