# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class DirectDepositModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            account = schemas.StrSchema
            accountType = schemas.StrSchema
            amountOrPercent = schemas.Float64Schema
            companyId = schemas.StrSchema
            directDepositOrPrenote = schemas.StrSchema
            depositRule = schemas.StrSchema
            employeeBankId = schemas.StrSchema
            employeeBankName = schemas.StrSchema
            employeeBankRoutingNumber = schemas.StrSchema
            employeeId = schemas.StrSchema
            firstPrenotePayDate = schemas.DateTimeSchema
            sequenceNumber = schemas.StrSchema
            employeeInstitutionNumber = schemas.StrSchema
            countryCode = schemas.StrSchema
            foreignAccountNumber = schemas.StrSchema
            foreignAccountNumberType = schemas.StrSchema
            accountRecordId = schemas.UUIDSchema
            dateTimeChanged = schemas.DateTimeSchema
            accountIsInactive = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "account": account,
                "accountType": accountType,
                "amountOrPercent": amountOrPercent,
                "companyId": companyId,
                "directDepositOrPrenote": directDepositOrPrenote,
                "depositRule": depositRule,
                "employeeBankId": employeeBankId,
                "employeeBankName": employeeBankName,
                "employeeBankRoutingNumber": employeeBankRoutingNumber,
                "employeeId": employeeId,
                "firstPrenotePayDate": firstPrenotePayDate,
                "sequenceNumber": sequenceNumber,
                "employeeInstitutionNumber": employeeInstitutionNumber,
                "countryCode": countryCode,
                "foreignAccountNumber": foreignAccountNumber,
                "foreignAccountNumberType": foreignAccountNumberType,
                "accountRecordId": accountRecordId,
                "dateTimeChanged": dateTimeChanged,
                "accountIsInactive": accountIsInactive,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountOrPercent"]) -> MetaOapg.properties.amountOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directDepositOrPrenote"]) -> MetaOapg.properties.directDepositOrPrenote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depositRule"]) -> MetaOapg.properties.depositRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeBankId"]) -> MetaOapg.properties.employeeBankId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeBankName"]) -> MetaOapg.properties.employeeBankName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeBankRoutingNumber"]) -> MetaOapg.properties.employeeBankRoutingNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstPrenotePayDate"]) -> MetaOapg.properties.firstPrenotePayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequenceNumber"]) -> MetaOapg.properties.sequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeInstitutionNumber"]) -> MetaOapg.properties.employeeInstitutionNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreignAccountNumber"]) -> MetaOapg.properties.foreignAccountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreignAccountNumberType"]) -> MetaOapg.properties.foreignAccountNumberType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountRecordId"]) -> MetaOapg.properties.accountRecordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountIsInactive"]) -> MetaOapg.properties.accountIsInactive: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "account", "accountType", "amountOrPercent", "companyId", "directDepositOrPrenote", "depositRule", "employeeBankId", "employeeBankName", "employeeBankRoutingNumber", "employeeId", "firstPrenotePayDate", "sequenceNumber", "employeeInstitutionNumber", "countryCode", "foreignAccountNumber", "foreignAccountNumberType", "accountRecordId", "dateTimeChanged", "accountIsInactive", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> typing.Union[MetaOapg.properties.accountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountOrPercent"]) -> typing.Union[MetaOapg.properties.amountOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directDepositOrPrenote"]) -> typing.Union[MetaOapg.properties.directDepositOrPrenote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depositRule"]) -> typing.Union[MetaOapg.properties.depositRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeBankId"]) -> typing.Union[MetaOapg.properties.employeeBankId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeBankName"]) -> typing.Union[MetaOapg.properties.employeeBankName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeBankRoutingNumber"]) -> typing.Union[MetaOapg.properties.employeeBankRoutingNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstPrenotePayDate"]) -> typing.Union[MetaOapg.properties.firstPrenotePayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequenceNumber"]) -> typing.Union[MetaOapg.properties.sequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeInstitutionNumber"]) -> typing.Union[MetaOapg.properties.employeeInstitutionNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreignAccountNumber"]) -> typing.Union[MetaOapg.properties.foreignAccountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreignAccountNumberType"]) -> typing.Union[MetaOapg.properties.foreignAccountNumberType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountRecordId"]) -> typing.Union[MetaOapg.properties.accountRecordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountIsInactive"]) -> typing.Union[MetaOapg.properties.accountIsInactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "account", "accountType", "amountOrPercent", "companyId", "directDepositOrPrenote", "depositRule", "employeeBankId", "employeeBankName", "employeeBankRoutingNumber", "employeeId", "firstPrenotePayDate", "sequenceNumber", "employeeInstitutionNumber", "countryCode", "foreignAccountNumber", "foreignAccountNumberType", "accountRecordId", "dateTimeChanged", "accountIsInactive", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        accountType: typing.Union[MetaOapg.properties.accountType, str, schemas.Unset] = schemas.unset,
        amountOrPercent: typing.Union[MetaOapg.properties.amountOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        directDepositOrPrenote: typing.Union[MetaOapg.properties.directDepositOrPrenote, str, schemas.Unset] = schemas.unset,
        depositRule: typing.Union[MetaOapg.properties.depositRule, str, schemas.Unset] = schemas.unset,
        employeeBankId: typing.Union[MetaOapg.properties.employeeBankId, str, schemas.Unset] = schemas.unset,
        employeeBankName: typing.Union[MetaOapg.properties.employeeBankName, str, schemas.Unset] = schemas.unset,
        employeeBankRoutingNumber: typing.Union[MetaOapg.properties.employeeBankRoutingNumber, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        firstPrenotePayDate: typing.Union[MetaOapg.properties.firstPrenotePayDate, str, datetime, schemas.Unset] = schemas.unset,
        sequenceNumber: typing.Union[MetaOapg.properties.sequenceNumber, str, schemas.Unset] = schemas.unset,
        employeeInstitutionNumber: typing.Union[MetaOapg.properties.employeeInstitutionNumber, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        foreignAccountNumber: typing.Union[MetaOapg.properties.foreignAccountNumber, str, schemas.Unset] = schemas.unset,
        foreignAccountNumberType: typing.Union[MetaOapg.properties.foreignAccountNumberType, str, schemas.Unset] = schemas.unset,
        accountRecordId: typing.Union[MetaOapg.properties.accountRecordId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        accountIsInactive: typing.Union[MetaOapg.properties.accountIsInactive, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DirectDepositModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            account=account,
            accountType=accountType,
            amountOrPercent=amountOrPercent,
            companyId=companyId,
            directDepositOrPrenote=directDepositOrPrenote,
            depositRule=depositRule,
            employeeBankId=employeeBankId,
            employeeBankName=employeeBankName,
            employeeBankRoutingNumber=employeeBankRoutingNumber,
            employeeId=employeeId,
            firstPrenotePayDate=firstPrenotePayDate,
            sequenceNumber=sequenceNumber,
            employeeInstitutionNumber=employeeInstitutionNumber,
            countryCode=countryCode,
            foreignAccountNumber=foreignAccountNumber,
            foreignAccountNumberType=foreignAccountNumberType,
            accountRecordId=accountRecordId,
            dateTimeChanged=dateTimeChanged,
            accountIsInactive=accountIsInactive,
            _configuration=_configuration,
            **kwargs,
        )
