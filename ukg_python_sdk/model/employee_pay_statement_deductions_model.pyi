# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeePayStatementDeductionsModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            basisamount = schemas.Float32Schema
            deductioncode = schemas.StrSchema
            deductiondescription = schemas.StrSchema
            employeeamount = schemas.Float32Schema
            employeeamountytd = schemas.Float32Schema
            employeramount = schemas.Float32Schema
            employeramountytd = schemas.Float32Schema
            pretax = schemas.BoolSchema
            __annotations__ = {
                "basisamount": basisamount,
                "deductioncode": deductioncode,
                "deductiondescription": deductiondescription,
                "employeeamount": employeeamount,
                "employeeamountytd": employeeamountytd,
                "employeramount": employeramount,
                "employeramountytd": employeramountytd,
                "pretax": pretax,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basisamount"]) -> MetaOapg.properties.basisamount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductioncode"]) -> MetaOapg.properties.deductioncode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductiondescription"]) -> MetaOapg.properties.deductiondescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeamount"]) -> MetaOapg.properties.employeeamount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeamountytd"]) -> MetaOapg.properties.employeeamountytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeramount"]) -> MetaOapg.properties.employeramount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeramountytd"]) -> MetaOapg.properties.employeramountytd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pretax"]) -> MetaOapg.properties.pretax: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["basisamount", "deductioncode", "deductiondescription", "employeeamount", "employeeamountytd", "employeramount", "employeramountytd", "pretax", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basisamount"]) -> typing.Union[MetaOapg.properties.basisamount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductioncode"]) -> typing.Union[MetaOapg.properties.deductioncode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductiondescription"]) -> typing.Union[MetaOapg.properties.deductiondescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeamount"]) -> typing.Union[MetaOapg.properties.employeeamount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeamountytd"]) -> typing.Union[MetaOapg.properties.employeeamountytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeramount"]) -> typing.Union[MetaOapg.properties.employeramount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeramountytd"]) -> typing.Union[MetaOapg.properties.employeramountytd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pretax"]) -> typing.Union[MetaOapg.properties.pretax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["basisamount", "deductioncode", "deductiondescription", "employeeamount", "employeeamountytd", "employeramount", "employeramountytd", "pretax", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        basisamount: typing.Union[MetaOapg.properties.basisamount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deductioncode: typing.Union[MetaOapg.properties.deductioncode, str, schemas.Unset] = schemas.unset,
        deductiondescription: typing.Union[MetaOapg.properties.deductiondescription, str, schemas.Unset] = schemas.unset,
        employeeamount: typing.Union[MetaOapg.properties.employeeamount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeamountytd: typing.Union[MetaOapg.properties.employeeamountytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeramount: typing.Union[MetaOapg.properties.employeramount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeramountytd: typing.Union[MetaOapg.properties.employeramountytd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pretax: typing.Union[MetaOapg.properties.pretax, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePayStatementDeductionsModel':
        return super().__new__(
            cls,
            *args,
            basisamount=basisamount,
            deductioncode=deductioncode,
            deductiondescription=deductiondescription,
            employeeamount=employeeamount,
            employeeamountytd=employeeamountytd,
            employeramount=employeramount,
            employeramountytd=employeramountytd,
            pretax=pretax,
            _configuration=_configuration,
            **kwargs,
        )
