# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class OpenEnrollmentDependentDeductions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            benefitAmount = schemas.NumberSchema
            changeReason = schemas.StrSchema
            relationship = schemas.StrSchema
            benefitStartDate = schemas.DateTimeSchema
            benefitStatus = schemas.StrSchema
            benefitStatusDate = schemas.DateTimeSchema
            benefitStopDate = schemas.DateTimeSchema
            companyId = schemas.StrSchema
            changeDatetime = schemas.DateTimeSchema
            contactId = schemas.StrSchema
            createDatetime = schemas.DateTimeSchema
            certificateNo = schemas.StrSchema
            currentCoId = schemas.StrSchema
            declinedByCarrier = schemas.StrSchema
            declinedByCarrierDate = schemas.DateTimeSchema
            declinedByCarrierReason = schemas.StrSchema
            deductionCode = schemas.StrSchema
            deductionType = schemas.StrSchema
            depBPlanTVID = schemas.NumberSchema
            employeeId = schemas.StrSchema
            evidenceofInsurabilityDate = schemas.DateTimeSchema
            needEvidenceOfInsurability = schemas.BoolSchema
            employerAmount = schemas.NumberSchema
            deductionNotes = schemas.StrSchema
            primaryCarePhysician = schemas.StrSchema
            primaryCarePhysicianId = schemas.StrSchema
            systemId = schemas.StrSchema
            isBenefitWaived = schemas.BoolSchema
            oeDrop = schemas.BoolSchema
            __annotations__ = {
                "benefitAmount": benefitAmount,
                "changeReason": changeReason,
                "relationship": relationship,
                "benefitStartDate": benefitStartDate,
                "benefitStatus": benefitStatus,
                "benefitStatusDate": benefitStatusDate,
                "benefitStopDate": benefitStopDate,
                "companyId": companyId,
                "changeDatetime": changeDatetime,
                "contactId": contactId,
                "createDatetime": createDatetime,
                "certificateNo": certificateNo,
                "currentCoId": currentCoId,
                "declinedByCarrier": declinedByCarrier,
                "declinedByCarrierDate": declinedByCarrierDate,
                "declinedByCarrierReason": declinedByCarrierReason,
                "deductionCode": deductionCode,
                "deductionType": deductionType,
                "depBPlanTVID": depBPlanTVID,
                "employeeId": employeeId,
                "evidenceofInsurabilityDate": evidenceofInsurabilityDate,
                "needEvidenceOfInsurability": needEvidenceOfInsurability,
                "employerAmount": employerAmount,
                "deductionNotes": deductionNotes,
                "primaryCarePhysician": primaryCarePhysician,
                "primaryCarePhysicianId": primaryCarePhysicianId,
                "systemId": systemId,
                "isBenefitWaived": isBenefitWaived,
                "oeDrop": oeDrop,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmount"]) -> MetaOapg.properties.benefitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationship"]) -> MetaOapg.properties.relationship: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStartDate"]) -> MetaOapg.properties.benefitStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatus"]) -> MetaOapg.properties.benefitStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatusDate"]) -> MetaOapg.properties.benefitStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStopDate"]) -> MetaOapg.properties.benefitStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeDatetime"]) -> MetaOapg.properties.changeDatetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDatetime"]) -> MetaOapg.properties.createDatetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateNo"]) -> MetaOapg.properties.certificateNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentCoId"]) -> MetaOapg.properties.currentCoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrier"]) -> MetaOapg.properties.declinedByCarrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> MetaOapg.properties.declinedByCarrierDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> MetaOapg.properties.declinedByCarrierReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionType"]) -> MetaOapg.properties.deductionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depBPlanTVID"]) -> MetaOapg.properties.depBPlanTVID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceofInsurabilityDate"]) -> MetaOapg.properties.evidenceofInsurabilityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> MetaOapg.properties.needEvidenceOfInsurability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerAmount"]) -> MetaOapg.properties.employerAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionNotes"]) -> MetaOapg.properties.deductionNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> MetaOapg.properties.primaryCarePhysician: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> MetaOapg.properties.primaryCarePhysicianId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBenefitWaived"]) -> MetaOapg.properties.isBenefitWaived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oeDrop"]) -> MetaOapg.properties.oeDrop: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "changeReason", "relationship", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyId", "changeDatetime", "contactId", "createDatetime", "certificateNo", "currentCoId", "declinedByCarrier", "declinedByCarrierDate", "declinedByCarrierReason", "deductionCode", "deductionType", "depBPlanTVID", "employeeId", "evidenceofInsurabilityDate", "needEvidenceOfInsurability", "employerAmount", "deductionNotes", "primaryCarePhysician", "primaryCarePhysicianId", "systemId", "isBenefitWaived", "oeDrop", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmount"]) -> typing.Union[MetaOapg.properties.benefitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationship"]) -> typing.Union[MetaOapg.properties.relationship, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStartDate"]) -> typing.Union[MetaOapg.properties.benefitStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatus"]) -> typing.Union[MetaOapg.properties.benefitStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatusDate"]) -> typing.Union[MetaOapg.properties.benefitStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStopDate"]) -> typing.Union[MetaOapg.properties.benefitStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeDatetime"]) -> typing.Union[MetaOapg.properties.changeDatetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> typing.Union[MetaOapg.properties.contactId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDatetime"]) -> typing.Union[MetaOapg.properties.createDatetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateNo"]) -> typing.Union[MetaOapg.properties.certificateNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentCoId"]) -> typing.Union[MetaOapg.properties.currentCoId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrier"]) -> typing.Union[MetaOapg.properties.declinedByCarrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> typing.Union[MetaOapg.properties.declinedByCarrierDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> typing.Union[MetaOapg.properties.declinedByCarrierReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionType"]) -> typing.Union[MetaOapg.properties.deductionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depBPlanTVID"]) -> typing.Union[MetaOapg.properties.depBPlanTVID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceofInsurabilityDate"]) -> typing.Union[MetaOapg.properties.evidenceofInsurabilityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> typing.Union[MetaOapg.properties.needEvidenceOfInsurability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerAmount"]) -> typing.Union[MetaOapg.properties.employerAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionNotes"]) -> typing.Union[MetaOapg.properties.deductionNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> typing.Union[MetaOapg.properties.primaryCarePhysician, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> typing.Union[MetaOapg.properties.primaryCarePhysicianId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBenefitWaived"]) -> typing.Union[MetaOapg.properties.isBenefitWaived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oeDrop"]) -> typing.Union[MetaOapg.properties.oeDrop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "changeReason", "relationship", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyId", "changeDatetime", "contactId", "createDatetime", "certificateNo", "currentCoId", "declinedByCarrier", "declinedByCarrierDate", "declinedByCarrierReason", "deductionCode", "deductionType", "depBPlanTVID", "employeeId", "evidenceofInsurabilityDate", "needEvidenceOfInsurability", "employerAmount", "deductionNotes", "primaryCarePhysician", "primaryCarePhysicianId", "systemId", "isBenefitWaived", "oeDrop", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        benefitAmount: typing.Union[MetaOapg.properties.benefitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        changeReason: typing.Union[MetaOapg.properties.changeReason, str, schemas.Unset] = schemas.unset,
        relationship: typing.Union[MetaOapg.properties.relationship, str, schemas.Unset] = schemas.unset,
        benefitStartDate: typing.Union[MetaOapg.properties.benefitStartDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStatus: typing.Union[MetaOapg.properties.benefitStatus, str, schemas.Unset] = schemas.unset,
        benefitStatusDate: typing.Union[MetaOapg.properties.benefitStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStopDate: typing.Union[MetaOapg.properties.benefitStopDate, str, datetime, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        changeDatetime: typing.Union[MetaOapg.properties.changeDatetime, str, datetime, schemas.Unset] = schemas.unset,
        contactId: typing.Union[MetaOapg.properties.contactId, str, schemas.Unset] = schemas.unset,
        createDatetime: typing.Union[MetaOapg.properties.createDatetime, str, datetime, schemas.Unset] = schemas.unset,
        certificateNo: typing.Union[MetaOapg.properties.certificateNo, str, schemas.Unset] = schemas.unset,
        currentCoId: typing.Union[MetaOapg.properties.currentCoId, str, schemas.Unset] = schemas.unset,
        declinedByCarrier: typing.Union[MetaOapg.properties.declinedByCarrier, str, schemas.Unset] = schemas.unset,
        declinedByCarrierDate: typing.Union[MetaOapg.properties.declinedByCarrierDate, str, datetime, schemas.Unset] = schemas.unset,
        declinedByCarrierReason: typing.Union[MetaOapg.properties.declinedByCarrierReason, str, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        deductionType: typing.Union[MetaOapg.properties.deductionType, str, schemas.Unset] = schemas.unset,
        depBPlanTVID: typing.Union[MetaOapg.properties.depBPlanTVID, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        evidenceofInsurabilityDate: typing.Union[MetaOapg.properties.evidenceofInsurabilityDate, str, datetime, schemas.Unset] = schemas.unset,
        needEvidenceOfInsurability: typing.Union[MetaOapg.properties.needEvidenceOfInsurability, bool, schemas.Unset] = schemas.unset,
        employerAmount: typing.Union[MetaOapg.properties.employerAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deductionNotes: typing.Union[MetaOapg.properties.deductionNotes, str, schemas.Unset] = schemas.unset,
        primaryCarePhysician: typing.Union[MetaOapg.properties.primaryCarePhysician, str, schemas.Unset] = schemas.unset,
        primaryCarePhysicianId: typing.Union[MetaOapg.properties.primaryCarePhysicianId, str, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, str, schemas.Unset] = schemas.unset,
        isBenefitWaived: typing.Union[MetaOapg.properties.isBenefitWaived, bool, schemas.Unset] = schemas.unset,
        oeDrop: typing.Union[MetaOapg.properties.oeDrop, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpenEnrollmentDependentDeductions':
        return super().__new__(
            cls,
            *args,
            benefitAmount=benefitAmount,
            changeReason=changeReason,
            relationship=relationship,
            benefitStartDate=benefitStartDate,
            benefitStatus=benefitStatus,
            benefitStatusDate=benefitStatusDate,
            benefitStopDate=benefitStopDate,
            companyId=companyId,
            changeDatetime=changeDatetime,
            contactId=contactId,
            createDatetime=createDatetime,
            certificateNo=certificateNo,
            currentCoId=currentCoId,
            declinedByCarrier=declinedByCarrier,
            declinedByCarrierDate=declinedByCarrierDate,
            declinedByCarrierReason=declinedByCarrierReason,
            deductionCode=deductionCode,
            deductionType=deductionType,
            depBPlanTVID=depBPlanTVID,
            employeeId=employeeId,
            evidenceofInsurabilityDate=evidenceofInsurabilityDate,
            needEvidenceOfInsurability=needEvidenceOfInsurability,
            employerAmount=employerAmount,
            deductionNotes=deductionNotes,
            primaryCarePhysician=primaryCarePhysician,
            primaryCarePhysicianId=primaryCarePhysicianId,
            systemId=systemId,
            isBenefitWaived=isBenefitWaived,
            oeDrop=oeDrop,
            _configuration=_configuration,
            **kwargs,
        )
