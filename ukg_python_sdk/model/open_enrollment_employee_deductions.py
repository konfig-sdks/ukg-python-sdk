# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class OpenEnrollmentEmployeeDeductions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            benefitAmount = schemas.NumberSchema
            benefitAmountRateOrPercent = schemas.NumberSchema
            benefitOption = schemas.StrSchema
            addCoverage = schemas.BoolSchema
            changeReason = schemas.StrSchema
            benefitStartDate = schemas.DateTimeSchema
            benefitStatus = schemas.StrSchema
            benefitStatusDate = schemas.DateTimeSchema
            benefitStopDate = schemas.DateTimeSchema
            companyId = schemas.StrSchema
            customAmount1 = schemas.NumberSchema
            customAmount2 = schemas.NumberSchema
            customDate = schemas.DateTimeSchema
            changeDatetime = schemas.DateTimeSchema
            createDatetime = schemas.DateTimeSchema
            deductionCode = schemas.StrSchema
            deductionType = schemas.StrSchema
            employeeAmount = schemas.NumberSchema
            employeeCalculationRateOrPercent = schemas.NumberSchema
            employeeEligibilityDate = schemas.DateTimeSchema
            employeeGoalAmt = schemas.NumberSchema
            employeeGoalToDateAmount = schemas.NumberSchema
            employeeId = schemas.StrSchema
            employeeMemberOrCaseNo = schemas.StrSchema
            employeeYearToDateAmount = schemas.NumberSchema
            evidenceofInsurabilityDate = schemas.DateTimeSchema
            needEvidenceOfInsurability = schemas.BoolSchema
            evidenceofInsurabilityDesiredAmount = schemas.NumberSchema
            employeeEligibilityDesiredCalculationRateOrPercent = schemas.IntSchema
            employerAmount = schemas.NumberSchema
            employerCalculationRateOrPercent = schemas.NumberSchema
            employerCalculationRule = schemas.StrSchema
            employerYearToDateAmount = schemas.NumberSchema
            isDeductionOffset = schemas.BoolSchema
            medicalIndicator = schemas.BoolSchema
            deductionNotes = schemas.StrSchema
            primaryCarePhysician = schemas.StrSchema
            primaryCarePhysicianId = schemas.StrSchema
            deductionStartDate = schemas.DateTimeSchema
            deductionStopDate = schemas.DateTimeSchema
            benefitWaiveReason = schemas.StrSchema
            isBenefitWaived = schemas.BoolSchema
            oeDrop = schemas.BoolSchema
            __annotations__ = {
                "benefitAmount": benefitAmount,
                "benefitAmountRateOrPercent": benefitAmountRateOrPercent,
                "benefitOption": benefitOption,
                "addCoverage": addCoverage,
                "changeReason": changeReason,
                "benefitStartDate": benefitStartDate,
                "benefitStatus": benefitStatus,
                "benefitStatusDate": benefitStatusDate,
                "benefitStopDate": benefitStopDate,
                "companyId": companyId,
                "customAmount1": customAmount1,
                "customAmount2": customAmount2,
                "customDate": customDate,
                "changeDatetime": changeDatetime,
                "createDatetime": createDatetime,
                "deductionCode": deductionCode,
                "deductionType": deductionType,
                "employeeAmount": employeeAmount,
                "employeeCalculationRateOrPercent": employeeCalculationRateOrPercent,
                "employeeEligibilityDate": employeeEligibilityDate,
                "employeeGoalAmt": employeeGoalAmt,
                "employeeGoalToDateAmount": employeeGoalToDateAmount,
                "employeeId": employeeId,
                "employeeMemberOrCaseNo": employeeMemberOrCaseNo,
                "employeeYearToDateAmount": employeeYearToDateAmount,
                "evidenceofInsurabilityDate": evidenceofInsurabilityDate,
                "needEvidenceOfInsurability": needEvidenceOfInsurability,
                "evidenceofInsurabilityDesiredAmount": evidenceofInsurabilityDesiredAmount,
                "employeeEligibilityDesiredCalculationRateOrPercent": employeeEligibilityDesiredCalculationRateOrPercent,
                "employerAmount": employerAmount,
                "employerCalculationRateOrPercent": employerCalculationRateOrPercent,
                "employerCalculationRule": employerCalculationRule,
                "employerYearToDateAmount": employerYearToDateAmount,
                "isDeductionOffset": isDeductionOffset,
                "medicalIndicator": medicalIndicator,
                "deductionNotes": deductionNotes,
                "primaryCarePhysician": primaryCarePhysician,
                "primaryCarePhysicianId": primaryCarePhysicianId,
                "deductionStartDate": deductionStartDate,
                "deductionStopDate": deductionStopDate,
                "benefitWaiveReason": benefitWaiveReason,
                "isBenefitWaived": isBenefitWaived,
                "oeDrop": oeDrop,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmount"]) -> MetaOapg.properties.benefitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmountRateOrPercent"]) -> MetaOapg.properties.benefitAmountRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitOption"]) -> MetaOapg.properties.benefitOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addCoverage"]) -> MetaOapg.properties.addCoverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStartDate"]) -> MetaOapg.properties.benefitStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatus"]) -> MetaOapg.properties.benefitStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatusDate"]) -> MetaOapg.properties.benefitStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStopDate"]) -> MetaOapg.properties.benefitStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount1"]) -> MetaOapg.properties.customAmount1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount2"]) -> MetaOapg.properties.customAmount2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDate"]) -> MetaOapg.properties.customDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeDatetime"]) -> MetaOapg.properties.changeDatetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDatetime"]) -> MetaOapg.properties.createDatetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionType"]) -> MetaOapg.properties.deductionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeAmount"]) -> MetaOapg.properties.employeeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCalculationRateOrPercent"]) -> MetaOapg.properties.employeeCalculationRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeEligibilityDate"]) -> MetaOapg.properties.employeeEligibilityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalAmt"]) -> MetaOapg.properties.employeeGoalAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalToDateAmount"]) -> MetaOapg.properties.employeeGoalToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeMemberOrCaseNo"]) -> MetaOapg.properties.employeeMemberOrCaseNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeYearToDateAmount"]) -> MetaOapg.properties.employeeYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceofInsurabilityDate"]) -> MetaOapg.properties.evidenceofInsurabilityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> MetaOapg.properties.needEvidenceOfInsurability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceofInsurabilityDesiredAmount"]) -> MetaOapg.properties.evidenceofInsurabilityDesiredAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeEligibilityDesiredCalculationRateOrPercent"]) -> MetaOapg.properties.employeeEligibilityDesiredCalculationRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerAmount"]) -> MetaOapg.properties.employerAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalculationRateOrPercent"]) -> MetaOapg.properties.employerCalculationRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalculationRule"]) -> MetaOapg.properties.employerCalculationRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerYearToDateAmount"]) -> MetaOapg.properties.employerYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeductionOffset"]) -> MetaOapg.properties.isDeductionOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicalIndicator"]) -> MetaOapg.properties.medicalIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionNotes"]) -> MetaOapg.properties.deductionNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> MetaOapg.properties.primaryCarePhysician: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> MetaOapg.properties.primaryCarePhysicianId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionStartDate"]) -> MetaOapg.properties.deductionStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionStopDate"]) -> MetaOapg.properties.deductionStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitWaiveReason"]) -> MetaOapg.properties.benefitWaiveReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBenefitWaived"]) -> MetaOapg.properties.isBenefitWaived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oeDrop"]) -> MetaOapg.properties.oeDrop: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "benefitAmountRateOrPercent", "benefitOption", "addCoverage", "changeReason", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyId", "customAmount1", "customAmount2", "customDate", "changeDatetime", "createDatetime", "deductionCode", "deductionType", "employeeAmount", "employeeCalculationRateOrPercent", "employeeEligibilityDate", "employeeGoalAmt", "employeeGoalToDateAmount", "employeeId", "employeeMemberOrCaseNo", "employeeYearToDateAmount", "evidenceofInsurabilityDate", "needEvidenceOfInsurability", "evidenceofInsurabilityDesiredAmount", "employeeEligibilityDesiredCalculationRateOrPercent", "employerAmount", "employerCalculationRateOrPercent", "employerCalculationRule", "employerYearToDateAmount", "isDeductionOffset", "medicalIndicator", "deductionNotes", "primaryCarePhysician", "primaryCarePhysicianId", "deductionStartDate", "deductionStopDate", "benefitWaiveReason", "isBenefitWaived", "oeDrop", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmount"]) -> typing.Union[MetaOapg.properties.benefitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmountRateOrPercent"]) -> typing.Union[MetaOapg.properties.benefitAmountRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitOption"]) -> typing.Union[MetaOapg.properties.benefitOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addCoverage"]) -> typing.Union[MetaOapg.properties.addCoverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStartDate"]) -> typing.Union[MetaOapg.properties.benefitStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatus"]) -> typing.Union[MetaOapg.properties.benefitStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatusDate"]) -> typing.Union[MetaOapg.properties.benefitStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStopDate"]) -> typing.Union[MetaOapg.properties.benefitStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount1"]) -> typing.Union[MetaOapg.properties.customAmount1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount2"]) -> typing.Union[MetaOapg.properties.customAmount2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDate"]) -> typing.Union[MetaOapg.properties.customDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeDatetime"]) -> typing.Union[MetaOapg.properties.changeDatetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDatetime"]) -> typing.Union[MetaOapg.properties.createDatetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionType"]) -> typing.Union[MetaOapg.properties.deductionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeAmount"]) -> typing.Union[MetaOapg.properties.employeeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCalculationRateOrPercent"]) -> typing.Union[MetaOapg.properties.employeeCalculationRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeEligibilityDate"]) -> typing.Union[MetaOapg.properties.employeeEligibilityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalAmt"]) -> typing.Union[MetaOapg.properties.employeeGoalAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeGoalToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeMemberOrCaseNo"]) -> typing.Union[MetaOapg.properties.employeeMemberOrCaseNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeYearToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceofInsurabilityDate"]) -> typing.Union[MetaOapg.properties.evidenceofInsurabilityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> typing.Union[MetaOapg.properties.needEvidenceOfInsurability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceofInsurabilityDesiredAmount"]) -> typing.Union[MetaOapg.properties.evidenceofInsurabilityDesiredAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeEligibilityDesiredCalculationRateOrPercent"]) -> typing.Union[MetaOapg.properties.employeeEligibilityDesiredCalculationRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerAmount"]) -> typing.Union[MetaOapg.properties.employerAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalculationRateOrPercent"]) -> typing.Union[MetaOapg.properties.employerCalculationRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalculationRule"]) -> typing.Union[MetaOapg.properties.employerCalculationRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerYearToDateAmount"]) -> typing.Union[MetaOapg.properties.employerYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeductionOffset"]) -> typing.Union[MetaOapg.properties.isDeductionOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicalIndicator"]) -> typing.Union[MetaOapg.properties.medicalIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionNotes"]) -> typing.Union[MetaOapg.properties.deductionNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> typing.Union[MetaOapg.properties.primaryCarePhysician, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> typing.Union[MetaOapg.properties.primaryCarePhysicianId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionStartDate"]) -> typing.Union[MetaOapg.properties.deductionStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionStopDate"]) -> typing.Union[MetaOapg.properties.deductionStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitWaiveReason"]) -> typing.Union[MetaOapg.properties.benefitWaiveReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBenefitWaived"]) -> typing.Union[MetaOapg.properties.isBenefitWaived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oeDrop"]) -> typing.Union[MetaOapg.properties.oeDrop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "benefitAmountRateOrPercent", "benefitOption", "addCoverage", "changeReason", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyId", "customAmount1", "customAmount2", "customDate", "changeDatetime", "createDatetime", "deductionCode", "deductionType", "employeeAmount", "employeeCalculationRateOrPercent", "employeeEligibilityDate", "employeeGoalAmt", "employeeGoalToDateAmount", "employeeId", "employeeMemberOrCaseNo", "employeeYearToDateAmount", "evidenceofInsurabilityDate", "needEvidenceOfInsurability", "evidenceofInsurabilityDesiredAmount", "employeeEligibilityDesiredCalculationRateOrPercent", "employerAmount", "employerCalculationRateOrPercent", "employerCalculationRule", "employerYearToDateAmount", "isDeductionOffset", "medicalIndicator", "deductionNotes", "primaryCarePhysician", "primaryCarePhysicianId", "deductionStartDate", "deductionStopDate", "benefitWaiveReason", "isBenefitWaived", "oeDrop", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        benefitAmount: typing.Union[MetaOapg.properties.benefitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitAmountRateOrPercent: typing.Union[MetaOapg.properties.benefitAmountRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitOption: typing.Union[MetaOapg.properties.benefitOption, str, schemas.Unset] = schemas.unset,
        addCoverage: typing.Union[MetaOapg.properties.addCoverage, bool, schemas.Unset] = schemas.unset,
        changeReason: typing.Union[MetaOapg.properties.changeReason, str, schemas.Unset] = schemas.unset,
        benefitStartDate: typing.Union[MetaOapg.properties.benefitStartDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStatus: typing.Union[MetaOapg.properties.benefitStatus, str, schemas.Unset] = schemas.unset,
        benefitStatusDate: typing.Union[MetaOapg.properties.benefitStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStopDate: typing.Union[MetaOapg.properties.benefitStopDate, str, datetime, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        customAmount1: typing.Union[MetaOapg.properties.customAmount1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customAmount2: typing.Union[MetaOapg.properties.customAmount2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customDate: typing.Union[MetaOapg.properties.customDate, str, datetime, schemas.Unset] = schemas.unset,
        changeDatetime: typing.Union[MetaOapg.properties.changeDatetime, str, datetime, schemas.Unset] = schemas.unset,
        createDatetime: typing.Union[MetaOapg.properties.createDatetime, str, datetime, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        deductionType: typing.Union[MetaOapg.properties.deductionType, str, schemas.Unset] = schemas.unset,
        employeeAmount: typing.Union[MetaOapg.properties.employeeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeCalculationRateOrPercent: typing.Union[MetaOapg.properties.employeeCalculationRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeEligibilityDate: typing.Union[MetaOapg.properties.employeeEligibilityDate, str, datetime, schemas.Unset] = schemas.unset,
        employeeGoalAmt: typing.Union[MetaOapg.properties.employeeGoalAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeGoalToDateAmount: typing.Union[MetaOapg.properties.employeeGoalToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeMemberOrCaseNo: typing.Union[MetaOapg.properties.employeeMemberOrCaseNo, str, schemas.Unset] = schemas.unset,
        employeeYearToDateAmount: typing.Union[MetaOapg.properties.employeeYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        evidenceofInsurabilityDate: typing.Union[MetaOapg.properties.evidenceofInsurabilityDate, str, datetime, schemas.Unset] = schemas.unset,
        needEvidenceOfInsurability: typing.Union[MetaOapg.properties.needEvidenceOfInsurability, bool, schemas.Unset] = schemas.unset,
        evidenceofInsurabilityDesiredAmount: typing.Union[MetaOapg.properties.evidenceofInsurabilityDesiredAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeEligibilityDesiredCalculationRateOrPercent: typing.Union[MetaOapg.properties.employeeEligibilityDesiredCalculationRateOrPercent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employerAmount: typing.Union[MetaOapg.properties.employerAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerCalculationRateOrPercent: typing.Union[MetaOapg.properties.employerCalculationRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerCalculationRule: typing.Union[MetaOapg.properties.employerCalculationRule, str, schemas.Unset] = schemas.unset,
        employerYearToDateAmount: typing.Union[MetaOapg.properties.employerYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isDeductionOffset: typing.Union[MetaOapg.properties.isDeductionOffset, bool, schemas.Unset] = schemas.unset,
        medicalIndicator: typing.Union[MetaOapg.properties.medicalIndicator, bool, schemas.Unset] = schemas.unset,
        deductionNotes: typing.Union[MetaOapg.properties.deductionNotes, str, schemas.Unset] = schemas.unset,
        primaryCarePhysician: typing.Union[MetaOapg.properties.primaryCarePhysician, str, schemas.Unset] = schemas.unset,
        primaryCarePhysicianId: typing.Union[MetaOapg.properties.primaryCarePhysicianId, str, schemas.Unset] = schemas.unset,
        deductionStartDate: typing.Union[MetaOapg.properties.deductionStartDate, str, datetime, schemas.Unset] = schemas.unset,
        deductionStopDate: typing.Union[MetaOapg.properties.deductionStopDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitWaiveReason: typing.Union[MetaOapg.properties.benefitWaiveReason, str, schemas.Unset] = schemas.unset,
        isBenefitWaived: typing.Union[MetaOapg.properties.isBenefitWaived, bool, schemas.Unset] = schemas.unset,
        oeDrop: typing.Union[MetaOapg.properties.oeDrop, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpenEnrollmentEmployeeDeductions':
        return super().__new__(
            cls,
            *args,
            benefitAmount=benefitAmount,
            benefitAmountRateOrPercent=benefitAmountRateOrPercent,
            benefitOption=benefitOption,
            addCoverage=addCoverage,
            changeReason=changeReason,
            benefitStartDate=benefitStartDate,
            benefitStatus=benefitStatus,
            benefitStatusDate=benefitStatusDate,
            benefitStopDate=benefitStopDate,
            companyId=companyId,
            customAmount1=customAmount1,
            customAmount2=customAmount2,
            customDate=customDate,
            changeDatetime=changeDatetime,
            createDatetime=createDatetime,
            deductionCode=deductionCode,
            deductionType=deductionType,
            employeeAmount=employeeAmount,
            employeeCalculationRateOrPercent=employeeCalculationRateOrPercent,
            employeeEligibilityDate=employeeEligibilityDate,
            employeeGoalAmt=employeeGoalAmt,
            employeeGoalToDateAmount=employeeGoalToDateAmount,
            employeeId=employeeId,
            employeeMemberOrCaseNo=employeeMemberOrCaseNo,
            employeeYearToDateAmount=employeeYearToDateAmount,
            evidenceofInsurabilityDate=evidenceofInsurabilityDate,
            needEvidenceOfInsurability=needEvidenceOfInsurability,
            evidenceofInsurabilityDesiredAmount=evidenceofInsurabilityDesiredAmount,
            employeeEligibilityDesiredCalculationRateOrPercent=employeeEligibilityDesiredCalculationRateOrPercent,
            employerAmount=employerAmount,
            employerCalculationRateOrPercent=employerCalculationRateOrPercent,
            employerCalculationRule=employerCalculationRule,
            employerYearToDateAmount=employerYearToDateAmount,
            isDeductionOffset=isDeductionOffset,
            medicalIndicator=medicalIndicator,
            deductionNotes=deductionNotes,
            primaryCarePhysician=primaryCarePhysician,
            primaryCarePhysicianId=primaryCarePhysicianId,
            deductionStartDate=deductionStartDate,
            deductionStopDate=deductionStopDate,
            benefitWaiveReason=benefitWaiveReason,
            isBenefitWaived=isBenefitWaived,
            oeDrop=oeDrop,
            _configuration=_configuration,
            **kwargs,
        )
