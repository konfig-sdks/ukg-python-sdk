# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmpDeductions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            arrearsAmt = schemas.Float64Schema
            benefitAmount = schemas.Float64Schema
            benefitAmountCalcRule = schemas.StrSchema
            benefitAmountRateOrPercent = schemas.Float64Schema
            benefitOption = schemas.StrSchema
            benefitStartDate = schemas.DateTimeSchema
            benefitStatus = schemas.StrSchema
            benefitStatusDate = schemas.DateTimeSchema
            benefitStopDate = schemas.DateTimeSchema
            companyID = schemas.StrSchema
            customAmount1 = schemas.Float64Schema
            customAmount2 = schemas.Float64Schema
            customDate = schemas.DateTimeSchema
            dateSuspendedFrom = schemas.DateTimeSchema
            dateSuspendedTo = schemas.DateTimeSchema
            datetimeChanged = schemas.DateTimeSchema
            datetimeCreated = schemas.DateTimeSchema
            declinedByCarrier = schemas.StrSchema
            declinedByCarrierDate = schemas.DateTimeSchema
            declinedByCarrierReason = schemas.StrSchema
            deductionCode = schemas.StrSchema
            effectiveRecordID = schemas.StrSchema
            contactID = schemas.StrSchema
            memberOrCaseNumber = schemas.StrSchema
            employeeAmount = schemas.Float64Schema
            employeeCalcRateOrPct = schemas.Float64Schema
            employeeCalcRule = schemas.StrSchema
            employeeCauseNumber = schemas.StrSchema
            employeeDedLastPaid = schemas.DateTimeSchema
            employeeEligibilityDate = schemas.DateTimeSchema
            employeeFiscalYTDAmt = schemas.Float64Schema
            employeeGoalAmt = schemas.Float64Schema
            employeeGoalToDateAmt = schemas.Float64Schema
            employeeID = schemas.StrSchema
            employeeLastAmount = schemas.Float64Schema
            employeeMonthToDateAmount = schemas.Float64Schema
            employeeQuarterToDateAmount = schemas.Float64Schema
            employeeYearToDateAmount = schemas.Float64Schema
            evidenceOfInsurabilityDate = schemas.DateTimeSchema
            evidenceOfInsurabilityDesiredAmt = schemas.Float64Schema
            evidenceOfInsurabilityDesiredCalcRateOrPct = schemas.Float64Schema
            employerAmount = schemas.Float64Schema
            employerCalcRateOrPct = schemas.Float64Schema
            employerCalcRule = schemas.StrSchema
            employerFiscalYearToDateAmount = schemas.Float64Schema
            employerLastAmount = schemas.Float64Schema
            employerMonthToDateAmount = schemas.Float64Schema
            employerQuarterToDateAmount = schemas.Float64Schema
            employerYearToDateAmount = schemas.Float64Schema
            interestAmount = schemas.Float64Schema
            isDeductionOffset = schemas.BoolSchema
            medicalIndicator = schemas.BoolSchema
            needEvidenceOfInsurability = schemas.BoolSchema
            notes = schemas.StrSchema
            primaryCarePhysician = schemas.StrSchema
            primaryCarePhysicianId = schemas.StrSchema
            priorEmployeeAmount = schemas.Float64Schema
            priorEmployeeGoalAmount = schemas.Float64Schema
            priorEmployeeYearToDateAmount = schemas.Float64Schema
            priorEmployerYearToDateAmount = schemas.Float64Schema
            deductionStartDate = schemas.DateTimeSchema
            deductionStopDate = schemas.DateTimeSchema
            systemID = schemas.StrSchema
            waiveReason = schemas.StrSchema
            isHomeCompany = schemas.BoolSchema
            isWaived = schemas.BoolSchema
            includeInAdditionalCheck = schemas.BoolSchema
            includeInManualCheck = schemas.BoolSchema
            employeePerCapAmount = schemas.Float64Schema
            employeePerCapPercent = schemas.Float64Schema
            employeePerCapCalcRule = schemas.StrSchema
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            dedCode = schemas.StrSchema
            benStatus = schemas.StrSchema
            endDateTime = schemas.DateTimeSchema
            page = schemas.IntSchema
            per_Page = schemas.IntSchema
            __annotations__ = {
                "arrearsAmt": arrearsAmt,
                "benefitAmount": benefitAmount,
                "benefitAmountCalcRule": benefitAmountCalcRule,
                "benefitAmountRateOrPercent": benefitAmountRateOrPercent,
                "benefitOption": benefitOption,
                "benefitStartDate": benefitStartDate,
                "benefitStatus": benefitStatus,
                "benefitStatusDate": benefitStatusDate,
                "benefitStopDate": benefitStopDate,
                "companyID": companyID,
                "customAmount1": customAmount1,
                "customAmount2": customAmount2,
                "customDate": customDate,
                "dateSuspendedFrom": dateSuspendedFrom,
                "dateSuspendedTo": dateSuspendedTo,
                "datetimeChanged": datetimeChanged,
                "datetimeCreated": datetimeCreated,
                "declinedByCarrier": declinedByCarrier,
                "declinedByCarrierDate": declinedByCarrierDate,
                "declinedByCarrierReason": declinedByCarrierReason,
                "deductionCode": deductionCode,
                "effectiveRecordID": effectiveRecordID,
                "contactID": contactID,
                "memberOrCaseNumber": memberOrCaseNumber,
                "employeeAmount": employeeAmount,
                "employeeCalcRateOrPct": employeeCalcRateOrPct,
                "employeeCalcRule": employeeCalcRule,
                "employeeCauseNumber": employeeCauseNumber,
                "employeeDedLastPaid": employeeDedLastPaid,
                "employeeEligibilityDate": employeeEligibilityDate,
                "employeeFiscalYTDAmt": employeeFiscalYTDAmt,
                "employeeGoalAmt": employeeGoalAmt,
                "employeeGoalToDateAmt": employeeGoalToDateAmt,
                "employeeID": employeeID,
                "employeeLastAmount": employeeLastAmount,
                "employeeMonthToDateAmount": employeeMonthToDateAmount,
                "employeeQuarterToDateAmount": employeeQuarterToDateAmount,
                "employeeYearToDateAmount": employeeYearToDateAmount,
                "evidenceOfInsurabilityDate": evidenceOfInsurabilityDate,
                "evidenceOfInsurabilityDesiredAmt": evidenceOfInsurabilityDesiredAmt,
                "evidenceOfInsurabilityDesiredCalcRateOrPct": evidenceOfInsurabilityDesiredCalcRateOrPct,
                "employerAmount": employerAmount,
                "employerCalcRateOrPct": employerCalcRateOrPct,
                "employerCalcRule": employerCalcRule,
                "employerFiscalYearToDateAmount": employerFiscalYearToDateAmount,
                "employerLastAmount": employerLastAmount,
                "employerMonthToDateAmount": employerMonthToDateAmount,
                "employerQuarterToDateAmount": employerQuarterToDateAmount,
                "employerYearToDateAmount": employerYearToDateAmount,
                "interestAmount": interestAmount,
                "isDeductionOffset": isDeductionOffset,
                "medicalIndicator": medicalIndicator,
                "needEvidenceOfInsurability": needEvidenceOfInsurability,
                "notes": notes,
                "primaryCarePhysician": primaryCarePhysician,
                "primaryCarePhysicianId": primaryCarePhysicianId,
                "priorEmployeeAmount": priorEmployeeAmount,
                "priorEmployeeGoalAmount": priorEmployeeGoalAmount,
                "priorEmployeeYearToDateAmount": priorEmployeeYearToDateAmount,
                "priorEmployerYearToDateAmount": priorEmployerYearToDateAmount,
                "deductionStartDate": deductionStartDate,
                "deductionStopDate": deductionStopDate,
                "systemID": systemID,
                "waiveReason": waiveReason,
                "isHomeCompany": isHomeCompany,
                "isWaived": isWaived,
                "includeInAdditionalCheck": includeInAdditionalCheck,
                "includeInManualCheck": includeInManualCheck,
                "employeePerCapAmount": employeePerCapAmount,
                "employeePerCapPercent": employeePerCapPercent,
                "employeePerCapCalcRule": employeePerCapCalcRule,
                "employeeId": employeeId,
                "companyId": companyId,
                "dedCode": dedCode,
                "benStatus": benStatus,
                "endDateTime": endDateTime,
                "page": page,
                "per_Page": per_Page,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrearsAmt"]) -> MetaOapg.properties.arrearsAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmount"]) -> MetaOapg.properties.benefitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmountCalcRule"]) -> MetaOapg.properties.benefitAmountCalcRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmountRateOrPercent"]) -> MetaOapg.properties.benefitAmountRateOrPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitOption"]) -> MetaOapg.properties.benefitOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStartDate"]) -> MetaOapg.properties.benefitStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatus"]) -> MetaOapg.properties.benefitStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatusDate"]) -> MetaOapg.properties.benefitStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStopDate"]) -> MetaOapg.properties.benefitStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount1"]) -> MetaOapg.properties.customAmount1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customAmount2"]) -> MetaOapg.properties.customAmount2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDate"]) -> MetaOapg.properties.customDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateSuspendedFrom"]) -> MetaOapg.properties.dateSuspendedFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateSuspendedTo"]) -> MetaOapg.properties.dateSuspendedTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetimeChanged"]) -> MetaOapg.properties.datetimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetimeCreated"]) -> MetaOapg.properties.datetimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrier"]) -> MetaOapg.properties.declinedByCarrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> MetaOapg.properties.declinedByCarrierDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> MetaOapg.properties.declinedByCarrierReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveRecordID"]) -> MetaOapg.properties.effectiveRecordID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactID"]) -> MetaOapg.properties.contactID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memberOrCaseNumber"]) -> MetaOapg.properties.memberOrCaseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeAmount"]) -> MetaOapg.properties.employeeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCalcRateOrPct"]) -> MetaOapg.properties.employeeCalcRateOrPct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCalcRule"]) -> MetaOapg.properties.employeeCalcRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeCauseNumber"]) -> MetaOapg.properties.employeeCauseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeDedLastPaid"]) -> MetaOapg.properties.employeeDedLastPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeEligibilityDate"]) -> MetaOapg.properties.employeeEligibilityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeFiscalYTDAmt"]) -> MetaOapg.properties.employeeFiscalYTDAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalAmt"]) -> MetaOapg.properties.employeeGoalAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalToDateAmt"]) -> MetaOapg.properties.employeeGoalToDateAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeID"]) -> MetaOapg.properties.employeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeLastAmount"]) -> MetaOapg.properties.employeeLastAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeMonthToDateAmount"]) -> MetaOapg.properties.employeeMonthToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeQuarterToDateAmount"]) -> MetaOapg.properties.employeeQuarterToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeYearToDateAmount"]) -> MetaOapg.properties.employeeYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceOfInsurabilityDate"]) -> MetaOapg.properties.evidenceOfInsurabilityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceOfInsurabilityDesiredAmt"]) -> MetaOapg.properties.evidenceOfInsurabilityDesiredAmt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidenceOfInsurabilityDesiredCalcRateOrPct"]) -> MetaOapg.properties.evidenceOfInsurabilityDesiredCalcRateOrPct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerAmount"]) -> MetaOapg.properties.employerAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalcRateOrPct"]) -> MetaOapg.properties.employerCalcRateOrPct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerCalcRule"]) -> MetaOapg.properties.employerCalcRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerFiscalYearToDateAmount"]) -> MetaOapg.properties.employerFiscalYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerLastAmount"]) -> MetaOapg.properties.employerLastAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerMonthToDateAmount"]) -> MetaOapg.properties.employerMonthToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerQuarterToDateAmount"]) -> MetaOapg.properties.employerQuarterToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerYearToDateAmount"]) -> MetaOapg.properties.employerYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestAmount"]) -> MetaOapg.properties.interestAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeductionOffset"]) -> MetaOapg.properties.isDeductionOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicalIndicator"]) -> MetaOapg.properties.medicalIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> MetaOapg.properties.needEvidenceOfInsurability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> MetaOapg.properties.primaryCarePhysician: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> MetaOapg.properties.primaryCarePhysicianId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorEmployeeAmount"]) -> MetaOapg.properties.priorEmployeeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorEmployeeGoalAmount"]) -> MetaOapg.properties.priorEmployeeGoalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorEmployeeYearToDateAmount"]) -> MetaOapg.properties.priorEmployeeYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorEmployerYearToDateAmount"]) -> MetaOapg.properties.priorEmployerYearToDateAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionStartDate"]) -> MetaOapg.properties.deductionStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionStopDate"]) -> MetaOapg.properties.deductionStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemID"]) -> MetaOapg.properties.systemID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waiveReason"]) -> MetaOapg.properties.waiveReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHomeCompany"]) -> MetaOapg.properties.isHomeCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isWaived"]) -> MetaOapg.properties.isWaived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeInAdditionalCheck"]) -> MetaOapg.properties.includeInAdditionalCheck: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeInManualCheck"]) -> MetaOapg.properties.includeInManualCheck: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeePerCapAmount"]) -> MetaOapg.properties.employeePerCapAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeePerCapPercent"]) -> MetaOapg.properties.employeePerCapPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeePerCapCalcRule"]) -> MetaOapg.properties.employeePerCapCalcRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dedCode"]) -> MetaOapg.properties.dedCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benStatus"]) -> MetaOapg.properties.benStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDateTime"]) -> MetaOapg.properties.endDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["per_Page"]) -> MetaOapg.properties.per_Page: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["arrearsAmt", "benefitAmount", "benefitAmountCalcRule", "benefitAmountRateOrPercent", "benefitOption", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyID", "customAmount1", "customAmount2", "customDate", "dateSuspendedFrom", "dateSuspendedTo", "datetimeChanged", "datetimeCreated", "declinedByCarrier", "declinedByCarrierDate", "declinedByCarrierReason", "deductionCode", "effectiveRecordID", "contactID", "memberOrCaseNumber", "employeeAmount", "employeeCalcRateOrPct", "employeeCalcRule", "employeeCauseNumber", "employeeDedLastPaid", "employeeEligibilityDate", "employeeFiscalYTDAmt", "employeeGoalAmt", "employeeGoalToDateAmt", "employeeID", "employeeLastAmount", "employeeMonthToDateAmount", "employeeQuarterToDateAmount", "employeeYearToDateAmount", "evidenceOfInsurabilityDate", "evidenceOfInsurabilityDesiredAmt", "evidenceOfInsurabilityDesiredCalcRateOrPct", "employerAmount", "employerCalcRateOrPct", "employerCalcRule", "employerFiscalYearToDateAmount", "employerLastAmount", "employerMonthToDateAmount", "employerQuarterToDateAmount", "employerYearToDateAmount", "interestAmount", "isDeductionOffset", "medicalIndicator", "needEvidenceOfInsurability", "notes", "primaryCarePhysician", "primaryCarePhysicianId", "priorEmployeeAmount", "priorEmployeeGoalAmount", "priorEmployeeYearToDateAmount", "priorEmployerYearToDateAmount", "deductionStartDate", "deductionStopDate", "systemID", "waiveReason", "isHomeCompany", "isWaived", "includeInAdditionalCheck", "includeInManualCheck", "employeePerCapAmount", "employeePerCapPercent", "employeePerCapCalcRule", "employeeId", "companyId", "dedCode", "benStatus", "endDateTime", "page", "per_Page", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrearsAmt"]) -> typing.Union[MetaOapg.properties.arrearsAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmount"]) -> typing.Union[MetaOapg.properties.benefitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmountCalcRule"]) -> typing.Union[MetaOapg.properties.benefitAmountCalcRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmountRateOrPercent"]) -> typing.Union[MetaOapg.properties.benefitAmountRateOrPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitOption"]) -> typing.Union[MetaOapg.properties.benefitOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStartDate"]) -> typing.Union[MetaOapg.properties.benefitStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatus"]) -> typing.Union[MetaOapg.properties.benefitStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatusDate"]) -> typing.Union[MetaOapg.properties.benefitStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStopDate"]) -> typing.Union[MetaOapg.properties.benefitStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount1"]) -> typing.Union[MetaOapg.properties.customAmount1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customAmount2"]) -> typing.Union[MetaOapg.properties.customAmount2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDate"]) -> typing.Union[MetaOapg.properties.customDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateSuspendedFrom"]) -> typing.Union[MetaOapg.properties.dateSuspendedFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateSuspendedTo"]) -> typing.Union[MetaOapg.properties.dateSuspendedTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetimeChanged"]) -> typing.Union[MetaOapg.properties.datetimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetimeCreated"]) -> typing.Union[MetaOapg.properties.datetimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrier"]) -> typing.Union[MetaOapg.properties.declinedByCarrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> typing.Union[MetaOapg.properties.declinedByCarrierDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> typing.Union[MetaOapg.properties.declinedByCarrierReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveRecordID"]) -> typing.Union[MetaOapg.properties.effectiveRecordID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactID"]) -> typing.Union[MetaOapg.properties.contactID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memberOrCaseNumber"]) -> typing.Union[MetaOapg.properties.memberOrCaseNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeAmount"]) -> typing.Union[MetaOapg.properties.employeeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCalcRateOrPct"]) -> typing.Union[MetaOapg.properties.employeeCalcRateOrPct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCalcRule"]) -> typing.Union[MetaOapg.properties.employeeCalcRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeCauseNumber"]) -> typing.Union[MetaOapg.properties.employeeCauseNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeDedLastPaid"]) -> typing.Union[MetaOapg.properties.employeeDedLastPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeEligibilityDate"]) -> typing.Union[MetaOapg.properties.employeeEligibilityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeFiscalYTDAmt"]) -> typing.Union[MetaOapg.properties.employeeFiscalYTDAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalAmt"]) -> typing.Union[MetaOapg.properties.employeeGoalAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalToDateAmt"]) -> typing.Union[MetaOapg.properties.employeeGoalToDateAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeID"]) -> typing.Union[MetaOapg.properties.employeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeLastAmount"]) -> typing.Union[MetaOapg.properties.employeeLastAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeMonthToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeMonthToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeQuarterToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeQuarterToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeYearToDateAmount"]) -> typing.Union[MetaOapg.properties.employeeYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceOfInsurabilityDate"]) -> typing.Union[MetaOapg.properties.evidenceOfInsurabilityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceOfInsurabilityDesiredAmt"]) -> typing.Union[MetaOapg.properties.evidenceOfInsurabilityDesiredAmt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidenceOfInsurabilityDesiredCalcRateOrPct"]) -> typing.Union[MetaOapg.properties.evidenceOfInsurabilityDesiredCalcRateOrPct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerAmount"]) -> typing.Union[MetaOapg.properties.employerAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalcRateOrPct"]) -> typing.Union[MetaOapg.properties.employerCalcRateOrPct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerCalcRule"]) -> typing.Union[MetaOapg.properties.employerCalcRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerFiscalYearToDateAmount"]) -> typing.Union[MetaOapg.properties.employerFiscalYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerLastAmount"]) -> typing.Union[MetaOapg.properties.employerLastAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerMonthToDateAmount"]) -> typing.Union[MetaOapg.properties.employerMonthToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerQuarterToDateAmount"]) -> typing.Union[MetaOapg.properties.employerQuarterToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerYearToDateAmount"]) -> typing.Union[MetaOapg.properties.employerYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestAmount"]) -> typing.Union[MetaOapg.properties.interestAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeductionOffset"]) -> typing.Union[MetaOapg.properties.isDeductionOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicalIndicator"]) -> typing.Union[MetaOapg.properties.medicalIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needEvidenceOfInsurability"]) -> typing.Union[MetaOapg.properties.needEvidenceOfInsurability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> typing.Union[MetaOapg.properties.primaryCarePhysician, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> typing.Union[MetaOapg.properties.primaryCarePhysicianId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorEmployeeAmount"]) -> typing.Union[MetaOapg.properties.priorEmployeeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorEmployeeGoalAmount"]) -> typing.Union[MetaOapg.properties.priorEmployeeGoalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorEmployeeYearToDateAmount"]) -> typing.Union[MetaOapg.properties.priorEmployeeYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorEmployerYearToDateAmount"]) -> typing.Union[MetaOapg.properties.priorEmployerYearToDateAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionStartDate"]) -> typing.Union[MetaOapg.properties.deductionStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionStopDate"]) -> typing.Union[MetaOapg.properties.deductionStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemID"]) -> typing.Union[MetaOapg.properties.systemID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waiveReason"]) -> typing.Union[MetaOapg.properties.waiveReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHomeCompany"]) -> typing.Union[MetaOapg.properties.isHomeCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isWaived"]) -> typing.Union[MetaOapg.properties.isWaived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeInAdditionalCheck"]) -> typing.Union[MetaOapg.properties.includeInAdditionalCheck, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeInManualCheck"]) -> typing.Union[MetaOapg.properties.includeInManualCheck, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeePerCapAmount"]) -> typing.Union[MetaOapg.properties.employeePerCapAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeePerCapPercent"]) -> typing.Union[MetaOapg.properties.employeePerCapPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeePerCapCalcRule"]) -> typing.Union[MetaOapg.properties.employeePerCapCalcRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dedCode"]) -> typing.Union[MetaOapg.properties.dedCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benStatus"]) -> typing.Union[MetaOapg.properties.benStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDateTime"]) -> typing.Union[MetaOapg.properties.endDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["per_Page"]) -> typing.Union[MetaOapg.properties.per_Page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["arrearsAmt", "benefitAmount", "benefitAmountCalcRule", "benefitAmountRateOrPercent", "benefitOption", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "companyID", "customAmount1", "customAmount2", "customDate", "dateSuspendedFrom", "dateSuspendedTo", "datetimeChanged", "datetimeCreated", "declinedByCarrier", "declinedByCarrierDate", "declinedByCarrierReason", "deductionCode", "effectiveRecordID", "contactID", "memberOrCaseNumber", "employeeAmount", "employeeCalcRateOrPct", "employeeCalcRule", "employeeCauseNumber", "employeeDedLastPaid", "employeeEligibilityDate", "employeeFiscalYTDAmt", "employeeGoalAmt", "employeeGoalToDateAmt", "employeeID", "employeeLastAmount", "employeeMonthToDateAmount", "employeeQuarterToDateAmount", "employeeYearToDateAmount", "evidenceOfInsurabilityDate", "evidenceOfInsurabilityDesiredAmt", "evidenceOfInsurabilityDesiredCalcRateOrPct", "employerAmount", "employerCalcRateOrPct", "employerCalcRule", "employerFiscalYearToDateAmount", "employerLastAmount", "employerMonthToDateAmount", "employerQuarterToDateAmount", "employerYearToDateAmount", "interestAmount", "isDeductionOffset", "medicalIndicator", "needEvidenceOfInsurability", "notes", "primaryCarePhysician", "primaryCarePhysicianId", "priorEmployeeAmount", "priorEmployeeGoalAmount", "priorEmployeeYearToDateAmount", "priorEmployerYearToDateAmount", "deductionStartDate", "deductionStopDate", "systemID", "waiveReason", "isHomeCompany", "isWaived", "includeInAdditionalCheck", "includeInManualCheck", "employeePerCapAmount", "employeePerCapPercent", "employeePerCapCalcRule", "employeeId", "companyId", "dedCode", "benStatus", "endDateTime", "page", "per_Page", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        arrearsAmt: typing.Union[MetaOapg.properties.arrearsAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitAmount: typing.Union[MetaOapg.properties.benefitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitAmountCalcRule: typing.Union[MetaOapg.properties.benefitAmountCalcRule, str, schemas.Unset] = schemas.unset,
        benefitAmountRateOrPercent: typing.Union[MetaOapg.properties.benefitAmountRateOrPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitOption: typing.Union[MetaOapg.properties.benefitOption, str, schemas.Unset] = schemas.unset,
        benefitStartDate: typing.Union[MetaOapg.properties.benefitStartDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStatus: typing.Union[MetaOapg.properties.benefitStatus, str, schemas.Unset] = schemas.unset,
        benefitStatusDate: typing.Union[MetaOapg.properties.benefitStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStopDate: typing.Union[MetaOapg.properties.benefitStopDate, str, datetime, schemas.Unset] = schemas.unset,
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        customAmount1: typing.Union[MetaOapg.properties.customAmount1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customAmount2: typing.Union[MetaOapg.properties.customAmount2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        customDate: typing.Union[MetaOapg.properties.customDate, str, datetime, schemas.Unset] = schemas.unset,
        dateSuspendedFrom: typing.Union[MetaOapg.properties.dateSuspendedFrom, str, datetime, schemas.Unset] = schemas.unset,
        dateSuspendedTo: typing.Union[MetaOapg.properties.dateSuspendedTo, str, datetime, schemas.Unset] = schemas.unset,
        datetimeChanged: typing.Union[MetaOapg.properties.datetimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        datetimeCreated: typing.Union[MetaOapg.properties.datetimeCreated, str, datetime, schemas.Unset] = schemas.unset,
        declinedByCarrier: typing.Union[MetaOapg.properties.declinedByCarrier, str, schemas.Unset] = schemas.unset,
        declinedByCarrierDate: typing.Union[MetaOapg.properties.declinedByCarrierDate, str, datetime, schemas.Unset] = schemas.unset,
        declinedByCarrierReason: typing.Union[MetaOapg.properties.declinedByCarrierReason, str, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        effectiveRecordID: typing.Union[MetaOapg.properties.effectiveRecordID, str, schemas.Unset] = schemas.unset,
        contactID: typing.Union[MetaOapg.properties.contactID, str, schemas.Unset] = schemas.unset,
        memberOrCaseNumber: typing.Union[MetaOapg.properties.memberOrCaseNumber, str, schemas.Unset] = schemas.unset,
        employeeAmount: typing.Union[MetaOapg.properties.employeeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeCalcRateOrPct: typing.Union[MetaOapg.properties.employeeCalcRateOrPct, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeCalcRule: typing.Union[MetaOapg.properties.employeeCalcRule, str, schemas.Unset] = schemas.unset,
        employeeCauseNumber: typing.Union[MetaOapg.properties.employeeCauseNumber, str, schemas.Unset] = schemas.unset,
        employeeDedLastPaid: typing.Union[MetaOapg.properties.employeeDedLastPaid, str, datetime, schemas.Unset] = schemas.unset,
        employeeEligibilityDate: typing.Union[MetaOapg.properties.employeeEligibilityDate, str, datetime, schemas.Unset] = schemas.unset,
        employeeFiscalYTDAmt: typing.Union[MetaOapg.properties.employeeFiscalYTDAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeGoalAmt: typing.Union[MetaOapg.properties.employeeGoalAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeGoalToDateAmt: typing.Union[MetaOapg.properties.employeeGoalToDateAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeID: typing.Union[MetaOapg.properties.employeeID, str, schemas.Unset] = schemas.unset,
        employeeLastAmount: typing.Union[MetaOapg.properties.employeeLastAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeMonthToDateAmount: typing.Union[MetaOapg.properties.employeeMonthToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeQuarterToDateAmount: typing.Union[MetaOapg.properties.employeeQuarterToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeeYearToDateAmount: typing.Union[MetaOapg.properties.employeeYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        evidenceOfInsurabilityDate: typing.Union[MetaOapg.properties.evidenceOfInsurabilityDate, str, datetime, schemas.Unset] = schemas.unset,
        evidenceOfInsurabilityDesiredAmt: typing.Union[MetaOapg.properties.evidenceOfInsurabilityDesiredAmt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        evidenceOfInsurabilityDesiredCalcRateOrPct: typing.Union[MetaOapg.properties.evidenceOfInsurabilityDesiredCalcRateOrPct, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerAmount: typing.Union[MetaOapg.properties.employerAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerCalcRateOrPct: typing.Union[MetaOapg.properties.employerCalcRateOrPct, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerCalcRule: typing.Union[MetaOapg.properties.employerCalcRule, str, schemas.Unset] = schemas.unset,
        employerFiscalYearToDateAmount: typing.Union[MetaOapg.properties.employerFiscalYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerLastAmount: typing.Union[MetaOapg.properties.employerLastAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerMonthToDateAmount: typing.Union[MetaOapg.properties.employerMonthToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerQuarterToDateAmount: typing.Union[MetaOapg.properties.employerQuarterToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerYearToDateAmount: typing.Union[MetaOapg.properties.employerYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interestAmount: typing.Union[MetaOapg.properties.interestAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isDeductionOffset: typing.Union[MetaOapg.properties.isDeductionOffset, bool, schemas.Unset] = schemas.unset,
        medicalIndicator: typing.Union[MetaOapg.properties.medicalIndicator, bool, schemas.Unset] = schemas.unset,
        needEvidenceOfInsurability: typing.Union[MetaOapg.properties.needEvidenceOfInsurability, bool, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        primaryCarePhysician: typing.Union[MetaOapg.properties.primaryCarePhysician, str, schemas.Unset] = schemas.unset,
        primaryCarePhysicianId: typing.Union[MetaOapg.properties.primaryCarePhysicianId, str, schemas.Unset] = schemas.unset,
        priorEmployeeAmount: typing.Union[MetaOapg.properties.priorEmployeeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priorEmployeeGoalAmount: typing.Union[MetaOapg.properties.priorEmployeeGoalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priorEmployeeYearToDateAmount: typing.Union[MetaOapg.properties.priorEmployeeYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priorEmployerYearToDateAmount: typing.Union[MetaOapg.properties.priorEmployerYearToDateAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        deductionStartDate: typing.Union[MetaOapg.properties.deductionStartDate, str, datetime, schemas.Unset] = schemas.unset,
        deductionStopDate: typing.Union[MetaOapg.properties.deductionStopDate, str, datetime, schemas.Unset] = schemas.unset,
        systemID: typing.Union[MetaOapg.properties.systemID, str, schemas.Unset] = schemas.unset,
        waiveReason: typing.Union[MetaOapg.properties.waiveReason, str, schemas.Unset] = schemas.unset,
        isHomeCompany: typing.Union[MetaOapg.properties.isHomeCompany, bool, schemas.Unset] = schemas.unset,
        isWaived: typing.Union[MetaOapg.properties.isWaived, bool, schemas.Unset] = schemas.unset,
        includeInAdditionalCheck: typing.Union[MetaOapg.properties.includeInAdditionalCheck, bool, schemas.Unset] = schemas.unset,
        includeInManualCheck: typing.Union[MetaOapg.properties.includeInManualCheck, bool, schemas.Unset] = schemas.unset,
        employeePerCapAmount: typing.Union[MetaOapg.properties.employeePerCapAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeePerCapPercent: typing.Union[MetaOapg.properties.employeePerCapPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employeePerCapCalcRule: typing.Union[MetaOapg.properties.employeePerCapCalcRule, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        dedCode: typing.Union[MetaOapg.properties.dedCode, str, schemas.Unset] = schemas.unset,
        benStatus: typing.Union[MetaOapg.properties.benStatus, str, schemas.Unset] = schemas.unset,
        endDateTime: typing.Union[MetaOapg.properties.endDateTime, str, datetime, schemas.Unset] = schemas.unset,
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        per_Page: typing.Union[MetaOapg.properties.per_Page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmpDeductions':
        return super().__new__(
            cls,
            *args,
            arrearsAmt=arrearsAmt,
            benefitAmount=benefitAmount,
            benefitAmountCalcRule=benefitAmountCalcRule,
            benefitAmountRateOrPercent=benefitAmountRateOrPercent,
            benefitOption=benefitOption,
            benefitStartDate=benefitStartDate,
            benefitStatus=benefitStatus,
            benefitStatusDate=benefitStatusDate,
            benefitStopDate=benefitStopDate,
            companyID=companyID,
            customAmount1=customAmount1,
            customAmount2=customAmount2,
            customDate=customDate,
            dateSuspendedFrom=dateSuspendedFrom,
            dateSuspendedTo=dateSuspendedTo,
            datetimeChanged=datetimeChanged,
            datetimeCreated=datetimeCreated,
            declinedByCarrier=declinedByCarrier,
            declinedByCarrierDate=declinedByCarrierDate,
            declinedByCarrierReason=declinedByCarrierReason,
            deductionCode=deductionCode,
            effectiveRecordID=effectiveRecordID,
            contactID=contactID,
            memberOrCaseNumber=memberOrCaseNumber,
            employeeAmount=employeeAmount,
            employeeCalcRateOrPct=employeeCalcRateOrPct,
            employeeCalcRule=employeeCalcRule,
            employeeCauseNumber=employeeCauseNumber,
            employeeDedLastPaid=employeeDedLastPaid,
            employeeEligibilityDate=employeeEligibilityDate,
            employeeFiscalYTDAmt=employeeFiscalYTDAmt,
            employeeGoalAmt=employeeGoalAmt,
            employeeGoalToDateAmt=employeeGoalToDateAmt,
            employeeID=employeeID,
            employeeLastAmount=employeeLastAmount,
            employeeMonthToDateAmount=employeeMonthToDateAmount,
            employeeQuarterToDateAmount=employeeQuarterToDateAmount,
            employeeYearToDateAmount=employeeYearToDateAmount,
            evidenceOfInsurabilityDate=evidenceOfInsurabilityDate,
            evidenceOfInsurabilityDesiredAmt=evidenceOfInsurabilityDesiredAmt,
            evidenceOfInsurabilityDesiredCalcRateOrPct=evidenceOfInsurabilityDesiredCalcRateOrPct,
            employerAmount=employerAmount,
            employerCalcRateOrPct=employerCalcRateOrPct,
            employerCalcRule=employerCalcRule,
            employerFiscalYearToDateAmount=employerFiscalYearToDateAmount,
            employerLastAmount=employerLastAmount,
            employerMonthToDateAmount=employerMonthToDateAmount,
            employerQuarterToDateAmount=employerQuarterToDateAmount,
            employerYearToDateAmount=employerYearToDateAmount,
            interestAmount=interestAmount,
            isDeductionOffset=isDeductionOffset,
            medicalIndicator=medicalIndicator,
            needEvidenceOfInsurability=needEvidenceOfInsurability,
            notes=notes,
            primaryCarePhysician=primaryCarePhysician,
            primaryCarePhysicianId=primaryCarePhysicianId,
            priorEmployeeAmount=priorEmployeeAmount,
            priorEmployeeGoalAmount=priorEmployeeGoalAmount,
            priorEmployeeYearToDateAmount=priorEmployeeYearToDateAmount,
            priorEmployerYearToDateAmount=priorEmployerYearToDateAmount,
            deductionStartDate=deductionStartDate,
            deductionStopDate=deductionStopDate,
            systemID=systemID,
            waiveReason=waiveReason,
            isHomeCompany=isHomeCompany,
            isWaived=isWaived,
            includeInAdditionalCheck=includeInAdditionalCheck,
            includeInManualCheck=includeInManualCheck,
            employeePerCapAmount=employeePerCapAmount,
            employeePerCapPercent=employeePerCapPercent,
            employeePerCapCalcRule=employeePerCapCalcRule,
            employeeId=employeeId,
            companyId=companyId,
            dedCode=dedCode,
            benStatus=benStatus,
            endDateTime=endDateTime,
            page=page,
            per_Page=per_Page,
            _configuration=_configuration,
            **kwargs,
        )
