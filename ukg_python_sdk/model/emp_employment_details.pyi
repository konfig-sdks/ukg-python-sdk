# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmpEmploymentDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            companyID = schemas.StrSchema
            companyCode = schemas.StrSchema
            companyName = schemas.StrSchema
            employeeID = schemas.StrSchema
            jobDescription = schemas.StrSchema
            payGroupDescription = schemas.StrSchema
            primaryJobCode = schemas.StrSchema
            orgLevel1Code = schemas.StrSchema
            orgLevel2Code = schemas.StrSchema
            orgLevel3Code = schemas.StrSchema
            orgLevel4Code = schemas.StrSchema
            originalHireDate = schemas.DateTimeSchema
            lastHireDate = schemas.DateTimeSchema
            fullTimeOrPartTimeCode = schemas.StrSchema
            primaryWorkLocationCode = schemas.StrSchema
            languageCode = schemas.StrSchema
            primaryProjectCode = schemas.StrSchema
            workPhoneNumber = schemas.StrSchema
            workPhoneExtension = schemas.StrSchema
            workPhoneCountry = schemas.StrSchema
            dateInJob = schemas.DateTimeSchema
            dateLastWorked = schemas.DateTimeSchema
            dateOfBenefitSeniority = schemas.DateTimeSchema
            dateOfSeniority = schemas.DateTimeSchema
            deductionGroupCode = schemas.StrSchema
            earningGroupCode = schemas.StrSchema
            employeeTypeCode = schemas.StrSchema
            employeeStatusCode = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            jobChangeReasonCode = schemas.StrSchema
            jobTitle = schemas.StrSchema
            leaveReasonCode = schemas.StrSchema
            supervisorID = schemas.StrSchema
            supervisorFirstName = schemas.StrSchema
            supervisorLastName = schemas.StrSchema
            autoAllocate = schemas.StrSchema
            clockCode = schemas.StrSchema
            dateLastPayDatePaid = schemas.DateTimeSchema
            dateOfEarlyRetirement = schemas.DateTimeSchema
            dateOfLocalUnion = schemas.DateTimeSchema
            dateOfNationalUnion = schemas.DateTimeSchema
            dateOfRetirement = schemas.DateTimeSchema
            dateOfSuspension = schemas.DateTimeSchema
            dateOfTermination = schemas.DateTimeSchema
            datePaidThru = schemas.DateTimeSchema
            statusStartDate = schemas.DateTimeSchema
            hireSource = schemas.StrSchema
            isAutoAllocated = schemas.StrSchema
            isAutopaid = schemas.StrSchema
            isMultipleJob = schemas.StrSchema
            jobGroupCode = schemas.StrSchema
            mailstop = schemas.StrSchema
            okToRehire = schemas.StrSchema
            payGroup = schemas.StrSchema
            payPeriod = schemas.StrSchema
            plannedLeaveReason = schemas.StrSchema
            positionCode = schemas.StrSchema
            salaryOrHourly = schemas.StrSchema
            scheduledAnnualHrs = schemas.Float64Schema
            scheduledFTE = schemas.Float64Schema
            scheduledWorkHrs = schemas.Float64Schema
            shift = schemas.StrSchema
            shiftGroup = schemas.StrSchema
            termReason = schemas.StrSchema
            terminationReasonDescription = schemas.StrSchema
            termType = schemas.StrSchema
            timeclockID = schemas.StrSchema
            unionLocal = schemas.StrSchema
            unionNational = schemas.StrSchema
            weeklyHours = schemas.Float64Schema
            dateTimeCreated = schemas.DateTimeSchema
            dateTimeChanged = schemas.DateTimeSchema
            supervisorEmployeeNumber = schemas.StrSchema
            supervisorCOID = schemas.StrSchema
            supervisorCompanyCode = schemas.StrSchema
            companyGLSegment = schemas.StrSchema
            locationGLSegment = schemas.StrSchema
            __annotations__ = {
                "companyID": companyID,
                "companyCode": companyCode,
                "companyName": companyName,
                "employeeID": employeeID,
                "jobDescription": jobDescription,
                "payGroupDescription": payGroupDescription,
                "primaryJobCode": primaryJobCode,
                "orgLevel1Code": orgLevel1Code,
                "orgLevel2Code": orgLevel2Code,
                "orgLevel3Code": orgLevel3Code,
                "orgLevel4Code": orgLevel4Code,
                "originalHireDate": originalHireDate,
                "lastHireDate": lastHireDate,
                "fullTimeOrPartTimeCode": fullTimeOrPartTimeCode,
                "primaryWorkLocationCode": primaryWorkLocationCode,
                "languageCode": languageCode,
                "primaryProjectCode": primaryProjectCode,
                "workPhoneNumber": workPhoneNumber,
                "workPhoneExtension": workPhoneExtension,
                "workPhoneCountry": workPhoneCountry,
                "dateInJob": dateInJob,
                "dateLastWorked": dateLastWorked,
                "dateOfBenefitSeniority": dateOfBenefitSeniority,
                "dateOfSeniority": dateOfSeniority,
                "deductionGroupCode": deductionGroupCode,
                "earningGroupCode": earningGroupCode,
                "employeeTypeCode": employeeTypeCode,
                "employeeStatusCode": employeeStatusCode,
                "employeeNumber": employeeNumber,
                "jobChangeReasonCode": jobChangeReasonCode,
                "jobTitle": jobTitle,
                "leaveReasonCode": leaveReasonCode,
                "supervisorID": supervisorID,
                "supervisorFirstName": supervisorFirstName,
                "supervisorLastName": supervisorLastName,
                "autoAllocate": autoAllocate,
                "clockCode": clockCode,
                "dateLastPayDatePaid": dateLastPayDatePaid,
                "dateOfEarlyRetirement": dateOfEarlyRetirement,
                "dateOfLocalUnion": dateOfLocalUnion,
                "dateOfNationalUnion": dateOfNationalUnion,
                "dateOfRetirement": dateOfRetirement,
                "dateOfSuspension": dateOfSuspension,
                "dateOfTermination": dateOfTermination,
                "datePaidThru": datePaidThru,
                "statusStartDate": statusStartDate,
                "hireSource": hireSource,
                "isAutoAllocated": isAutoAllocated,
                "isAutopaid": isAutopaid,
                "isMultipleJob": isMultipleJob,
                "jobGroupCode": jobGroupCode,
                "mailstop": mailstop,
                "okToRehire": okToRehire,
                "payGroup": payGroup,
                "payPeriod": payPeriod,
                "plannedLeaveReason": plannedLeaveReason,
                "positionCode": positionCode,
                "salaryOrHourly": salaryOrHourly,
                "scheduledAnnualHrs": scheduledAnnualHrs,
                "scheduledFTE": scheduledFTE,
                "scheduledWorkHrs": scheduledWorkHrs,
                "shift": shift,
                "shiftGroup": shiftGroup,
                "termReason": termReason,
                "terminationReasonDescription": terminationReasonDescription,
                "termType": termType,
                "timeclockID": timeclockID,
                "unionLocal": unionLocal,
                "unionNational": unionNational,
                "weeklyHours": weeklyHours,
                "dateTimeCreated": dateTimeCreated,
                "dateTimeChanged": dateTimeChanged,
                "supervisorEmployeeNumber": supervisorEmployeeNumber,
                "supervisorCOID": supervisorCOID,
                "supervisorCompanyCode": supervisorCompanyCode,
                "companyGLSegment": companyGLSegment,
                "locationGLSegment": locationGLSegment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeID"]) -> MetaOapg.properties.employeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobDescription"]) -> MetaOapg.properties.jobDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroupDescription"]) -> MetaOapg.properties.payGroupDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryJobCode"]) -> MetaOapg.properties.primaryJobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel1Code"]) -> MetaOapg.properties.orgLevel1Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel2Code"]) -> MetaOapg.properties.orgLevel2Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel3Code"]) -> MetaOapg.properties.orgLevel3Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel4Code"]) -> MetaOapg.properties.orgLevel4Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalHireDate"]) -> MetaOapg.properties.originalHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastHireDate"]) -> MetaOapg.properties.lastHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> MetaOapg.properties.fullTimeOrPartTimeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryWorkLocationCode"]) -> MetaOapg.properties.primaryWorkLocationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryProjectCode"]) -> MetaOapg.properties.primaryProjectCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneNumber"]) -> MetaOapg.properties.workPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneExtension"]) -> MetaOapg.properties.workPhoneExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneCountry"]) -> MetaOapg.properties.workPhoneCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateInJob"]) -> MetaOapg.properties.dateInJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateLastWorked"]) -> MetaOapg.properties.dateLastWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBenefitSeniority"]) -> MetaOapg.properties.dateOfBenefitSeniority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfSeniority"]) -> MetaOapg.properties.dateOfSeniority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionGroupCode"]) -> MetaOapg.properties.deductionGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earningGroupCode"]) -> MetaOapg.properties.earningGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeTypeCode"]) -> MetaOapg.properties.employeeTypeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatusCode"]) -> MetaOapg.properties.employeeStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobChangeReasonCode"]) -> MetaOapg.properties.jobChangeReasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveReasonCode"]) -> MetaOapg.properties.leaveReasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorID"]) -> MetaOapg.properties.supervisorID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorFirstName"]) -> MetaOapg.properties.supervisorFirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorLastName"]) -> MetaOapg.properties.supervisorLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoAllocate"]) -> MetaOapg.properties.autoAllocate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockCode"]) -> MetaOapg.properties.clockCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateLastPayDatePaid"]) -> MetaOapg.properties.dateLastPayDatePaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfEarlyRetirement"]) -> MetaOapg.properties.dateOfEarlyRetirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfLocalUnion"]) -> MetaOapg.properties.dateOfLocalUnion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfNationalUnion"]) -> MetaOapg.properties.dateOfNationalUnion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfRetirement"]) -> MetaOapg.properties.dateOfRetirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfSuspension"]) -> MetaOapg.properties.dateOfSuspension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfTermination"]) -> MetaOapg.properties.dateOfTermination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datePaidThru"]) -> MetaOapg.properties.datePaidThru: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusStartDate"]) -> MetaOapg.properties.statusStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireSource"]) -> MetaOapg.properties.hireSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAutoAllocated"]) -> MetaOapg.properties.isAutoAllocated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAutopaid"]) -> MetaOapg.properties.isAutopaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMultipleJob"]) -> MetaOapg.properties.isMultipleJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCode"]) -> MetaOapg.properties.jobGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mailstop"]) -> MetaOapg.properties.mailstop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["okToRehire"]) -> MetaOapg.properties.okToRehire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriod"]) -> MetaOapg.properties.payPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plannedLeaveReason"]) -> MetaOapg.properties.plannedLeaveReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionCode"]) -> MetaOapg.properties.positionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salaryOrHourly"]) -> MetaOapg.properties.salaryOrHourly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledAnnualHrs"]) -> MetaOapg.properties.scheduledAnnualHrs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledFTE"]) -> MetaOapg.properties.scheduledFTE: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledWorkHrs"]) -> MetaOapg.properties.scheduledWorkHrs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift"]) -> MetaOapg.properties.shift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shiftGroup"]) -> MetaOapg.properties.shiftGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termReason"]) -> MetaOapg.properties.termReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationReasonDescription"]) -> MetaOapg.properties.terminationReasonDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termType"]) -> MetaOapg.properties.termType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeclockID"]) -> MetaOapg.properties.timeclockID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionLocal"]) -> MetaOapg.properties.unionLocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionNational"]) -> MetaOapg.properties.unionNational: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeklyHours"]) -> MetaOapg.properties.weeklyHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeCreated"]) -> MetaOapg.properties.dateTimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorEmployeeNumber"]) -> MetaOapg.properties.supervisorEmployeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorCOID"]) -> MetaOapg.properties.supervisorCOID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorCompanyCode"]) -> MetaOapg.properties.supervisorCompanyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyGLSegment"]) -> MetaOapg.properties.companyGLSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationGLSegment"]) -> MetaOapg.properties.locationGLSegment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyID", "companyCode", "companyName", "employeeID", "jobDescription", "payGroupDescription", "primaryJobCode", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", "originalHireDate", "lastHireDate", "fullTimeOrPartTimeCode", "primaryWorkLocationCode", "languageCode", "primaryProjectCode", "workPhoneNumber", "workPhoneExtension", "workPhoneCountry", "dateInJob", "dateLastWorked", "dateOfBenefitSeniority", "dateOfSeniority", "deductionGroupCode", "earningGroupCode", "employeeTypeCode", "employeeStatusCode", "employeeNumber", "jobChangeReasonCode", "jobTitle", "leaveReasonCode", "supervisorID", "supervisorFirstName", "supervisorLastName", "autoAllocate", "clockCode", "dateLastPayDatePaid", "dateOfEarlyRetirement", "dateOfLocalUnion", "dateOfNationalUnion", "dateOfRetirement", "dateOfSuspension", "dateOfTermination", "datePaidThru", "statusStartDate", "hireSource", "isAutoAllocated", "isAutopaid", "isMultipleJob", "jobGroupCode", "mailstop", "okToRehire", "payGroup", "payPeriod", "plannedLeaveReason", "positionCode", "salaryOrHourly", "scheduledAnnualHrs", "scheduledFTE", "scheduledWorkHrs", "shift", "shiftGroup", "termReason", "terminationReasonDescription", "termType", "timeclockID", "unionLocal", "unionNational", "weeklyHours", "dateTimeCreated", "dateTimeChanged", "supervisorEmployeeNumber", "supervisorCOID", "supervisorCompanyCode", "companyGLSegment", "locationGLSegment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCode"]) -> typing.Union[MetaOapg.properties.companyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeID"]) -> typing.Union[MetaOapg.properties.employeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobDescription"]) -> typing.Union[MetaOapg.properties.jobDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroupDescription"]) -> typing.Union[MetaOapg.properties.payGroupDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryJobCode"]) -> typing.Union[MetaOapg.properties.primaryJobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel1Code"]) -> typing.Union[MetaOapg.properties.orgLevel1Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel2Code"]) -> typing.Union[MetaOapg.properties.orgLevel2Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel3Code"]) -> typing.Union[MetaOapg.properties.orgLevel3Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel4Code"]) -> typing.Union[MetaOapg.properties.orgLevel4Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalHireDate"]) -> typing.Union[MetaOapg.properties.originalHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastHireDate"]) -> typing.Union[MetaOapg.properties.lastHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryWorkLocationCode"]) -> typing.Union[MetaOapg.properties.primaryWorkLocationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryProjectCode"]) -> typing.Union[MetaOapg.properties.primaryProjectCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneNumber"]) -> typing.Union[MetaOapg.properties.workPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneExtension"]) -> typing.Union[MetaOapg.properties.workPhoneExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneCountry"]) -> typing.Union[MetaOapg.properties.workPhoneCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateInJob"]) -> typing.Union[MetaOapg.properties.dateInJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateLastWorked"]) -> typing.Union[MetaOapg.properties.dateLastWorked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBenefitSeniority"]) -> typing.Union[MetaOapg.properties.dateOfBenefitSeniority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfSeniority"]) -> typing.Union[MetaOapg.properties.dateOfSeniority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionGroupCode"]) -> typing.Union[MetaOapg.properties.deductionGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earningGroupCode"]) -> typing.Union[MetaOapg.properties.earningGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeTypeCode"]) -> typing.Union[MetaOapg.properties.employeeTypeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatusCode"]) -> typing.Union[MetaOapg.properties.employeeStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobChangeReasonCode"]) -> typing.Union[MetaOapg.properties.jobChangeReasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveReasonCode"]) -> typing.Union[MetaOapg.properties.leaveReasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorID"]) -> typing.Union[MetaOapg.properties.supervisorID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorFirstName"]) -> typing.Union[MetaOapg.properties.supervisorFirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorLastName"]) -> typing.Union[MetaOapg.properties.supervisorLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoAllocate"]) -> typing.Union[MetaOapg.properties.autoAllocate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockCode"]) -> typing.Union[MetaOapg.properties.clockCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateLastPayDatePaid"]) -> typing.Union[MetaOapg.properties.dateLastPayDatePaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfEarlyRetirement"]) -> typing.Union[MetaOapg.properties.dateOfEarlyRetirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfLocalUnion"]) -> typing.Union[MetaOapg.properties.dateOfLocalUnion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfNationalUnion"]) -> typing.Union[MetaOapg.properties.dateOfNationalUnion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfRetirement"]) -> typing.Union[MetaOapg.properties.dateOfRetirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfSuspension"]) -> typing.Union[MetaOapg.properties.dateOfSuspension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfTermination"]) -> typing.Union[MetaOapg.properties.dateOfTermination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datePaidThru"]) -> typing.Union[MetaOapg.properties.datePaidThru, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusStartDate"]) -> typing.Union[MetaOapg.properties.statusStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireSource"]) -> typing.Union[MetaOapg.properties.hireSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAutoAllocated"]) -> typing.Union[MetaOapg.properties.isAutoAllocated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAutopaid"]) -> typing.Union[MetaOapg.properties.isAutopaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMultipleJob"]) -> typing.Union[MetaOapg.properties.isMultipleJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCode"]) -> typing.Union[MetaOapg.properties.jobGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mailstop"]) -> typing.Union[MetaOapg.properties.mailstop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["okToRehire"]) -> typing.Union[MetaOapg.properties.okToRehire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriod"]) -> typing.Union[MetaOapg.properties.payPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plannedLeaveReason"]) -> typing.Union[MetaOapg.properties.plannedLeaveReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionCode"]) -> typing.Union[MetaOapg.properties.positionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salaryOrHourly"]) -> typing.Union[MetaOapg.properties.salaryOrHourly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledAnnualHrs"]) -> typing.Union[MetaOapg.properties.scheduledAnnualHrs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledFTE"]) -> typing.Union[MetaOapg.properties.scheduledFTE, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledWorkHrs"]) -> typing.Union[MetaOapg.properties.scheduledWorkHrs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift"]) -> typing.Union[MetaOapg.properties.shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shiftGroup"]) -> typing.Union[MetaOapg.properties.shiftGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termReason"]) -> typing.Union[MetaOapg.properties.termReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationReasonDescription"]) -> typing.Union[MetaOapg.properties.terminationReasonDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termType"]) -> typing.Union[MetaOapg.properties.termType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeclockID"]) -> typing.Union[MetaOapg.properties.timeclockID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionLocal"]) -> typing.Union[MetaOapg.properties.unionLocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionNational"]) -> typing.Union[MetaOapg.properties.unionNational, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeklyHours"]) -> typing.Union[MetaOapg.properties.weeklyHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeCreated"]) -> typing.Union[MetaOapg.properties.dateTimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorEmployeeNumber"]) -> typing.Union[MetaOapg.properties.supervisorEmployeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorCOID"]) -> typing.Union[MetaOapg.properties.supervisorCOID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorCompanyCode"]) -> typing.Union[MetaOapg.properties.supervisorCompanyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyGLSegment"]) -> typing.Union[MetaOapg.properties.companyGLSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationGLSegment"]) -> typing.Union[MetaOapg.properties.locationGLSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyID", "companyCode", "companyName", "employeeID", "jobDescription", "payGroupDescription", "primaryJobCode", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", "originalHireDate", "lastHireDate", "fullTimeOrPartTimeCode", "primaryWorkLocationCode", "languageCode", "primaryProjectCode", "workPhoneNumber", "workPhoneExtension", "workPhoneCountry", "dateInJob", "dateLastWorked", "dateOfBenefitSeniority", "dateOfSeniority", "deductionGroupCode", "earningGroupCode", "employeeTypeCode", "employeeStatusCode", "employeeNumber", "jobChangeReasonCode", "jobTitle", "leaveReasonCode", "supervisorID", "supervisorFirstName", "supervisorLastName", "autoAllocate", "clockCode", "dateLastPayDatePaid", "dateOfEarlyRetirement", "dateOfLocalUnion", "dateOfNationalUnion", "dateOfRetirement", "dateOfSuspension", "dateOfTermination", "datePaidThru", "statusStartDate", "hireSource", "isAutoAllocated", "isAutopaid", "isMultipleJob", "jobGroupCode", "mailstop", "okToRehire", "payGroup", "payPeriod", "plannedLeaveReason", "positionCode", "salaryOrHourly", "scheduledAnnualHrs", "scheduledFTE", "scheduledWorkHrs", "shift", "shiftGroup", "termReason", "terminationReasonDescription", "termType", "timeclockID", "unionLocal", "unionNational", "weeklyHours", "dateTimeCreated", "dateTimeChanged", "supervisorEmployeeNumber", "supervisorCOID", "supervisorCompanyCode", "companyGLSegment", "locationGLSegment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        companyCode: typing.Union[MetaOapg.properties.companyCode, str, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        employeeID: typing.Union[MetaOapg.properties.employeeID, str, schemas.Unset] = schemas.unset,
        jobDescription: typing.Union[MetaOapg.properties.jobDescription, str, schemas.Unset] = schemas.unset,
        payGroupDescription: typing.Union[MetaOapg.properties.payGroupDescription, str, schemas.Unset] = schemas.unset,
        primaryJobCode: typing.Union[MetaOapg.properties.primaryJobCode, str, schemas.Unset] = schemas.unset,
        orgLevel1Code: typing.Union[MetaOapg.properties.orgLevel1Code, str, schemas.Unset] = schemas.unset,
        orgLevel2Code: typing.Union[MetaOapg.properties.orgLevel2Code, str, schemas.Unset] = schemas.unset,
        orgLevel3Code: typing.Union[MetaOapg.properties.orgLevel3Code, str, schemas.Unset] = schemas.unset,
        orgLevel4Code: typing.Union[MetaOapg.properties.orgLevel4Code, str, schemas.Unset] = schemas.unset,
        originalHireDate: typing.Union[MetaOapg.properties.originalHireDate, str, datetime, schemas.Unset] = schemas.unset,
        lastHireDate: typing.Union[MetaOapg.properties.lastHireDate, str, datetime, schemas.Unset] = schemas.unset,
        fullTimeOrPartTimeCode: typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, str, schemas.Unset] = schemas.unset,
        primaryWorkLocationCode: typing.Union[MetaOapg.properties.primaryWorkLocationCode, str, schemas.Unset] = schemas.unset,
        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
        primaryProjectCode: typing.Union[MetaOapg.properties.primaryProjectCode, str, schemas.Unset] = schemas.unset,
        workPhoneNumber: typing.Union[MetaOapg.properties.workPhoneNumber, str, schemas.Unset] = schemas.unset,
        workPhoneExtension: typing.Union[MetaOapg.properties.workPhoneExtension, str, schemas.Unset] = schemas.unset,
        workPhoneCountry: typing.Union[MetaOapg.properties.workPhoneCountry, str, schemas.Unset] = schemas.unset,
        dateInJob: typing.Union[MetaOapg.properties.dateInJob, str, datetime, schemas.Unset] = schemas.unset,
        dateLastWorked: typing.Union[MetaOapg.properties.dateLastWorked, str, datetime, schemas.Unset] = schemas.unset,
        dateOfBenefitSeniority: typing.Union[MetaOapg.properties.dateOfBenefitSeniority, str, datetime, schemas.Unset] = schemas.unset,
        dateOfSeniority: typing.Union[MetaOapg.properties.dateOfSeniority, str, datetime, schemas.Unset] = schemas.unset,
        deductionGroupCode: typing.Union[MetaOapg.properties.deductionGroupCode, str, schemas.Unset] = schemas.unset,
        earningGroupCode: typing.Union[MetaOapg.properties.earningGroupCode, str, schemas.Unset] = schemas.unset,
        employeeTypeCode: typing.Union[MetaOapg.properties.employeeTypeCode, str, schemas.Unset] = schemas.unset,
        employeeStatusCode: typing.Union[MetaOapg.properties.employeeStatusCode, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        jobChangeReasonCode: typing.Union[MetaOapg.properties.jobChangeReasonCode, str, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, str, schemas.Unset] = schemas.unset,
        leaveReasonCode: typing.Union[MetaOapg.properties.leaveReasonCode, str, schemas.Unset] = schemas.unset,
        supervisorID: typing.Union[MetaOapg.properties.supervisorID, str, schemas.Unset] = schemas.unset,
        supervisorFirstName: typing.Union[MetaOapg.properties.supervisorFirstName, str, schemas.Unset] = schemas.unset,
        supervisorLastName: typing.Union[MetaOapg.properties.supervisorLastName, str, schemas.Unset] = schemas.unset,
        autoAllocate: typing.Union[MetaOapg.properties.autoAllocate, str, schemas.Unset] = schemas.unset,
        clockCode: typing.Union[MetaOapg.properties.clockCode, str, schemas.Unset] = schemas.unset,
        dateLastPayDatePaid: typing.Union[MetaOapg.properties.dateLastPayDatePaid, str, datetime, schemas.Unset] = schemas.unset,
        dateOfEarlyRetirement: typing.Union[MetaOapg.properties.dateOfEarlyRetirement, str, datetime, schemas.Unset] = schemas.unset,
        dateOfLocalUnion: typing.Union[MetaOapg.properties.dateOfLocalUnion, str, datetime, schemas.Unset] = schemas.unset,
        dateOfNationalUnion: typing.Union[MetaOapg.properties.dateOfNationalUnion, str, datetime, schemas.Unset] = schemas.unset,
        dateOfRetirement: typing.Union[MetaOapg.properties.dateOfRetirement, str, datetime, schemas.Unset] = schemas.unset,
        dateOfSuspension: typing.Union[MetaOapg.properties.dateOfSuspension, str, datetime, schemas.Unset] = schemas.unset,
        dateOfTermination: typing.Union[MetaOapg.properties.dateOfTermination, str, datetime, schemas.Unset] = schemas.unset,
        datePaidThru: typing.Union[MetaOapg.properties.datePaidThru, str, datetime, schemas.Unset] = schemas.unset,
        statusStartDate: typing.Union[MetaOapg.properties.statusStartDate, str, datetime, schemas.Unset] = schemas.unset,
        hireSource: typing.Union[MetaOapg.properties.hireSource, str, schemas.Unset] = schemas.unset,
        isAutoAllocated: typing.Union[MetaOapg.properties.isAutoAllocated, str, schemas.Unset] = schemas.unset,
        isAutopaid: typing.Union[MetaOapg.properties.isAutopaid, str, schemas.Unset] = schemas.unset,
        isMultipleJob: typing.Union[MetaOapg.properties.isMultipleJob, str, schemas.Unset] = schemas.unset,
        jobGroupCode: typing.Union[MetaOapg.properties.jobGroupCode, str, schemas.Unset] = schemas.unset,
        mailstop: typing.Union[MetaOapg.properties.mailstop, str, schemas.Unset] = schemas.unset,
        okToRehire: typing.Union[MetaOapg.properties.okToRehire, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        payPeriod: typing.Union[MetaOapg.properties.payPeriod, str, schemas.Unset] = schemas.unset,
        plannedLeaveReason: typing.Union[MetaOapg.properties.plannedLeaveReason, str, schemas.Unset] = schemas.unset,
        positionCode: typing.Union[MetaOapg.properties.positionCode, str, schemas.Unset] = schemas.unset,
        salaryOrHourly: typing.Union[MetaOapg.properties.salaryOrHourly, str, schemas.Unset] = schemas.unset,
        scheduledAnnualHrs: typing.Union[MetaOapg.properties.scheduledAnnualHrs, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scheduledFTE: typing.Union[MetaOapg.properties.scheduledFTE, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scheduledWorkHrs: typing.Union[MetaOapg.properties.scheduledWorkHrs, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shift: typing.Union[MetaOapg.properties.shift, str, schemas.Unset] = schemas.unset,
        shiftGroup: typing.Union[MetaOapg.properties.shiftGroup, str, schemas.Unset] = schemas.unset,
        termReason: typing.Union[MetaOapg.properties.termReason, str, schemas.Unset] = schemas.unset,
        terminationReasonDescription: typing.Union[MetaOapg.properties.terminationReasonDescription, str, schemas.Unset] = schemas.unset,
        termType: typing.Union[MetaOapg.properties.termType, str, schemas.Unset] = schemas.unset,
        timeclockID: typing.Union[MetaOapg.properties.timeclockID, str, schemas.Unset] = schemas.unset,
        unionLocal: typing.Union[MetaOapg.properties.unionLocal, str, schemas.Unset] = schemas.unset,
        unionNational: typing.Union[MetaOapg.properties.unionNational, str, schemas.Unset] = schemas.unset,
        weeklyHours: typing.Union[MetaOapg.properties.weeklyHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dateTimeCreated: typing.Union[MetaOapg.properties.dateTimeCreated, str, datetime, schemas.Unset] = schemas.unset,
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        supervisorEmployeeNumber: typing.Union[MetaOapg.properties.supervisorEmployeeNumber, str, schemas.Unset] = schemas.unset,
        supervisorCOID: typing.Union[MetaOapg.properties.supervisorCOID, str, schemas.Unset] = schemas.unset,
        supervisorCompanyCode: typing.Union[MetaOapg.properties.supervisorCompanyCode, str, schemas.Unset] = schemas.unset,
        companyGLSegment: typing.Union[MetaOapg.properties.companyGLSegment, str, schemas.Unset] = schemas.unset,
        locationGLSegment: typing.Union[MetaOapg.properties.locationGLSegment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmpEmploymentDetails':
        return super().__new__(
            cls,
            *args,
            companyID=companyID,
            companyCode=companyCode,
            companyName=companyName,
            employeeID=employeeID,
            jobDescription=jobDescription,
            payGroupDescription=payGroupDescription,
            primaryJobCode=primaryJobCode,
            orgLevel1Code=orgLevel1Code,
            orgLevel2Code=orgLevel2Code,
            orgLevel3Code=orgLevel3Code,
            orgLevel4Code=orgLevel4Code,
            originalHireDate=originalHireDate,
            lastHireDate=lastHireDate,
            fullTimeOrPartTimeCode=fullTimeOrPartTimeCode,
            primaryWorkLocationCode=primaryWorkLocationCode,
            languageCode=languageCode,
            primaryProjectCode=primaryProjectCode,
            workPhoneNumber=workPhoneNumber,
            workPhoneExtension=workPhoneExtension,
            workPhoneCountry=workPhoneCountry,
            dateInJob=dateInJob,
            dateLastWorked=dateLastWorked,
            dateOfBenefitSeniority=dateOfBenefitSeniority,
            dateOfSeniority=dateOfSeniority,
            deductionGroupCode=deductionGroupCode,
            earningGroupCode=earningGroupCode,
            employeeTypeCode=employeeTypeCode,
            employeeStatusCode=employeeStatusCode,
            employeeNumber=employeeNumber,
            jobChangeReasonCode=jobChangeReasonCode,
            jobTitle=jobTitle,
            leaveReasonCode=leaveReasonCode,
            supervisorID=supervisorID,
            supervisorFirstName=supervisorFirstName,
            supervisorLastName=supervisorLastName,
            autoAllocate=autoAllocate,
            clockCode=clockCode,
            dateLastPayDatePaid=dateLastPayDatePaid,
            dateOfEarlyRetirement=dateOfEarlyRetirement,
            dateOfLocalUnion=dateOfLocalUnion,
            dateOfNationalUnion=dateOfNationalUnion,
            dateOfRetirement=dateOfRetirement,
            dateOfSuspension=dateOfSuspension,
            dateOfTermination=dateOfTermination,
            datePaidThru=datePaidThru,
            statusStartDate=statusStartDate,
            hireSource=hireSource,
            isAutoAllocated=isAutoAllocated,
            isAutopaid=isAutopaid,
            isMultipleJob=isMultipleJob,
            jobGroupCode=jobGroupCode,
            mailstop=mailstop,
            okToRehire=okToRehire,
            payGroup=payGroup,
            payPeriod=payPeriod,
            plannedLeaveReason=plannedLeaveReason,
            positionCode=positionCode,
            salaryOrHourly=salaryOrHourly,
            scheduledAnnualHrs=scheduledAnnualHrs,
            scheduledFTE=scheduledFTE,
            scheduledWorkHrs=scheduledWorkHrs,
            shift=shift,
            shiftGroup=shiftGroup,
            termReason=termReason,
            terminationReasonDescription=terminationReasonDescription,
            termType=termType,
            timeclockID=timeclockID,
            unionLocal=unionLocal,
            unionNational=unionNational,
            weeklyHours=weeklyHours,
            dateTimeCreated=dateTimeCreated,
            dateTimeChanged=dateTimeChanged,
            supervisorEmployeeNumber=supervisorEmployeeNumber,
            supervisorCOID=supervisorCOID,
            supervisorCompanyCode=supervisorCompanyCode,
            companyGLSegment=companyGLSegment,
            locationGLSegment=locationGLSegment,
            _configuration=_configuration,
            **kwargs,
        )
