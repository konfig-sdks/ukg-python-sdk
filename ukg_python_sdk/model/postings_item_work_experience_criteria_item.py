# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class PostingsItemWorkExperienceCriteriaItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def description() -> typing.Type['Translations']:
                return Translations
            is_required = schemas.BoolSchema
            minimum_years = schemas.NumberSchema
            maximum_years = schemas.NumberSchema
            __annotations__ = {
                "description": description,
                "is_required": is_required,
                "minimum_years": minimum_years,
                "maximum_years": maximum_years,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'Translations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_years"]) -> MetaOapg.properties.minimum_years: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_years"]) -> MetaOapg.properties.maximum_years: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "is_required", "minimum_years", "maximum_years", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['Translations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_required"]) -> typing.Union[MetaOapg.properties.is_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_years"]) -> typing.Union[MetaOapg.properties.minimum_years, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_years"]) -> typing.Union[MetaOapg.properties.maximum_years, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "is_required", "minimum_years", "maximum_years", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union['Translations', schemas.Unset] = schemas.unset,
        is_required: typing.Union[MetaOapg.properties.is_required, bool, schemas.Unset] = schemas.unset,
        minimum_years: typing.Union[MetaOapg.properties.minimum_years, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maximum_years: typing.Union[MetaOapg.properties.maximum_years, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostingsItemWorkExperienceCriteriaItem':
        return super().__new__(
            cls,
            *args,
            description=description,
            is_required=is_required,
            minimum_years=minimum_years,
            maximum_years=maximum_years,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.translations import Translations
