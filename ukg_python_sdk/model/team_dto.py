# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class TeamDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            locName = schemas.StrSchema
            locDesc = schemas.StrSchema
            name = schemas.StrSchema
            supervisor = schemas.BoolSchema
        
            @staticmethod
            def supervisors() -> typing.Type['TeamDtoSupervisors']:
                return TeamDtoSupervisors
            __annotations__ = {
                "id": id,
                "locName": locName,
                "locDesc": locDesc,
                "name": name,
                "supervisor": supervisor,
                "supervisors": supervisors,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locName"]) -> MetaOapg.properties.locName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locDesc"]) -> MetaOapg.properties.locDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisor"]) -> MetaOapg.properties.supervisor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisors"]) -> 'TeamDtoSupervisors': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "locName", "locDesc", "name", "supervisor", "supervisors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locName"]) -> typing.Union[MetaOapg.properties.locName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locDesc"]) -> typing.Union[MetaOapg.properties.locDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisor"]) -> typing.Union[MetaOapg.properties.supervisor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisors"]) -> typing.Union['TeamDtoSupervisors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "locName", "locDesc", "name", "supervisor", "supervisors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locName: typing.Union[MetaOapg.properties.locName, str, schemas.Unset] = schemas.unset,
        locDesc: typing.Union[MetaOapg.properties.locDesc, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        supervisor: typing.Union[MetaOapg.properties.supervisor, bool, schemas.Unset] = schemas.unset,
        supervisors: typing.Union['TeamDtoSupervisors', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamDto':
        return super().__new__(
            cls,
            *args,
            id=id,
            locName=locName,
            locDesc=locDesc,
            name=name,
            supervisor=supervisor,
            supervisors=supervisors,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.team_dto_supervisors import TeamDtoSupervisors
