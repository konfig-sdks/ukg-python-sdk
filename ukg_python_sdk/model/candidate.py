# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class Candidate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The section with details of a candidate whom the background check order is requested for
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            creator_id = schemas.StrSchema
            person_id = schemas.StrSchema
            integration = schemas.StrSchema
            is_internal = schemas.StrSchema
            is_active = schemas.StrSchema
            is_willing_to_relocate = schemas.StrSchema
        
            @staticmethod
            def preferred_locale() -> typing.Type['CandidatePreferredLocale']:
                return CandidatePreferredLocale
        
            @staticmethod
            def name() -> typing.Type['CandidateName']:
                return CandidateName
        
            @staticmethod
            def contact_info() -> typing.Type['CandidateContactInfo']:
                return CandidateContactInfo
            
            
            class skills(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Skill']:
                        return Skill
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Skill'], typing.List['Skill']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'skills':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Skill':
                    return super().__getitem__(i)
            
            
            class work_experience(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Workexperience']:
                        return Workexperience
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Workexperience'], typing.List['Workexperience']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'work_experience':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Workexperience':
                    return super().__getitem__(i)
            
            
            class educations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Educations']:
                        return Educations
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Educations'], typing.List['Educations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'educations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Educations':
                    return super().__getitem__(i)
            
            
            class licenses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Licenses']:
                        return Licenses
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Licenses'], typing.List['Licenses']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'licenses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Licenses':
                    return super().__getitem__(i)
            
            
            class behaviors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Behaviors']:
                        return Behaviors
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Behaviors'], typing.List['Behaviors']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'behaviors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Behaviors':
                    return super().__getitem__(i)
            
            
            class motivations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Motivations']:
                        return Motivations
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Motivations'], typing.List['Motivations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'motivations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Motivations':
                    return super().__getitem__(i)
        
            @staticmethod
            def roles() -> typing.Type['CandidateRoles']:
                return CandidateRoles
            
            
            class hyperlinks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Hyperlinks']:
                        return Hyperlinks
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Hyperlinks'], typing.List['Hyperlinks']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hyperlinks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Hyperlinks':
                    return super().__getitem__(i)
            updated_at = schemas.StrSchema
            org_units = schemas.AnyTypeSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Links']:
                        return Links
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Links'], typing.List['Links']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Links':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "created_at": created_at,
                "creator.id": creator_id,
                "person_id": person_id,
                "integration": integration,
                "is_internal": is_internal,
                "is_active": is_active,
                "is_willing_to_relocate": is_willing_to_relocate,
                "preferred_locale": preferred_locale,
                "name": name,
                "contact_info": contact_info,
                "skills": skills,
                "work_experience": work_experience,
                "educations": educations,
                "licenses": licenses,
                "behaviors": behaviors,
                "motivations": motivations,
                "roles": roles,
                "hyperlinks": hyperlinks,
                "updated_at": updated_at,
                "org_units": org_units,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator.id"]) -> MetaOapg.properties.creator_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person_id"]) -> MetaOapg.properties.person_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration"]) -> MetaOapg.properties.integration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_internal"]) -> MetaOapg.properties.is_internal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_willing_to_relocate"]) -> MetaOapg.properties.is_willing_to_relocate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_locale"]) -> 'CandidatePreferredLocale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'CandidateName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_info"]) -> 'CandidateContactInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skills"]) -> MetaOapg.properties.skills: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_experience"]) -> MetaOapg.properties.work_experience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educations"]) -> MetaOapg.properties.educations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["behaviors"]) -> MetaOapg.properties.behaviors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motivations"]) -> MetaOapg.properties.motivations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> 'CandidateRoles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hyperlinks"]) -> MetaOapg.properties.hyperlinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_units"]) -> MetaOapg.properties.org_units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "creator.id", "person_id", "integration", "is_internal", "is_active", "is_willing_to_relocate", "preferred_locale", "name", "contact_info", "skills", "work_experience", "educations", "licenses", "behaviors", "motivations", "roles", "hyperlinks", "updated_at", "org_units", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator.id"]) -> typing.Union[MetaOapg.properties.creator_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person_id"]) -> typing.Union[MetaOapg.properties.person_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration"]) -> typing.Union[MetaOapg.properties.integration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_internal"]) -> typing.Union[MetaOapg.properties.is_internal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_willing_to_relocate"]) -> typing.Union[MetaOapg.properties.is_willing_to_relocate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_locale"]) -> typing.Union['CandidatePreferredLocale', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['CandidateName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_info"]) -> typing.Union['CandidateContactInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skills"]) -> typing.Union[MetaOapg.properties.skills, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_experience"]) -> typing.Union[MetaOapg.properties.work_experience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educations"]) -> typing.Union[MetaOapg.properties.educations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["behaviors"]) -> typing.Union[MetaOapg.properties.behaviors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motivations"]) -> typing.Union[MetaOapg.properties.motivations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union['CandidateRoles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hyperlinks"]) -> typing.Union[MetaOapg.properties.hyperlinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_units"]) -> typing.Union[MetaOapg.properties.org_units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "creator.id", "person_id", "integration", "is_internal", "is_active", "is_willing_to_relocate", "preferred_locale", "name", "contact_info", "skills", "work_experience", "educations", "licenses", "behaviors", "motivations", "roles", "hyperlinks", "updated_at", "org_units", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        person_id: typing.Union[MetaOapg.properties.person_id, str, schemas.Unset] = schemas.unset,
        integration: typing.Union[MetaOapg.properties.integration, str, schemas.Unset] = schemas.unset,
        is_internal: typing.Union[MetaOapg.properties.is_internal, str, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, str, schemas.Unset] = schemas.unset,
        is_willing_to_relocate: typing.Union[MetaOapg.properties.is_willing_to_relocate, str, schemas.Unset] = schemas.unset,
        preferred_locale: typing.Union['CandidatePreferredLocale', schemas.Unset] = schemas.unset,
        name: typing.Union['CandidateName', schemas.Unset] = schemas.unset,
        contact_info: typing.Union['CandidateContactInfo', schemas.Unset] = schemas.unset,
        skills: typing.Union[MetaOapg.properties.skills, list, tuple, schemas.Unset] = schemas.unset,
        work_experience: typing.Union[MetaOapg.properties.work_experience, list, tuple, schemas.Unset] = schemas.unset,
        educations: typing.Union[MetaOapg.properties.educations, list, tuple, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, list, tuple, schemas.Unset] = schemas.unset,
        behaviors: typing.Union[MetaOapg.properties.behaviors, list, tuple, schemas.Unset] = schemas.unset,
        motivations: typing.Union[MetaOapg.properties.motivations, list, tuple, schemas.Unset] = schemas.unset,
        roles: typing.Union['CandidateRoles', schemas.Unset] = schemas.unset,
        hyperlinks: typing.Union[MetaOapg.properties.hyperlinks, list, tuple, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        org_units: typing.Union[MetaOapg.properties.org_units, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Candidate':
        return super().__new__(
            cls,
            *args,
            id=id,
            created_at=created_at,
            person_id=person_id,
            integration=integration,
            is_internal=is_internal,
            is_active=is_active,
            is_willing_to_relocate=is_willing_to_relocate,
            preferred_locale=preferred_locale,
            name=name,
            contact_info=contact_info,
            skills=skills,
            work_experience=work_experience,
            educations=educations,
            licenses=licenses,
            behaviors=behaviors,
            motivations=motivations,
            roles=roles,
            hyperlinks=hyperlinks,
            updated_at=updated_at,
            org_units=org_units,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.behaviors import Behaviors
from ukg_python_sdk.model.candidate_contact_info import CandidateContactInfo
from ukg_python_sdk.model.candidate_name import CandidateName
from ukg_python_sdk.model.candidate_preferred_locale import CandidatePreferredLocale
from ukg_python_sdk.model.candidate_roles import CandidateRoles
from ukg_python_sdk.model.educations import Educations
from ukg_python_sdk.model.hyperlinks import Hyperlinks
from ukg_python_sdk.model.licenses import Licenses
from ukg_python_sdk.model.links import Links
from ukg_python_sdk.model.motivations import Motivations
from ukg_python_sdk.model.skill import Skill
from ukg_python_sdk.model.workexperience import Workexperience
