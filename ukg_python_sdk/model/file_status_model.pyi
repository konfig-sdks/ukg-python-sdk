# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class FileStatusModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            fileID = schemas.UUIDSchema
            fileName = schemas.StrSchema
            fileNameUnique = schemas.StrSchema
            status = schemas.StrSchema
            fileProcessDate = schemas.DateTimeSchema
            __annotations__ = {
                "fileID": fileID,
                "fileName": fileName,
                "fileNameUnique": fileNameUnique,
                "status": status,
                "fileProcessDate": fileProcessDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileID"]) -> MetaOapg.properties.fileID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileNameUnique"]) -> MetaOapg.properties.fileNameUnique: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileProcessDate"]) -> MetaOapg.properties.fileProcessDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fileID", "fileName", "fileNameUnique", "status", "fileProcessDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileID"]) -> typing.Union[MetaOapg.properties.fileID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileNameUnique"]) -> typing.Union[MetaOapg.properties.fileNameUnique, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileProcessDate"]) -> typing.Union[MetaOapg.properties.fileProcessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fileID", "fileName", "fileNameUnique", "status", "fileProcessDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fileID: typing.Union[MetaOapg.properties.fileID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        fileNameUnique: typing.Union[MetaOapg.properties.fileNameUnique, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        fileProcessDate: typing.Union[MetaOapg.properties.fileProcessDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileStatusModel':
        return super().__new__(
            cls,
            *args,
            fileID=fileID,
            fileName=fileName,
            fileNameUnique=fileNameUnique,
            status=status,
            fileProcessDate=fileProcessDate,
            _configuration=_configuration,
            **kwargs,
        )
