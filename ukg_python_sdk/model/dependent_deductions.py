# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class DependentDeductions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            benefitAmount = schemas.NumberSchema
            benefitStartDate = schemas.DateTimeSchema
            benefitStatus = schemas.StrSchema
            benefitStatusDate = schemas.DateTimeSchema
            benefitStopDate = schemas.DateTimeSchema
            certificateNo = schemas.StrSchema
            companyID = schemas.StrSchema
            contactID = schemas.StrSchema
            currentCOID = schemas.StrSchema
            dateTimeChanged = schemas.DateTimeSchema
            dateTimeCreated = schemas.DateTimeSchema
            declinedByCarrierDate = schemas.DateTimeSchema
            deductionCode = schemas.StrSchema
            deductionNotes = schemas.StrSchema
            deductionType = schemas.StrSchema
            declinedByCarrier = schemas.StrSchema
            declinedByCarrierReason = schemas.StrSchema
            depBPlanTVID = schemas.IntSchema
            systemID = schemas.StrSchema
            employeeId = schemas.StrSchema
            eoiDate = schemas.DateTimeSchema
            needEOI = schemas.BoolSchema
            primaryCarePhysician = schemas.StrSchema
            primaryCarePhysicianId = schemas.StrSchema
            isBenefitWaived = schemas.BoolSchema
            __annotations__ = {
                "benefitAmount": benefitAmount,
                "benefitStartDate": benefitStartDate,
                "benefitStatus": benefitStatus,
                "benefitStatusDate": benefitStatusDate,
                "benefitStopDate": benefitStopDate,
                "certificateNo": certificateNo,
                "companyID": companyID,
                "contactID": contactID,
                "currentCOID": currentCOID,
                "dateTimeChanged": dateTimeChanged,
                "dateTimeCreated": dateTimeCreated,
                "declinedByCarrierDate": declinedByCarrierDate,
                "deductionCode": deductionCode,
                "deductionNotes": deductionNotes,
                "deductionType": deductionType,
                "declinedByCarrier": declinedByCarrier,
                "declinedByCarrierReason": declinedByCarrierReason,
                "depBPlanTVID": depBPlanTVID,
                "systemID": systemID,
                "employeeId": employeeId,
                "eoiDate": eoiDate,
                "needEOI": needEOI,
                "primaryCarePhysician": primaryCarePhysician,
                "primaryCarePhysicianId": primaryCarePhysicianId,
                "isBenefitWaived": isBenefitWaived,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitAmount"]) -> MetaOapg.properties.benefitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStartDate"]) -> MetaOapg.properties.benefitStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatus"]) -> MetaOapg.properties.benefitStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStatusDate"]) -> MetaOapg.properties.benefitStatusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitStopDate"]) -> MetaOapg.properties.benefitStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateNo"]) -> MetaOapg.properties.certificateNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactID"]) -> MetaOapg.properties.contactID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentCOID"]) -> MetaOapg.properties.currentCOID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeCreated"]) -> MetaOapg.properties.dateTimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> MetaOapg.properties.declinedByCarrierDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionNotes"]) -> MetaOapg.properties.deductionNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionType"]) -> MetaOapg.properties.deductionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrier"]) -> MetaOapg.properties.declinedByCarrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> MetaOapg.properties.declinedByCarrierReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depBPlanTVID"]) -> MetaOapg.properties.depBPlanTVID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemID"]) -> MetaOapg.properties.systemID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eoiDate"]) -> MetaOapg.properties.eoiDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needEOI"]) -> MetaOapg.properties.needEOI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> MetaOapg.properties.primaryCarePhysician: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> MetaOapg.properties.primaryCarePhysicianId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBenefitWaived"]) -> MetaOapg.properties.isBenefitWaived: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "certificateNo", "companyID", "contactID", "currentCOID", "dateTimeChanged", "dateTimeCreated", "declinedByCarrierDate", "deductionCode", "deductionNotes", "deductionType", "declinedByCarrier", "declinedByCarrierReason", "depBPlanTVID", "systemID", "employeeId", "eoiDate", "needEOI", "primaryCarePhysician", "primaryCarePhysicianId", "isBenefitWaived", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitAmount"]) -> typing.Union[MetaOapg.properties.benefitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStartDate"]) -> typing.Union[MetaOapg.properties.benefitStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatus"]) -> typing.Union[MetaOapg.properties.benefitStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStatusDate"]) -> typing.Union[MetaOapg.properties.benefitStatusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitStopDate"]) -> typing.Union[MetaOapg.properties.benefitStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateNo"]) -> typing.Union[MetaOapg.properties.certificateNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactID"]) -> typing.Union[MetaOapg.properties.contactID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentCOID"]) -> typing.Union[MetaOapg.properties.currentCOID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeCreated"]) -> typing.Union[MetaOapg.properties.dateTimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierDate"]) -> typing.Union[MetaOapg.properties.declinedByCarrierDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionNotes"]) -> typing.Union[MetaOapg.properties.deductionNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionType"]) -> typing.Union[MetaOapg.properties.deductionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrier"]) -> typing.Union[MetaOapg.properties.declinedByCarrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declinedByCarrierReason"]) -> typing.Union[MetaOapg.properties.declinedByCarrierReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depBPlanTVID"]) -> typing.Union[MetaOapg.properties.depBPlanTVID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemID"]) -> typing.Union[MetaOapg.properties.systemID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eoiDate"]) -> typing.Union[MetaOapg.properties.eoiDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needEOI"]) -> typing.Union[MetaOapg.properties.needEOI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysician"]) -> typing.Union[MetaOapg.properties.primaryCarePhysician, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryCarePhysicianId"]) -> typing.Union[MetaOapg.properties.primaryCarePhysicianId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBenefitWaived"]) -> typing.Union[MetaOapg.properties.isBenefitWaived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["benefitAmount", "benefitStartDate", "benefitStatus", "benefitStatusDate", "benefitStopDate", "certificateNo", "companyID", "contactID", "currentCOID", "dateTimeChanged", "dateTimeCreated", "declinedByCarrierDate", "deductionCode", "deductionNotes", "deductionType", "declinedByCarrier", "declinedByCarrierReason", "depBPlanTVID", "systemID", "employeeId", "eoiDate", "needEOI", "primaryCarePhysician", "primaryCarePhysicianId", "isBenefitWaived", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        benefitAmount: typing.Union[MetaOapg.properties.benefitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        benefitStartDate: typing.Union[MetaOapg.properties.benefitStartDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStatus: typing.Union[MetaOapg.properties.benefitStatus, str, schemas.Unset] = schemas.unset,
        benefitStatusDate: typing.Union[MetaOapg.properties.benefitStatusDate, str, datetime, schemas.Unset] = schemas.unset,
        benefitStopDate: typing.Union[MetaOapg.properties.benefitStopDate, str, datetime, schemas.Unset] = schemas.unset,
        certificateNo: typing.Union[MetaOapg.properties.certificateNo, str, schemas.Unset] = schemas.unset,
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        contactID: typing.Union[MetaOapg.properties.contactID, str, schemas.Unset] = schemas.unset,
        currentCOID: typing.Union[MetaOapg.properties.currentCOID, str, schemas.Unset] = schemas.unset,
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        dateTimeCreated: typing.Union[MetaOapg.properties.dateTimeCreated, str, datetime, schemas.Unset] = schemas.unset,
        declinedByCarrierDate: typing.Union[MetaOapg.properties.declinedByCarrierDate, str, datetime, schemas.Unset] = schemas.unset,
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        deductionNotes: typing.Union[MetaOapg.properties.deductionNotes, str, schemas.Unset] = schemas.unset,
        deductionType: typing.Union[MetaOapg.properties.deductionType, str, schemas.Unset] = schemas.unset,
        declinedByCarrier: typing.Union[MetaOapg.properties.declinedByCarrier, str, schemas.Unset] = schemas.unset,
        declinedByCarrierReason: typing.Union[MetaOapg.properties.declinedByCarrierReason, str, schemas.Unset] = schemas.unset,
        depBPlanTVID: typing.Union[MetaOapg.properties.depBPlanTVID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        systemID: typing.Union[MetaOapg.properties.systemID, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        eoiDate: typing.Union[MetaOapg.properties.eoiDate, str, datetime, schemas.Unset] = schemas.unset,
        needEOI: typing.Union[MetaOapg.properties.needEOI, bool, schemas.Unset] = schemas.unset,
        primaryCarePhysician: typing.Union[MetaOapg.properties.primaryCarePhysician, str, schemas.Unset] = schemas.unset,
        primaryCarePhysicianId: typing.Union[MetaOapg.properties.primaryCarePhysicianId, str, schemas.Unset] = schemas.unset,
        isBenefitWaived: typing.Union[MetaOapg.properties.isBenefitWaived, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DependentDeductions':
        return super().__new__(
            cls,
            *args,
            benefitAmount=benefitAmount,
            benefitStartDate=benefitStartDate,
            benefitStatus=benefitStatus,
            benefitStatusDate=benefitStatusDate,
            benefitStopDate=benefitStopDate,
            certificateNo=certificateNo,
            companyID=companyID,
            contactID=contactID,
            currentCOID=currentCOID,
            dateTimeChanged=dateTimeChanged,
            dateTimeCreated=dateTimeCreated,
            declinedByCarrierDate=declinedByCarrierDate,
            deductionCode=deductionCode,
            deductionNotes=deductionNotes,
            deductionType=deductionType,
            declinedByCarrier=declinedByCarrier,
            declinedByCarrierReason=declinedByCarrierReason,
            depBPlanTVID=depBPlanTVID,
            systemID=systemID,
            employeeId=employeeId,
            eoiDate=eoiDate,
            needEOI=needEOI,
            primaryCarePhysician=primaryCarePhysician,
            primaryCarePhysicianId=primaryCarePhysicianId,
            isBenefitWaived=isBenefitWaived,
            _configuration=_configuration,
            **kwargs,
        )
