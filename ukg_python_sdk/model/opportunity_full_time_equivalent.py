# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class OpportunityFullTimeEquivalent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            budgeted = schemas.AnyTypeSchema
            filled = schemas.AnyTypeSchema
            remaining = schemas.AnyTypeSchema
            __annotations__ = {
                "budgeted": budgeted,
                "filled": filled,
                "remaining": remaining,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budgeted"]) -> MetaOapg.properties.budgeted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filled"]) -> MetaOapg.properties.filled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remaining"]) -> MetaOapg.properties.remaining: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["budgeted", "filled", "remaining", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budgeted"]) -> typing.Union[MetaOapg.properties.budgeted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filled"]) -> typing.Union[MetaOapg.properties.filled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remaining"]) -> typing.Union[MetaOapg.properties.remaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["budgeted", "filled", "remaining", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        budgeted: typing.Union[MetaOapg.properties.budgeted, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        filled: typing.Union[MetaOapg.properties.filled, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        remaining: typing.Union[MetaOapg.properties.remaining, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpportunityFullTimeEquivalent':
        return super().__new__(
            cls,
            *args,
            budgeted=budgeted,
            filled=filled,
            remaining=remaining,
            _configuration=_configuration,
            **kwargs,
        )
