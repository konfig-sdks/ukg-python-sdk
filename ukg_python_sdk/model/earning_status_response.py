# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EarningStatusResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            refId = schemas.UUIDSchema
            companyCode = schemas.StrSchema
            empNo = schemas.StrSchema
            chargeDate = schemas.DateTimeSchema
            code = schemas.StrSchema
            hours = schemas.StrSchema
            amount = schemas.StrSchema
            pieceCount = schemas.DecimalSchema
            shiftCode = schemas.StrSchema
            location = schemas.StrSchema
            job = schemas.StrSchema
            project = schemas.StrSchema
            orgLvl1 = schemas.StrSchema
            orgLvl2 = schemas.StrSchema
            orgLvl3 = schemas.StrSchema
            orgLvl4 = schemas.StrSchema
            payRate = schemas.DecimalSchema
            pieceRate = schemas.DecimalSchema
            roePayDate = schemas.DateTimeSchema
            source = schemas.StrSchema
            isImportedIntoPayroll = schemas.BoolSchema
            AdjEarnPeriodStartDate = schemas.DateTimeSchema
            AdjEarnPeriodEndDate = schemas.DateTimeSchema
            CheckSequence = schemas.IntSchema
            CreatePayType = schemas.StrSchema
            ForcePayCreation = schemas.StrSchema
            GrossUp = schemas.StrSchema
            GrossUpTarget = schemas.IntSchema
            GrossUpTaxCalcMethod = schemas.IntSchema
            __annotations__ = {
                "refId": refId,
                "companyCode": companyCode,
                "empNo": empNo,
                "chargeDate": chargeDate,
                "code": code,
                "hours": hours,
                "amount": amount,
                "pieceCount": pieceCount,
                "shiftCode": shiftCode,
                "location": location,
                "job": job,
                "project": project,
                "orgLvl1": orgLvl1,
                "orgLvl2": orgLvl2,
                "orgLvl3": orgLvl3,
                "orgLvl4": orgLvl4,
                "payRate": payRate,
                "pieceRate": pieceRate,
                "roePayDate": roePayDate,
                "source": source,
                "isImportedIntoPayroll": isImportedIntoPayroll,
                "AdjEarnPeriodStartDate": AdjEarnPeriodStartDate,
                "AdjEarnPeriodEndDate": AdjEarnPeriodEndDate,
                "CheckSequence": CheckSequence,
                "CreatePayType": CreatePayType,
                "ForcePayCreation": ForcePayCreation,
                "GrossUp": GrossUp,
                "GrossUpTarget": GrossUpTarget,
                "GrossUpTaxCalcMethod": GrossUpTaxCalcMethod,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refId"]) -> MetaOapg.properties.refId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empNo"]) -> MetaOapg.properties.empNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargeDate"]) -> MetaOapg.properties.chargeDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieceCount"]) -> MetaOapg.properties.pieceCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shiftCode"]) -> MetaOapg.properties.shiftCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl1"]) -> MetaOapg.properties.orgLvl1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl2"]) -> MetaOapg.properties.orgLvl2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl3"]) -> MetaOapg.properties.orgLvl3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLvl4"]) -> MetaOapg.properties.orgLvl4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRate"]) -> MetaOapg.properties.payRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieceRate"]) -> MetaOapg.properties.pieceRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roePayDate"]) -> MetaOapg.properties.roePayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isImportedIntoPayroll"]) -> MetaOapg.properties.isImportedIntoPayroll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AdjEarnPeriodStartDate"]) -> MetaOapg.properties.AdjEarnPeriodStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AdjEarnPeriodEndDate"]) -> MetaOapg.properties.AdjEarnPeriodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CheckSequence"]) -> MetaOapg.properties.CheckSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatePayType"]) -> MetaOapg.properties.CreatePayType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ForcePayCreation"]) -> MetaOapg.properties.ForcePayCreation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GrossUp"]) -> MetaOapg.properties.GrossUp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GrossUpTarget"]) -> MetaOapg.properties.GrossUpTarget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GrossUpTaxCalcMethod"]) -> MetaOapg.properties.GrossUpTaxCalcMethod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["refId", "companyCode", "empNo", "chargeDate", "code", "hours", "amount", "pieceCount", "shiftCode", "location", "job", "project", "orgLvl1", "orgLvl2", "orgLvl3", "orgLvl4", "payRate", "pieceRate", "roePayDate", "source", "isImportedIntoPayroll", "AdjEarnPeriodStartDate", "AdjEarnPeriodEndDate", "CheckSequence", "CreatePayType", "ForcePayCreation", "GrossUp", "GrossUpTarget", "GrossUpTaxCalcMethod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refId"]) -> typing.Union[MetaOapg.properties.refId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCode"]) -> typing.Union[MetaOapg.properties.companyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empNo"]) -> typing.Union[MetaOapg.properties.empNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargeDate"]) -> typing.Union[MetaOapg.properties.chargeDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieceCount"]) -> typing.Union[MetaOapg.properties.pieceCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shiftCode"]) -> typing.Union[MetaOapg.properties.shiftCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl1"]) -> typing.Union[MetaOapg.properties.orgLvl1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl2"]) -> typing.Union[MetaOapg.properties.orgLvl2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl3"]) -> typing.Union[MetaOapg.properties.orgLvl3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLvl4"]) -> typing.Union[MetaOapg.properties.orgLvl4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRate"]) -> typing.Union[MetaOapg.properties.payRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieceRate"]) -> typing.Union[MetaOapg.properties.pieceRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roePayDate"]) -> typing.Union[MetaOapg.properties.roePayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isImportedIntoPayroll"]) -> typing.Union[MetaOapg.properties.isImportedIntoPayroll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AdjEarnPeriodStartDate"]) -> typing.Union[MetaOapg.properties.AdjEarnPeriodStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AdjEarnPeriodEndDate"]) -> typing.Union[MetaOapg.properties.AdjEarnPeriodEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CheckSequence"]) -> typing.Union[MetaOapg.properties.CheckSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatePayType"]) -> typing.Union[MetaOapg.properties.CreatePayType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ForcePayCreation"]) -> typing.Union[MetaOapg.properties.ForcePayCreation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GrossUp"]) -> typing.Union[MetaOapg.properties.GrossUp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GrossUpTarget"]) -> typing.Union[MetaOapg.properties.GrossUpTarget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GrossUpTaxCalcMethod"]) -> typing.Union[MetaOapg.properties.GrossUpTaxCalcMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["refId", "companyCode", "empNo", "chargeDate", "code", "hours", "amount", "pieceCount", "shiftCode", "location", "job", "project", "orgLvl1", "orgLvl2", "orgLvl3", "orgLvl4", "payRate", "pieceRate", "roePayDate", "source", "isImportedIntoPayroll", "AdjEarnPeriodStartDate", "AdjEarnPeriodEndDate", "CheckSequence", "CreatePayType", "ForcePayCreation", "GrossUp", "GrossUpTarget", "GrossUpTaxCalcMethod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        refId: typing.Union[MetaOapg.properties.refId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        companyCode: typing.Union[MetaOapg.properties.companyCode, str, schemas.Unset] = schemas.unset,
        empNo: typing.Union[MetaOapg.properties.empNo, str, schemas.Unset] = schemas.unset,
        chargeDate: typing.Union[MetaOapg.properties.chargeDate, str, datetime, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        pieceCount: typing.Union[MetaOapg.properties.pieceCount, str, schemas.Unset] = schemas.unset,
        shiftCode: typing.Union[MetaOapg.properties.shiftCode, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        job: typing.Union[MetaOapg.properties.job, str, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        orgLvl1: typing.Union[MetaOapg.properties.orgLvl1, str, schemas.Unset] = schemas.unset,
        orgLvl2: typing.Union[MetaOapg.properties.orgLvl2, str, schemas.Unset] = schemas.unset,
        orgLvl3: typing.Union[MetaOapg.properties.orgLvl3, str, schemas.Unset] = schemas.unset,
        orgLvl4: typing.Union[MetaOapg.properties.orgLvl4, str, schemas.Unset] = schemas.unset,
        payRate: typing.Union[MetaOapg.properties.payRate, str, schemas.Unset] = schemas.unset,
        pieceRate: typing.Union[MetaOapg.properties.pieceRate, str, schemas.Unset] = schemas.unset,
        roePayDate: typing.Union[MetaOapg.properties.roePayDate, str, datetime, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        isImportedIntoPayroll: typing.Union[MetaOapg.properties.isImportedIntoPayroll, bool, schemas.Unset] = schemas.unset,
        AdjEarnPeriodStartDate: typing.Union[MetaOapg.properties.AdjEarnPeriodStartDate, str, datetime, schemas.Unset] = schemas.unset,
        AdjEarnPeriodEndDate: typing.Union[MetaOapg.properties.AdjEarnPeriodEndDate, str, datetime, schemas.Unset] = schemas.unset,
        CheckSequence: typing.Union[MetaOapg.properties.CheckSequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CreatePayType: typing.Union[MetaOapg.properties.CreatePayType, str, schemas.Unset] = schemas.unset,
        ForcePayCreation: typing.Union[MetaOapg.properties.ForcePayCreation, str, schemas.Unset] = schemas.unset,
        GrossUp: typing.Union[MetaOapg.properties.GrossUp, str, schemas.Unset] = schemas.unset,
        GrossUpTarget: typing.Union[MetaOapg.properties.GrossUpTarget, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        GrossUpTaxCalcMethod: typing.Union[MetaOapg.properties.GrossUpTaxCalcMethod, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EarningStatusResponse':
        return super().__new__(
            cls,
            *args,
            refId=refId,
            companyCode=companyCode,
            empNo=empNo,
            chargeDate=chargeDate,
            code=code,
            hours=hours,
            amount=amount,
            pieceCount=pieceCount,
            shiftCode=shiftCode,
            location=location,
            job=job,
            project=project,
            orgLvl1=orgLvl1,
            orgLvl2=orgLvl2,
            orgLvl3=orgLvl3,
            orgLvl4=orgLvl4,
            payRate=payRate,
            pieceRate=pieceRate,
            roePayDate=roePayDate,
            source=source,
            isImportedIntoPayroll=isImportedIntoPayroll,
            AdjEarnPeriodStartDate=AdjEarnPeriodStartDate,
            AdjEarnPeriodEndDate=AdjEarnPeriodEndDate,
            CheckSequence=CheckSequence,
            CreatePayType=CreatePayType,
            ForcePayCreation=ForcePayCreation,
            GrossUp=GrossUp,
            GrossUpTarget=GrossUpTarget,
            GrossUpTaxCalcMethod=GrossUpTaxCalcMethod,
            _configuration=_configuration,
            **kwargs,
        )
