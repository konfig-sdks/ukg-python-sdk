# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeEmploymentDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            companyID = schemas.StrSchema
            employeeID = schemas.StrSchema
            primaryJobCode = schemas.StrSchema
            jobTitle = schemas.StrSchema
            fullTimeOrPartTimeCode = schemas.StrSchema
            primaryWorkLocationCode = schemas.StrSchema
            primaryProjectCode = schemas.StrSchema
            deductionGroupCode = schemas.StrSchema
            earningGroupCode = schemas.StrSchema
            employeeTypeCode = schemas.StrSchema
            employeeStatusCode = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            supervisorId = schemas.StrSchema
            originalHireDate = schemas.StrSchema
            lastHireDate = schemas.StrSchema
            dateOfTermination = schemas.StrSchema
            dateOfRetirement = schemas.StrSchema
            dateTimeCreated = schemas.StrSchema
            dateTimeChanged = schemas.StrSchema
            dateLastPayDatePaid = schemas.StrSchema
            payGroup = schemas.StrSchema
            isHomeCompany = schemas.StrSchema
            page = schemas.IntSchema
            per_Page = schemas.IntSchema
            __annotations__ = {
                "companyID": companyID,
                "employeeID": employeeID,
                "primaryJobCode": primaryJobCode,
                "jobTitle": jobTitle,
                "fullTimeOrPartTimeCode": fullTimeOrPartTimeCode,
                "primaryWorkLocationCode": primaryWorkLocationCode,
                "primaryProjectCode": primaryProjectCode,
                "deductionGroupCode": deductionGroupCode,
                "earningGroupCode": earningGroupCode,
                "employeeTypeCode": employeeTypeCode,
                "employeeStatusCode": employeeStatusCode,
                "employeeNumber": employeeNumber,
                "supervisorId": supervisorId,
                "originalHireDate": originalHireDate,
                "lastHireDate": lastHireDate,
                "dateOfTermination": dateOfTermination,
                "dateOfRetirement": dateOfRetirement,
                "dateTimeCreated": dateTimeCreated,
                "dateTimeChanged": dateTimeChanged,
                "dateLastPayDatePaid": dateLastPayDatePaid,
                "payGroup": payGroup,
                "isHomeCompany": isHomeCompany,
                "page": page,
                "per_Page": per_Page,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeID"]) -> MetaOapg.properties.employeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryJobCode"]) -> MetaOapg.properties.primaryJobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> MetaOapg.properties.fullTimeOrPartTimeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryWorkLocationCode"]) -> MetaOapg.properties.primaryWorkLocationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryProjectCode"]) -> MetaOapg.properties.primaryProjectCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionGroupCode"]) -> MetaOapg.properties.deductionGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earningGroupCode"]) -> MetaOapg.properties.earningGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeTypeCode"]) -> MetaOapg.properties.employeeTypeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatusCode"]) -> MetaOapg.properties.employeeStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorId"]) -> MetaOapg.properties.supervisorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalHireDate"]) -> MetaOapg.properties.originalHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastHireDate"]) -> MetaOapg.properties.lastHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfTermination"]) -> MetaOapg.properties.dateOfTermination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfRetirement"]) -> MetaOapg.properties.dateOfRetirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeCreated"]) -> MetaOapg.properties.dateTimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateLastPayDatePaid"]) -> MetaOapg.properties.dateLastPayDatePaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHomeCompany"]) -> MetaOapg.properties.isHomeCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["per_Page"]) -> MetaOapg.properties.per_Page: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyID", "employeeID", "primaryJobCode", "jobTitle", "fullTimeOrPartTimeCode", "primaryWorkLocationCode", "primaryProjectCode", "deductionGroupCode", "earningGroupCode", "employeeTypeCode", "employeeStatusCode", "employeeNumber", "supervisorId", "originalHireDate", "lastHireDate", "dateOfTermination", "dateOfRetirement", "dateTimeCreated", "dateTimeChanged", "dateLastPayDatePaid", "payGroup", "isHomeCompany", "page", "per_Page", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeID"]) -> typing.Union[MetaOapg.properties.employeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryJobCode"]) -> typing.Union[MetaOapg.properties.primaryJobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryWorkLocationCode"]) -> typing.Union[MetaOapg.properties.primaryWorkLocationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryProjectCode"]) -> typing.Union[MetaOapg.properties.primaryProjectCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionGroupCode"]) -> typing.Union[MetaOapg.properties.deductionGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earningGroupCode"]) -> typing.Union[MetaOapg.properties.earningGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeTypeCode"]) -> typing.Union[MetaOapg.properties.employeeTypeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatusCode"]) -> typing.Union[MetaOapg.properties.employeeStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorId"]) -> typing.Union[MetaOapg.properties.supervisorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalHireDate"]) -> typing.Union[MetaOapg.properties.originalHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastHireDate"]) -> typing.Union[MetaOapg.properties.lastHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfTermination"]) -> typing.Union[MetaOapg.properties.dateOfTermination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfRetirement"]) -> typing.Union[MetaOapg.properties.dateOfRetirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeCreated"]) -> typing.Union[MetaOapg.properties.dateTimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateLastPayDatePaid"]) -> typing.Union[MetaOapg.properties.dateLastPayDatePaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHomeCompany"]) -> typing.Union[MetaOapg.properties.isHomeCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["per_Page"]) -> typing.Union[MetaOapg.properties.per_Page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyID", "employeeID", "primaryJobCode", "jobTitle", "fullTimeOrPartTimeCode", "primaryWorkLocationCode", "primaryProjectCode", "deductionGroupCode", "earningGroupCode", "employeeTypeCode", "employeeStatusCode", "employeeNumber", "supervisorId", "originalHireDate", "lastHireDate", "dateOfTermination", "dateOfRetirement", "dateTimeCreated", "dateTimeChanged", "dateLastPayDatePaid", "payGroup", "isHomeCompany", "page", "per_Page", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        employeeID: typing.Union[MetaOapg.properties.employeeID, str, schemas.Unset] = schemas.unset,
        primaryJobCode: typing.Union[MetaOapg.properties.primaryJobCode, str, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, str, schemas.Unset] = schemas.unset,
        fullTimeOrPartTimeCode: typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, str, schemas.Unset] = schemas.unset,
        primaryWorkLocationCode: typing.Union[MetaOapg.properties.primaryWorkLocationCode, str, schemas.Unset] = schemas.unset,
        primaryProjectCode: typing.Union[MetaOapg.properties.primaryProjectCode, str, schemas.Unset] = schemas.unset,
        deductionGroupCode: typing.Union[MetaOapg.properties.deductionGroupCode, str, schemas.Unset] = schemas.unset,
        earningGroupCode: typing.Union[MetaOapg.properties.earningGroupCode, str, schemas.Unset] = schemas.unset,
        employeeTypeCode: typing.Union[MetaOapg.properties.employeeTypeCode, str, schemas.Unset] = schemas.unset,
        employeeStatusCode: typing.Union[MetaOapg.properties.employeeStatusCode, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        supervisorId: typing.Union[MetaOapg.properties.supervisorId, str, schemas.Unset] = schemas.unset,
        originalHireDate: typing.Union[MetaOapg.properties.originalHireDate, str, schemas.Unset] = schemas.unset,
        lastHireDate: typing.Union[MetaOapg.properties.lastHireDate, str, schemas.Unset] = schemas.unset,
        dateOfTermination: typing.Union[MetaOapg.properties.dateOfTermination, str, schemas.Unset] = schemas.unset,
        dateOfRetirement: typing.Union[MetaOapg.properties.dateOfRetirement, str, schemas.Unset] = schemas.unset,
        dateTimeCreated: typing.Union[MetaOapg.properties.dateTimeCreated, str, schemas.Unset] = schemas.unset,
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, schemas.Unset] = schemas.unset,
        dateLastPayDatePaid: typing.Union[MetaOapg.properties.dateLastPayDatePaid, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        isHomeCompany: typing.Union[MetaOapg.properties.isHomeCompany, str, schemas.Unset] = schemas.unset,
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        per_Page: typing.Union[MetaOapg.properties.per_Page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeEmploymentDetails':
        return super().__new__(
            cls,
            *args,
            companyID=companyID,
            employeeID=employeeID,
            primaryJobCode=primaryJobCode,
            jobTitle=jobTitle,
            fullTimeOrPartTimeCode=fullTimeOrPartTimeCode,
            primaryWorkLocationCode=primaryWorkLocationCode,
            primaryProjectCode=primaryProjectCode,
            deductionGroupCode=deductionGroupCode,
            earningGroupCode=earningGroupCode,
            employeeTypeCode=employeeTypeCode,
            employeeStatusCode=employeeStatusCode,
            employeeNumber=employeeNumber,
            supervisorId=supervisorId,
            originalHireDate=originalHireDate,
            lastHireDate=lastHireDate,
            dateOfTermination=dateOfTermination,
            dateOfRetirement=dateOfRetirement,
            dateTimeCreated=dateTimeCreated,
            dateTimeChanged=dateTimeChanged,
            dateLastPayDatePaid=dateLastPayDatePaid,
            payGroup=payGroup,
            isHomeCompany=isHomeCompany,
            page=page,
            per_Page=per_Page,
            _configuration=_configuration,
            **kwargs,
        )
