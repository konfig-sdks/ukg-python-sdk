# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class ResponseStatusDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            type = schemas.StrSchema
            detail = schemas.StrSchema
            errorCount = schemas.Int32Schema
        
            @staticmethod
            def errors() -> typing.Type['SingleStatusDtoObject']:
                return SingleStatusDtoObject
            
            
            class multiStatus(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MultiStatusDtoObject']:
                        return MultiStatusDtoObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MultiStatusDtoObject'], typing.List['MultiStatusDtoObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'multiStatus':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MultiStatusDtoObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "title": title,
                "type": type,
                "detail": detail,
                "errorCount": errorCount,
                "errors": errors,
                "multiStatus": multiStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCount"]) -> MetaOapg.properties.errorCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'SingleStatusDtoObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiStatus"]) -> MetaOapg.properties.multiStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "type", "detail", "errorCount", "errors", "multiStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCount"]) -> typing.Union[MetaOapg.properties.errorCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union['SingleStatusDtoObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiStatus"]) -> typing.Union[MetaOapg.properties.multiStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "type", "detail", "errorCount", "errors", "multiStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        errorCount: typing.Union[MetaOapg.properties.errorCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        errors: typing.Union['SingleStatusDtoObject', schemas.Unset] = schemas.unset,
        multiStatus: typing.Union[MetaOapg.properties.multiStatus, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResponseStatusDto':
        return super().__new__(
            cls,
            *args,
            title=title,
            type=type,
            detail=detail,
            errorCount=errorCount,
            errors=errors,
            multiStatus=multiStatus,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.multi_status_dto_object import MultiStatusDtoObject
from ukg_python_sdk.model.single_status_dto_object import SingleStatusDtoObject
