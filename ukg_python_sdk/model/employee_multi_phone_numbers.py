# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeMultiPhoneNumbers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            auditKey = schemas.StrSchema
            firstName = schemas.StrSchema
            formerName = schemas.DictSchema
            lastName = schemas.StrSchema
            middleName = schemas.StrSchema
            phoneNumber = schemas.StrSchema
            phoneCountryCode = schemas.StrSchema
            phoneCountryPrefix = schemas.DictSchema
            phoneTypeCode = schemas.StrSchema
            phoneExtension = schemas.StrSchema
            phoneIsPrivate = schemas.BoolSchema
            systemId = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "auditKey": auditKey,
                "firstName": firstName,
                "formerName": formerName,
                "lastName": lastName,
                "middleName": middleName,
                "phoneNumber": phoneNumber,
                "phoneCountryCode": phoneCountryCode,
                "phoneCountryPrefix": phoneCountryPrefix,
                "phoneTypeCode": phoneTypeCode,
                "phoneExtension": phoneExtension,
                "phoneIsPrivate": phoneIsPrivate,
                "systemId": systemId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auditKey"]) -> MetaOapg.properties.auditKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formerName"]) -> MetaOapg.properties.formerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneCountryCode"]) -> MetaOapg.properties.phoneCountryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneCountryPrefix"]) -> MetaOapg.properties.phoneCountryPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneTypeCode"]) -> MetaOapg.properties.phoneTypeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneExtension"]) -> MetaOapg.properties.phoneExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneIsPrivate"]) -> MetaOapg.properties.phoneIsPrivate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "auditKey", "firstName", "formerName", "lastName", "middleName", "phoneNumber", "phoneCountryCode", "phoneCountryPrefix", "phoneTypeCode", "phoneExtension", "phoneIsPrivate", "systemId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auditKey"]) -> typing.Union[MetaOapg.properties.auditKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formerName"]) -> typing.Union[MetaOapg.properties.formerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneCountryCode"]) -> typing.Union[MetaOapg.properties.phoneCountryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneCountryPrefix"]) -> typing.Union[MetaOapg.properties.phoneCountryPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneTypeCode"]) -> typing.Union[MetaOapg.properties.phoneTypeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneExtension"]) -> typing.Union[MetaOapg.properties.phoneExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneIsPrivate"]) -> typing.Union[MetaOapg.properties.phoneIsPrivate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "auditKey", "firstName", "formerName", "lastName", "middleName", "phoneNumber", "phoneCountryCode", "phoneCountryPrefix", "phoneTypeCode", "phoneExtension", "phoneIsPrivate", "systemId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        auditKey: typing.Union[MetaOapg.properties.auditKey, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        formerName: typing.Union[MetaOapg.properties.formerName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        phoneCountryCode: typing.Union[MetaOapg.properties.phoneCountryCode, str, schemas.Unset] = schemas.unset,
        phoneCountryPrefix: typing.Union[MetaOapg.properties.phoneCountryPrefix, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        phoneTypeCode: typing.Union[MetaOapg.properties.phoneTypeCode, str, schemas.Unset] = schemas.unset,
        phoneExtension: typing.Union[MetaOapg.properties.phoneExtension, str, schemas.Unset] = schemas.unset,
        phoneIsPrivate: typing.Union[MetaOapg.properties.phoneIsPrivate, bool, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeMultiPhoneNumbers':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            auditKey=auditKey,
            firstName=firstName,
            formerName=formerName,
            lastName=lastName,
            middleName=middleName,
            phoneNumber=phoneNumber,
            phoneCountryCode=phoneCountryCode,
            phoneCountryPrefix=phoneCountryPrefix,
            phoneTypeCode=phoneTypeCode,
            phoneExtension=phoneExtension,
            phoneIsPrivate=phoneIsPrivate,
            systemId=systemId,
            _configuration=_configuration,
            **kwargs,
        )
