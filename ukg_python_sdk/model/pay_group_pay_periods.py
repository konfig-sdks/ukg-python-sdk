# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class PayGroupPayPeriods(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            isActive = schemas.BoolSchema
            dateTimeChanged = schemas.DateTimeSchema
            dateTimeCreated = schemas.DateTimeSchema
            dateTimeFiscalEndDone = schemas.DateTimeSchema
            dateTimePeriodClosed = schemas.DateTimeSchema
            dateTimePeriodOpened = schemas.DateTimeSchema
            fiscalYearEnd = schemas.BoolSchema
            isCtsCreated = schemas.BoolSchema
            isPeriodClosed = schemas.BoolSchema
            isQtdobPerControl = schemas.BoolSchema
            isYtdobPerControl = schemas.BoolSchema
            monthlyPayPeriodNumber = schemas.IntSchema
            mqyEndFlag = schemas.StrSchema
            obType = schemas.StrSchema
            payDate = schemas.DateTimeSchema
            payDateSeq = schemas.IntSchema
            payGroup = schemas.StrSchema
            payPeriodId = schemas.IntSchema
            periodControl = schemas.StrSchema
            periodEndDate = schemas.DateTimeSchema
            periodStartDate = schemas.DateTimeSchema
            periodType = schemas.StrSchema
            suspAutoPay = schemas.StrSchema
            suspDirectDeposit = schemas.StrSchema
            userIdChanged = schemas.StrSchema
            userIdCreated = schemas.StrSchema
            notes = schemas.StrSchema
            auditKey = schemas.IntSchema
            payrollStateId = schemas.IntSchema
            combineNachaFileName = schemas.StrSchema
            combineNachaFileOverride = schemas.BoolSchema
            txFilAppDateTime = schemas.DateTimeSchema
            txFilAppUserId = schemas.IntSchema
            allowWebPyrlAfterYeRecon = schemas.BoolSchema
            payrollChangeFlags = schemas.IntSchema
            payrollTransitionFlags = schemas.IntSchema
            instantCheckMoveRule = schemas.BoolSchema
            bringInPayrollBatchLoad = schemas.BoolSchema
            bringInPpiLoad = schemas.BoolSchema
            bringInRetroPayLoad = schemas.BoolSchema
            lmwActive = schemas.BoolSchema
            roePayDate = schemas.DateTimeSchema
            taxArrearsCollectEnabled = schemas.BoolSchema
            __annotations__ = {
                "isActive": isActive,
                "dateTimeChanged": dateTimeChanged,
                "dateTimeCreated": dateTimeCreated,
                "dateTimeFiscalEndDone": dateTimeFiscalEndDone,
                "dateTimePeriodClosed": dateTimePeriodClosed,
                "dateTimePeriodOpened": dateTimePeriodOpened,
                "fiscalYearEnd": fiscalYearEnd,
                "isCtsCreated": isCtsCreated,
                "isPeriodClosed": isPeriodClosed,
                "isQtdobPerControl": isQtdobPerControl,
                "isYtdobPerControl": isYtdobPerControl,
                "monthlyPayPeriodNumber": monthlyPayPeriodNumber,
                "mqyEndFlag": mqyEndFlag,
                "obType": obType,
                "payDate": payDate,
                "payDateSeq": payDateSeq,
                "payGroup": payGroup,
                "payPeriodId": payPeriodId,
                "periodControl": periodControl,
                "periodEndDate": periodEndDate,
                "periodStartDate": periodStartDate,
                "periodType": periodType,
                "suspAutoPay": suspAutoPay,
                "suspDirectDeposit": suspDirectDeposit,
                "userIdChanged": userIdChanged,
                "userIdCreated": userIdCreated,
                "notes": notes,
                "auditKey": auditKey,
                "payrollStateId": payrollStateId,
                "combineNachaFileName": combineNachaFileName,
                "combineNachaFileOverride": combineNachaFileOverride,
                "txFilAppDateTime": txFilAppDateTime,
                "txFilAppUserId": txFilAppUserId,
                "allowWebPyrlAfterYeRecon": allowWebPyrlAfterYeRecon,
                "payrollChangeFlags": payrollChangeFlags,
                "payrollTransitionFlags": payrollTransitionFlags,
                "instantCheckMoveRule": instantCheckMoveRule,
                "bringInPayrollBatchLoad": bringInPayrollBatchLoad,
                "bringInPpiLoad": bringInPpiLoad,
                "bringInRetroPayLoad": bringInRetroPayLoad,
                "lmwActive": lmwActive,
                "roePayDate": roePayDate,
                "taxArrearsCollectEnabled": taxArrearsCollectEnabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeChanged"]) -> MetaOapg.properties.dateTimeChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeCreated"]) -> MetaOapg.properties.dateTimeCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeFiscalEndDone"]) -> MetaOapg.properties.dateTimeFiscalEndDone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimePeriodClosed"]) -> MetaOapg.properties.dateTimePeriodClosed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimePeriodOpened"]) -> MetaOapg.properties.dateTimePeriodOpened: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiscalYearEnd"]) -> MetaOapg.properties.fiscalYearEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCtsCreated"]) -> MetaOapg.properties.isCtsCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPeriodClosed"]) -> MetaOapg.properties.isPeriodClosed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isQtdobPerControl"]) -> MetaOapg.properties.isQtdobPerControl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isYtdobPerControl"]) -> MetaOapg.properties.isYtdobPerControl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyPayPeriodNumber"]) -> MetaOapg.properties.monthlyPayPeriodNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mqyEndFlag"]) -> MetaOapg.properties.mqyEndFlag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obType"]) -> MetaOapg.properties.obType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDateSeq"]) -> MetaOapg.properties.payDateSeq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodId"]) -> MetaOapg.properties.payPeriodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodControl"]) -> MetaOapg.properties.periodControl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEndDate"]) -> MetaOapg.properties.periodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStartDate"]) -> MetaOapg.properties.periodStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodType"]) -> MetaOapg.properties.periodType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspAutoPay"]) -> MetaOapg.properties.suspAutoPay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspDirectDeposit"]) -> MetaOapg.properties.suspDirectDeposit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userIdChanged"]) -> MetaOapg.properties.userIdChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userIdCreated"]) -> MetaOapg.properties.userIdCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auditKey"]) -> MetaOapg.properties.auditKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollStateId"]) -> MetaOapg.properties.payrollStateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["combineNachaFileName"]) -> MetaOapg.properties.combineNachaFileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["combineNachaFileOverride"]) -> MetaOapg.properties.combineNachaFileOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txFilAppDateTime"]) -> MetaOapg.properties.txFilAppDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txFilAppUserId"]) -> MetaOapg.properties.txFilAppUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowWebPyrlAfterYeRecon"]) -> MetaOapg.properties.allowWebPyrlAfterYeRecon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollChangeFlags"]) -> MetaOapg.properties.payrollChangeFlags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payrollTransitionFlags"]) -> MetaOapg.properties.payrollTransitionFlags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instantCheckMoveRule"]) -> MetaOapg.properties.instantCheckMoveRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bringInPayrollBatchLoad"]) -> MetaOapg.properties.bringInPayrollBatchLoad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bringInPpiLoad"]) -> MetaOapg.properties.bringInPpiLoad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bringInRetroPayLoad"]) -> MetaOapg.properties.bringInRetroPayLoad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lmwActive"]) -> MetaOapg.properties.lmwActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roePayDate"]) -> MetaOapg.properties.roePayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxArrearsCollectEnabled"]) -> MetaOapg.properties.taxArrearsCollectEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isActive", "dateTimeChanged", "dateTimeCreated", "dateTimeFiscalEndDone", "dateTimePeriodClosed", "dateTimePeriodOpened", "fiscalYearEnd", "isCtsCreated", "isPeriodClosed", "isQtdobPerControl", "isYtdobPerControl", "monthlyPayPeriodNumber", "mqyEndFlag", "obType", "payDate", "payDateSeq", "payGroup", "payPeriodId", "periodControl", "periodEndDate", "periodStartDate", "periodType", "suspAutoPay", "suspDirectDeposit", "userIdChanged", "userIdCreated", "notes", "auditKey", "payrollStateId", "combineNachaFileName", "combineNachaFileOverride", "txFilAppDateTime", "txFilAppUserId", "allowWebPyrlAfterYeRecon", "payrollChangeFlags", "payrollTransitionFlags", "instantCheckMoveRule", "bringInPayrollBatchLoad", "bringInPpiLoad", "bringInRetroPayLoad", "lmwActive", "roePayDate", "taxArrearsCollectEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeChanged"]) -> typing.Union[MetaOapg.properties.dateTimeChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeCreated"]) -> typing.Union[MetaOapg.properties.dateTimeCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeFiscalEndDone"]) -> typing.Union[MetaOapg.properties.dateTimeFiscalEndDone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimePeriodClosed"]) -> typing.Union[MetaOapg.properties.dateTimePeriodClosed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimePeriodOpened"]) -> typing.Union[MetaOapg.properties.dateTimePeriodOpened, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiscalYearEnd"]) -> typing.Union[MetaOapg.properties.fiscalYearEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCtsCreated"]) -> typing.Union[MetaOapg.properties.isCtsCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPeriodClosed"]) -> typing.Union[MetaOapg.properties.isPeriodClosed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isQtdobPerControl"]) -> typing.Union[MetaOapg.properties.isQtdobPerControl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isYtdobPerControl"]) -> typing.Union[MetaOapg.properties.isYtdobPerControl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyPayPeriodNumber"]) -> typing.Union[MetaOapg.properties.monthlyPayPeriodNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mqyEndFlag"]) -> typing.Union[MetaOapg.properties.mqyEndFlag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obType"]) -> typing.Union[MetaOapg.properties.obType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> typing.Union[MetaOapg.properties.payDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDateSeq"]) -> typing.Union[MetaOapg.properties.payDateSeq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodId"]) -> typing.Union[MetaOapg.properties.payPeriodId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodControl"]) -> typing.Union[MetaOapg.properties.periodControl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEndDate"]) -> typing.Union[MetaOapg.properties.periodEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStartDate"]) -> typing.Union[MetaOapg.properties.periodStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodType"]) -> typing.Union[MetaOapg.properties.periodType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspAutoPay"]) -> typing.Union[MetaOapg.properties.suspAutoPay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspDirectDeposit"]) -> typing.Union[MetaOapg.properties.suspDirectDeposit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userIdChanged"]) -> typing.Union[MetaOapg.properties.userIdChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userIdCreated"]) -> typing.Union[MetaOapg.properties.userIdCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auditKey"]) -> typing.Union[MetaOapg.properties.auditKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollStateId"]) -> typing.Union[MetaOapg.properties.payrollStateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["combineNachaFileName"]) -> typing.Union[MetaOapg.properties.combineNachaFileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["combineNachaFileOverride"]) -> typing.Union[MetaOapg.properties.combineNachaFileOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txFilAppDateTime"]) -> typing.Union[MetaOapg.properties.txFilAppDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txFilAppUserId"]) -> typing.Union[MetaOapg.properties.txFilAppUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowWebPyrlAfterYeRecon"]) -> typing.Union[MetaOapg.properties.allowWebPyrlAfterYeRecon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollChangeFlags"]) -> typing.Union[MetaOapg.properties.payrollChangeFlags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payrollTransitionFlags"]) -> typing.Union[MetaOapg.properties.payrollTransitionFlags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instantCheckMoveRule"]) -> typing.Union[MetaOapg.properties.instantCheckMoveRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bringInPayrollBatchLoad"]) -> typing.Union[MetaOapg.properties.bringInPayrollBatchLoad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bringInPpiLoad"]) -> typing.Union[MetaOapg.properties.bringInPpiLoad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bringInRetroPayLoad"]) -> typing.Union[MetaOapg.properties.bringInRetroPayLoad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lmwActive"]) -> typing.Union[MetaOapg.properties.lmwActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roePayDate"]) -> typing.Union[MetaOapg.properties.roePayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxArrearsCollectEnabled"]) -> typing.Union[MetaOapg.properties.taxArrearsCollectEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isActive", "dateTimeChanged", "dateTimeCreated", "dateTimeFiscalEndDone", "dateTimePeriodClosed", "dateTimePeriodOpened", "fiscalYearEnd", "isCtsCreated", "isPeriodClosed", "isQtdobPerControl", "isYtdobPerControl", "monthlyPayPeriodNumber", "mqyEndFlag", "obType", "payDate", "payDateSeq", "payGroup", "payPeriodId", "periodControl", "periodEndDate", "periodStartDate", "periodType", "suspAutoPay", "suspDirectDeposit", "userIdChanged", "userIdCreated", "notes", "auditKey", "payrollStateId", "combineNachaFileName", "combineNachaFileOverride", "txFilAppDateTime", "txFilAppUserId", "allowWebPyrlAfterYeRecon", "payrollChangeFlags", "payrollTransitionFlags", "instantCheckMoveRule", "bringInPayrollBatchLoad", "bringInPpiLoad", "bringInRetroPayLoad", "lmwActive", "roePayDate", "taxArrearsCollectEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        dateTimeChanged: typing.Union[MetaOapg.properties.dateTimeChanged, str, datetime, schemas.Unset] = schemas.unset,
        dateTimeCreated: typing.Union[MetaOapg.properties.dateTimeCreated, str, datetime, schemas.Unset] = schemas.unset,
        dateTimeFiscalEndDone: typing.Union[MetaOapg.properties.dateTimeFiscalEndDone, str, datetime, schemas.Unset] = schemas.unset,
        dateTimePeriodClosed: typing.Union[MetaOapg.properties.dateTimePeriodClosed, str, datetime, schemas.Unset] = schemas.unset,
        dateTimePeriodOpened: typing.Union[MetaOapg.properties.dateTimePeriodOpened, str, datetime, schemas.Unset] = schemas.unset,
        fiscalYearEnd: typing.Union[MetaOapg.properties.fiscalYearEnd, bool, schemas.Unset] = schemas.unset,
        isCtsCreated: typing.Union[MetaOapg.properties.isCtsCreated, bool, schemas.Unset] = schemas.unset,
        isPeriodClosed: typing.Union[MetaOapg.properties.isPeriodClosed, bool, schemas.Unset] = schemas.unset,
        isQtdobPerControl: typing.Union[MetaOapg.properties.isQtdobPerControl, bool, schemas.Unset] = schemas.unset,
        isYtdobPerControl: typing.Union[MetaOapg.properties.isYtdobPerControl, bool, schemas.Unset] = schemas.unset,
        monthlyPayPeriodNumber: typing.Union[MetaOapg.properties.monthlyPayPeriodNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mqyEndFlag: typing.Union[MetaOapg.properties.mqyEndFlag, str, schemas.Unset] = schemas.unset,
        obType: typing.Union[MetaOapg.properties.obType, str, schemas.Unset] = schemas.unset,
        payDate: typing.Union[MetaOapg.properties.payDate, str, datetime, schemas.Unset] = schemas.unset,
        payDateSeq: typing.Union[MetaOapg.properties.payDateSeq, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        payPeriodId: typing.Union[MetaOapg.properties.payPeriodId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        periodControl: typing.Union[MetaOapg.properties.periodControl, str, schemas.Unset] = schemas.unset,
        periodEndDate: typing.Union[MetaOapg.properties.periodEndDate, str, datetime, schemas.Unset] = schemas.unset,
        periodStartDate: typing.Union[MetaOapg.properties.periodStartDate, str, datetime, schemas.Unset] = schemas.unset,
        periodType: typing.Union[MetaOapg.properties.periodType, str, schemas.Unset] = schemas.unset,
        suspAutoPay: typing.Union[MetaOapg.properties.suspAutoPay, str, schemas.Unset] = schemas.unset,
        suspDirectDeposit: typing.Union[MetaOapg.properties.suspDirectDeposit, str, schemas.Unset] = schemas.unset,
        userIdChanged: typing.Union[MetaOapg.properties.userIdChanged, str, schemas.Unset] = schemas.unset,
        userIdCreated: typing.Union[MetaOapg.properties.userIdCreated, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        auditKey: typing.Union[MetaOapg.properties.auditKey, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payrollStateId: typing.Union[MetaOapg.properties.payrollStateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        combineNachaFileName: typing.Union[MetaOapg.properties.combineNachaFileName, str, schemas.Unset] = schemas.unset,
        combineNachaFileOverride: typing.Union[MetaOapg.properties.combineNachaFileOverride, bool, schemas.Unset] = schemas.unset,
        txFilAppDateTime: typing.Union[MetaOapg.properties.txFilAppDateTime, str, datetime, schemas.Unset] = schemas.unset,
        txFilAppUserId: typing.Union[MetaOapg.properties.txFilAppUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowWebPyrlAfterYeRecon: typing.Union[MetaOapg.properties.allowWebPyrlAfterYeRecon, bool, schemas.Unset] = schemas.unset,
        payrollChangeFlags: typing.Union[MetaOapg.properties.payrollChangeFlags, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payrollTransitionFlags: typing.Union[MetaOapg.properties.payrollTransitionFlags, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        instantCheckMoveRule: typing.Union[MetaOapg.properties.instantCheckMoveRule, bool, schemas.Unset] = schemas.unset,
        bringInPayrollBatchLoad: typing.Union[MetaOapg.properties.bringInPayrollBatchLoad, bool, schemas.Unset] = schemas.unset,
        bringInPpiLoad: typing.Union[MetaOapg.properties.bringInPpiLoad, bool, schemas.Unset] = schemas.unset,
        bringInRetroPayLoad: typing.Union[MetaOapg.properties.bringInRetroPayLoad, bool, schemas.Unset] = schemas.unset,
        lmwActive: typing.Union[MetaOapg.properties.lmwActive, bool, schemas.Unset] = schemas.unset,
        roePayDate: typing.Union[MetaOapg.properties.roePayDate, str, datetime, schemas.Unset] = schemas.unset,
        taxArrearsCollectEnabled: typing.Union[MetaOapg.properties.taxArrearsCollectEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayGroupPayPeriods':
        return super().__new__(
            cls,
            *args,
            isActive=isActive,
            dateTimeChanged=dateTimeChanged,
            dateTimeCreated=dateTimeCreated,
            dateTimeFiscalEndDone=dateTimeFiscalEndDone,
            dateTimePeriodClosed=dateTimePeriodClosed,
            dateTimePeriodOpened=dateTimePeriodOpened,
            fiscalYearEnd=fiscalYearEnd,
            isCtsCreated=isCtsCreated,
            isPeriodClosed=isPeriodClosed,
            isQtdobPerControl=isQtdobPerControl,
            isYtdobPerControl=isYtdobPerControl,
            monthlyPayPeriodNumber=monthlyPayPeriodNumber,
            mqyEndFlag=mqyEndFlag,
            obType=obType,
            payDate=payDate,
            payDateSeq=payDateSeq,
            payGroup=payGroup,
            payPeriodId=payPeriodId,
            periodControl=periodControl,
            periodEndDate=periodEndDate,
            periodStartDate=periodStartDate,
            periodType=periodType,
            suspAutoPay=suspAutoPay,
            suspDirectDeposit=suspDirectDeposit,
            userIdChanged=userIdChanged,
            userIdCreated=userIdCreated,
            notes=notes,
            auditKey=auditKey,
            payrollStateId=payrollStateId,
            combineNachaFileName=combineNachaFileName,
            combineNachaFileOverride=combineNachaFileOverride,
            txFilAppDateTime=txFilAppDateTime,
            txFilAppUserId=txFilAppUserId,
            allowWebPyrlAfterYeRecon=allowWebPyrlAfterYeRecon,
            payrollChangeFlags=payrollChangeFlags,
            payrollTransitionFlags=payrollTransitionFlags,
            instantCheckMoveRule=instantCheckMoveRule,
            bringInPayrollBatchLoad=bringInPayrollBatchLoad,
            bringInPpiLoad=bringInPpiLoad,
            bringInRetroPayLoad=bringInRetroPayLoad,
            lmwActive=lmwActive,
            roePayDate=roePayDate,
            taxArrearsCollectEnabled=taxArrearsCollectEnabled,
            _configuration=_configuration,
            **kwargs,
        )
