# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class CompanyDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            isMasterCompany = schemas.StrSchema
            masterCompanyId = schemas.StrSchema
            companyID = schemas.StrSchema
            companyCode = schemas.StrSchema
            companyName = schemas.StrSchema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            addressCity = schemas.StrSchema
            addressState = schemas.StrSchema
            addressZipCode = schemas.StrSchema
            addressCountry = schemas.StrSchema
            addressCounty = schemas.StrSchema
            phoneNumber = schemas.StrSchema
            phoneNumberExtension = schemas.StrSchema
            federalTaxId = schemas.StrSchema
            orgLevel1Code = schemas.StrSchema
            orgLevel2Code = schemas.StrSchema
            orgLevel3Code = schemas.StrSchema
            orgLevel4Code = schemas.StrSchema
            __annotations__ = {
                "isMasterCompany": isMasterCompany,
                "masterCompanyId": masterCompanyId,
                "companyID": companyID,
                "companyCode": companyCode,
                "companyName": companyName,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "addressCity": addressCity,
                "addressState": addressState,
                "addressZipCode": addressZipCode,
                "addressCountry": addressCountry,
                "addressCounty": addressCounty,
                "phoneNumber": phoneNumber,
                "phoneNumberExtension": phoneNumberExtension,
                "federalTaxId": federalTaxId,
                "orgLevel1Code": orgLevel1Code,
                "orgLevel2Code": orgLevel2Code,
                "orgLevel3Code": orgLevel3Code,
                "orgLevel4Code": orgLevel4Code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMasterCompany"]) -> MetaOapg.properties.isMasterCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masterCompanyId"]) -> MetaOapg.properties.masterCompanyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCity"]) -> MetaOapg.properties.addressCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressState"]) -> MetaOapg.properties.addressState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressZipCode"]) -> MetaOapg.properties.addressZipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCountry"]) -> MetaOapg.properties.addressCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCounty"]) -> MetaOapg.properties.addressCounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberExtension"]) -> MetaOapg.properties.phoneNumberExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalTaxId"]) -> MetaOapg.properties.federalTaxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel1Code"]) -> MetaOapg.properties.orgLevel1Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel2Code"]) -> MetaOapg.properties.orgLevel2Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel3Code"]) -> MetaOapg.properties.orgLevel3Code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgLevel4Code"]) -> MetaOapg.properties.orgLevel4Code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isMasterCompany", "masterCompanyId", "companyID", "companyCode", "companyName", "addressLine1", "addressLine2", "addressCity", "addressState", "addressZipCode", "addressCountry", "addressCounty", "phoneNumber", "phoneNumberExtension", "federalTaxId", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMasterCompany"]) -> typing.Union[MetaOapg.properties.isMasterCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masterCompanyId"]) -> typing.Union[MetaOapg.properties.masterCompanyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCode"]) -> typing.Union[MetaOapg.properties.companyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCity"]) -> typing.Union[MetaOapg.properties.addressCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressState"]) -> typing.Union[MetaOapg.properties.addressState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressZipCode"]) -> typing.Union[MetaOapg.properties.addressZipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCountry"]) -> typing.Union[MetaOapg.properties.addressCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCounty"]) -> typing.Union[MetaOapg.properties.addressCounty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberExtension"]) -> typing.Union[MetaOapg.properties.phoneNumberExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalTaxId"]) -> typing.Union[MetaOapg.properties.federalTaxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel1Code"]) -> typing.Union[MetaOapg.properties.orgLevel1Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel2Code"]) -> typing.Union[MetaOapg.properties.orgLevel2Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel3Code"]) -> typing.Union[MetaOapg.properties.orgLevel3Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgLevel4Code"]) -> typing.Union[MetaOapg.properties.orgLevel4Code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isMasterCompany", "masterCompanyId", "companyID", "companyCode", "companyName", "addressLine1", "addressLine2", "addressCity", "addressState", "addressZipCode", "addressCountry", "addressCounty", "phoneNumber", "phoneNumberExtension", "federalTaxId", "orgLevel1Code", "orgLevel2Code", "orgLevel3Code", "orgLevel4Code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isMasterCompany: typing.Union[MetaOapg.properties.isMasterCompany, str, schemas.Unset] = schemas.unset,
        masterCompanyId: typing.Union[MetaOapg.properties.masterCompanyId, str, schemas.Unset] = schemas.unset,
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        companyCode: typing.Union[MetaOapg.properties.companyCode, str, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        addressCity: typing.Union[MetaOapg.properties.addressCity, str, schemas.Unset] = schemas.unset,
        addressState: typing.Union[MetaOapg.properties.addressState, str, schemas.Unset] = schemas.unset,
        addressZipCode: typing.Union[MetaOapg.properties.addressZipCode, str, schemas.Unset] = schemas.unset,
        addressCountry: typing.Union[MetaOapg.properties.addressCountry, str, schemas.Unset] = schemas.unset,
        addressCounty: typing.Union[MetaOapg.properties.addressCounty, str, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        phoneNumberExtension: typing.Union[MetaOapg.properties.phoneNumberExtension, str, schemas.Unset] = schemas.unset,
        federalTaxId: typing.Union[MetaOapg.properties.federalTaxId, str, schemas.Unset] = schemas.unset,
        orgLevel1Code: typing.Union[MetaOapg.properties.orgLevel1Code, str, schemas.Unset] = schemas.unset,
        orgLevel2Code: typing.Union[MetaOapg.properties.orgLevel2Code, str, schemas.Unset] = schemas.unset,
        orgLevel3Code: typing.Union[MetaOapg.properties.orgLevel3Code, str, schemas.Unset] = schemas.unset,
        orgLevel4Code: typing.Union[MetaOapg.properties.orgLevel4Code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyDetails':
        return super().__new__(
            cls,
            *args,
            isMasterCompany=isMasterCompany,
            masterCompanyId=masterCompanyId,
            companyID=companyID,
            companyCode=companyCode,
            companyName=companyName,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            addressCity=addressCity,
            addressState=addressState,
            addressZipCode=addressZipCode,
            addressCountry=addressCountry,
            addressCounty=addressCounty,
            phoneNumber=phoneNumber,
            phoneNumberExtension=phoneNumberExtension,
            federalTaxId=federalTaxId,
            orgLevel1Code=orgLevel1Code,
            orgLevel2Code=orgLevel2Code,
            orgLevel3Code=orgLevel3Code,
            orgLevel4Code=orgLevel4Code,
            _configuration=_configuration,
            **kwargs,
        )
