# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class OptionRate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            deductionCode = schemas.StrSchema
            benefitOption = schemas.StrSchema
            employeeRate = schemas.NumberSchema
            employerRate = schemas.NumberSchema
            effectiveDate = schemas.DateTimeSchema
            payFrequency = schemas.StrSchema
            rateStopDate = schemas.DateTimeSchema
            __annotations__ = {
                "deductionCode": deductionCode,
                "benefitOption": benefitOption,
                "employeeRate": employeeRate,
                "employerRate": employerRate,
                "effectiveDate": effectiveDate,
                "payFrequency": payFrequency,
                "rateStopDate": rateStopDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionCode"]) -> MetaOapg.properties.deductionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitOption"]) -> MetaOapg.properties.benefitOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeRate"]) -> MetaOapg.properties.employeeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerRate"]) -> MetaOapg.properties.employerRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateStopDate"]) -> MetaOapg.properties.rateStopDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deductionCode", "benefitOption", "employeeRate", "employerRate", "effectiveDate", "payFrequency", "rateStopDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionCode"]) -> typing.Union[MetaOapg.properties.deductionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitOption"]) -> typing.Union[MetaOapg.properties.benefitOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeRate"]) -> typing.Union[MetaOapg.properties.employeeRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerRate"]) -> typing.Union[MetaOapg.properties.employerRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateStopDate"]) -> typing.Union[MetaOapg.properties.rateStopDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deductionCode", "benefitOption", "employeeRate", "employerRate", "effectiveDate", "payFrequency", "rateStopDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deductionCode: typing.Union[MetaOapg.properties.deductionCode, str, schemas.Unset] = schemas.unset,
        benefitOption: typing.Union[MetaOapg.properties.benefitOption, str, schemas.Unset] = schemas.unset,
        employeeRate: typing.Union[MetaOapg.properties.employeeRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        employerRate: typing.Union[MetaOapg.properties.employerRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        rateStopDate: typing.Union[MetaOapg.properties.rateStopDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OptionRate':
        return super().__new__(
            cls,
            *args,
            deductionCode=deductionCode,
            benefitOption=benefitOption,
            employeeRate=employeeRate,
            employerRate=employerRate,
            effectiveDate=effectiveDate,
            payFrequency=payFrequency,
            rateStopDate=rateStopDate,
            _configuration=_configuration,
            **kwargs,
        )
