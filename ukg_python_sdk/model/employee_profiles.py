# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeProfiles(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            profileValue = schemas.StrSchema
            profileType = schemas.StrSchema
            product = schemas.StrSchema
            module = schemas.StrSchema
            companyId = schemas.StrSchema
            employeeId = schemas.StrSchema
            lastModifiedDate = schemas.DateTimeSchema
            isCleared = schemas.BoolSchema
            isDateEffective = schemas.BoolSchema
            effectiveDate = schemas.DateTimeSchema
            recordId = schemas.NumberSchema
            changeRecordID = schemas.NumberSchema
            isPrimary = schemas.BoolSchema
            isPrimaryEffectiveDate = schemas.DateTimeSchema
            originalHireDate = schemas.DateTimeSchema
            __annotations__ = {
                "description": description,
                "profileValue": profileValue,
                "profileType": profileType,
                "product": product,
                "module": module,
                "companyId": companyId,
                "employeeId": employeeId,
                "lastModifiedDate": lastModifiedDate,
                "isCleared": isCleared,
                "isDateEffective": isDateEffective,
                "effectiveDate": effectiveDate,
                "recordId": recordId,
                "changeRecordID": changeRecordID,
                "isPrimary": isPrimary,
                "isPrimaryEffectiveDate": isPrimaryEffectiveDate,
                "originalHireDate": originalHireDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileValue"]) -> MetaOapg.properties.profileValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileType"]) -> MetaOapg.properties.profileType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedDate"]) -> MetaOapg.properties.lastModifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCleared"]) -> MetaOapg.properties.isCleared: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDateEffective"]) -> MetaOapg.properties.isDateEffective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordId"]) -> MetaOapg.properties.recordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeRecordID"]) -> MetaOapg.properties.changeRecordID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrimaryEffectiveDate"]) -> MetaOapg.properties.isPrimaryEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalHireDate"]) -> MetaOapg.properties.originalHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "profileValue", "profileType", "product", "module", "companyId", "employeeId", "lastModifiedDate", "isCleared", "isDateEffective", "effectiveDate", "recordId", "changeRecordID", "isPrimary", "isPrimaryEffectiveDate", "originalHireDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileValue"]) -> typing.Union[MetaOapg.properties.profileValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileType"]) -> typing.Union[MetaOapg.properties.profileType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product"]) -> typing.Union[MetaOapg.properties.product, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["module"]) -> typing.Union[MetaOapg.properties.module, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedDate"]) -> typing.Union[MetaOapg.properties.lastModifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCleared"]) -> typing.Union[MetaOapg.properties.isCleared, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDateEffective"]) -> typing.Union[MetaOapg.properties.isDateEffective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordId"]) -> typing.Union[MetaOapg.properties.recordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeRecordID"]) -> typing.Union[MetaOapg.properties.changeRecordID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrimaryEffectiveDate"]) -> typing.Union[MetaOapg.properties.isPrimaryEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalHireDate"]) -> typing.Union[MetaOapg.properties.originalHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "profileValue", "profileType", "product", "module", "companyId", "employeeId", "lastModifiedDate", "isCleared", "isDateEffective", "effectiveDate", "recordId", "changeRecordID", "isPrimary", "isPrimaryEffectiveDate", "originalHireDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        profileValue: typing.Union[MetaOapg.properties.profileValue, str, schemas.Unset] = schemas.unset,
        profileType: typing.Union[MetaOapg.properties.profileType, str, schemas.Unset] = schemas.unset,
        product: typing.Union[MetaOapg.properties.product, str, schemas.Unset] = schemas.unset,
        module: typing.Union[MetaOapg.properties.module, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        lastModifiedDate: typing.Union[MetaOapg.properties.lastModifiedDate, str, datetime, schemas.Unset] = schemas.unset,
        isCleared: typing.Union[MetaOapg.properties.isCleared, bool, schemas.Unset] = schemas.unset,
        isDateEffective: typing.Union[MetaOapg.properties.isDateEffective, bool, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        recordId: typing.Union[MetaOapg.properties.recordId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        changeRecordID: typing.Union[MetaOapg.properties.changeRecordID, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
        isPrimaryEffectiveDate: typing.Union[MetaOapg.properties.isPrimaryEffectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        originalHireDate: typing.Union[MetaOapg.properties.originalHireDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeProfiles':
        return super().__new__(
            cls,
            *args,
            description=description,
            profileValue=profileValue,
            profileType=profileType,
            product=product,
            module=module,
            companyId=companyId,
            employeeId=employeeId,
            lastModifiedDate=lastModifiedDate,
            isCleared=isCleared,
            isDateEffective=isDateEffective,
            effectiveDate=effectiveDate,
            recordId=recordId,
            changeRecordID=changeRecordID,
            isPrimary=isPrimary,
            isPrimaryEffectiveDate=isPrimaryEffectiveDate,
            originalHireDate=originalHireDate,
            _configuration=_configuration,
            **kwargs,
        )
