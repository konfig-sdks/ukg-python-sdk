# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeJobDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            jobName = schemas.StrSchema
            jobDesc = schemas.StrSchema
            jobStartDate = schemas.DateTimeSchema
            jobEndDate = schemas.DateTimeSchema
            jobPreferred = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "jobName": jobName,
                "jobDesc": jobDesc,
                "jobStartDate": jobStartDate,
                "jobEndDate": jobEndDate,
                "jobPreferred": jobPreferred,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobName"]) -> MetaOapg.properties.jobName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobDesc"]) -> MetaOapg.properties.jobDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobStartDate"]) -> MetaOapg.properties.jobStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobEndDate"]) -> MetaOapg.properties.jobEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobPreferred"]) -> MetaOapg.properties.jobPreferred: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "jobName", "jobDesc", "jobStartDate", "jobEndDate", "jobPreferred", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobName"]) -> typing.Union[MetaOapg.properties.jobName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobDesc"]) -> typing.Union[MetaOapg.properties.jobDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobStartDate"]) -> typing.Union[MetaOapg.properties.jobStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobEndDate"]) -> typing.Union[MetaOapg.properties.jobEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobPreferred"]) -> typing.Union[MetaOapg.properties.jobPreferred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "jobName", "jobDesc", "jobStartDate", "jobEndDate", "jobPreferred", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        jobName: typing.Union[MetaOapg.properties.jobName, str, schemas.Unset] = schemas.unset,
        jobDesc: typing.Union[MetaOapg.properties.jobDesc, str, schemas.Unset] = schemas.unset,
        jobStartDate: typing.Union[MetaOapg.properties.jobStartDate, str, datetime, schemas.Unset] = schemas.unset,
        jobEndDate: typing.Union[MetaOapg.properties.jobEndDate, str, datetime, schemas.Unset] = schemas.unset,
        jobPreferred: typing.Union[MetaOapg.properties.jobPreferred, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeJobDto':
        return super().__new__(
            cls,
            *args,
            id=id,
            jobName=jobName,
            jobDesc=jobDesc,
            jobStartDate=jobStartDate,
            jobEndDate=jobEndDate,
            jobPreferred=jobPreferred,
            _configuration=_configuration,
            **kwargs,
        )
