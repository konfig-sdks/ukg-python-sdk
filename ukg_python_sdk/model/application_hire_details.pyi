# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class ApplicationHireDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            offer_date = schemas.StrSchema
            accept_date = schemas.StrSchema
            hire_date = schemas.StrSchema
            start_date = schemas.StrSchema
            full_time_equivalent = schemas.StrSchema
        
            @staticmethod
            def compensation() -> typing.Type['ApplicationHireDetailsCompensation']:
                return ApplicationHireDetailsCompensation
        
            @staticmethod
            def company() -> typing.Type['ApplicationHireDetailsCompany']:
                return ApplicationHireDetailsCompany
        
            @staticmethod
            def tax_location() -> typing.Type['ApplicationHireDetailsTaxLocation']:
                return ApplicationHireDetailsTaxLocation
        
            @staticmethod
            def hiring_manager() -> typing.Type['ApplicationHireDetailsHiringManager']:
                return ApplicationHireDetailsHiringManager
        
            @staticmethod
            def onboarding_owner() -> typing.Type['ApplicationHireDetailsOnboardingOwner']:
                return ApplicationHireDetailsOnboardingOwner
        
            @staticmethod
            def org_units() -> typing.Type['ApplicationHireDetailsOrgUnits']:
                return ApplicationHireDetailsOrgUnits
            __annotations__ = {
                "offer_date": offer_date,
                "accept_date": accept_date,
                "hire_date": hire_date,
                "start_date": start_date,
                "full_time_equivalent": full_time_equivalent,
                "compensation": compensation,
                "company": company,
                "tax_location": tax_location,
                "hiring_manager": hiring_manager,
                "onboarding_owner": onboarding_owner,
                "org_units": org_units,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offer_date"]) -> MetaOapg.properties.offer_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_date"]) -> MetaOapg.properties.accept_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_time_equivalent"]) -> MetaOapg.properties.full_time_equivalent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensation"]) -> 'ApplicationHireDetailsCompensation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> 'ApplicationHireDetailsCompany': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_location"]) -> 'ApplicationHireDetailsTaxLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiring_manager"]) -> 'ApplicationHireDetailsHiringManager': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_owner"]) -> 'ApplicationHireDetailsOnboardingOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_units"]) -> 'ApplicationHireDetailsOrgUnits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["offer_date", "accept_date", "hire_date", "start_date", "full_time_equivalent", "compensation", "company", "tax_location", "hiring_manager", "onboarding_owner", "org_units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offer_date"]) -> typing.Union[MetaOapg.properties.offer_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_date"]) -> typing.Union[MetaOapg.properties.accept_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> typing.Union[MetaOapg.properties.hire_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_time_equivalent"]) -> typing.Union[MetaOapg.properties.full_time_equivalent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensation"]) -> typing.Union['ApplicationHireDetailsCompensation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union['ApplicationHireDetailsCompany', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_location"]) -> typing.Union['ApplicationHireDetailsTaxLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiring_manager"]) -> typing.Union['ApplicationHireDetailsHiringManager', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_owner"]) -> typing.Union['ApplicationHireDetailsOnboardingOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_units"]) -> typing.Union['ApplicationHireDetailsOrgUnits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["offer_date", "accept_date", "hire_date", "start_date", "full_time_equivalent", "compensation", "company", "tax_location", "hiring_manager", "onboarding_owner", "org_units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        offer_date: typing.Union[MetaOapg.properties.offer_date, str, schemas.Unset] = schemas.unset,
        accept_date: typing.Union[MetaOapg.properties.accept_date, str, schemas.Unset] = schemas.unset,
        hire_date: typing.Union[MetaOapg.properties.hire_date, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        full_time_equivalent: typing.Union[MetaOapg.properties.full_time_equivalent, str, schemas.Unset] = schemas.unset,
        compensation: typing.Union['ApplicationHireDetailsCompensation', schemas.Unset] = schemas.unset,
        company: typing.Union['ApplicationHireDetailsCompany', schemas.Unset] = schemas.unset,
        tax_location: typing.Union['ApplicationHireDetailsTaxLocation', schemas.Unset] = schemas.unset,
        hiring_manager: typing.Union['ApplicationHireDetailsHiringManager', schemas.Unset] = schemas.unset,
        onboarding_owner: typing.Union['ApplicationHireDetailsOnboardingOwner', schemas.Unset] = schemas.unset,
        org_units: typing.Union['ApplicationHireDetailsOrgUnits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicationHireDetails':
        return super().__new__(
            cls,
            *args,
            offer_date=offer_date,
            accept_date=accept_date,
            hire_date=hire_date,
            start_date=start_date,
            full_time_equivalent=full_time_equivalent,
            compensation=compensation,
            company=company,
            tax_location=tax_location,
            hiring_manager=hiring_manager,
            onboarding_owner=onboarding_owner,
            org_units=org_units,
            _configuration=_configuration,
            **kwargs,
        )

from ukg_python_sdk.model.application_hire_details_company import ApplicationHireDetailsCompany
from ukg_python_sdk.model.application_hire_details_compensation import ApplicationHireDetailsCompensation
from ukg_python_sdk.model.application_hire_details_hiring_manager import ApplicationHireDetailsHiringManager
from ukg_python_sdk.model.application_hire_details_onboarding_owner import ApplicationHireDetailsOnboardingOwner
from ukg_python_sdk.model.application_hire_details_org_units import ApplicationHireDetailsOrgUnits
from ukg_python_sdk.model.application_hire_details_tax_location import ApplicationHireDetailsTaxLocation
