# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class HolidayDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            holidayName = schemas.StrSchema
            holidayLocName = schemas.StrSchema
            holidayDate = schemas.DateTimeSchema
            __annotations__ = {
                "holidayName": holidayName,
                "holidayLocName": holidayLocName,
                "holidayDate": holidayDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holidayName"]) -> MetaOapg.properties.holidayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holidayLocName"]) -> MetaOapg.properties.holidayLocName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holidayDate"]) -> MetaOapg.properties.holidayDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["holidayName", "holidayLocName", "holidayDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holidayName"]) -> typing.Union[MetaOapg.properties.holidayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holidayLocName"]) -> typing.Union[MetaOapg.properties.holidayLocName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holidayDate"]) -> typing.Union[MetaOapg.properties.holidayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["holidayName", "holidayLocName", "holidayDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        holidayName: typing.Union[MetaOapg.properties.holidayName, str, schemas.Unset] = schemas.unset,
        holidayLocName: typing.Union[MetaOapg.properties.holidayLocName, str, schemas.Unset] = schemas.unset,
        holidayDate: typing.Union[MetaOapg.properties.holidayDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HolidayDto':
        return super().__new__(
            cls,
            *args,
            holidayName=holidayName,
            holidayLocName=holidayLocName,
            holidayDate=holidayDate,
            _configuration=_configuration,
            **kwargs,
        )
