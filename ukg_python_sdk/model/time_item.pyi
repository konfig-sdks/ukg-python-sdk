# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class TimeItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "dateWorked",
            "hoursWorked",
        }
        
        class properties:
            dateWorked = schemas.DateTimeSchema
            
            
            class hoursWorked(
                schemas.NumberSchema
            ):
                pass
            
            
            class employeeNumber(
                schemas.StrSchema
            ):
                pass
            
            
            class eeId(
                schemas.StrSchema
            ):
                pass
            
            
            class companyCode(
                schemas.StrSchema
            ):
                pass
            
            
            class coId(
                schemas.StrSchema
            ):
                pass
            id = schemas.NumberSchema
            __annotations__ = {
                "dateWorked": dateWorked,
                "hoursWorked": hoursWorked,
                "employeeNumber": employeeNumber,
                "eeId": eeId,
                "companyCode": companyCode,
                "coId": coId,
                "id": id,
            }
    
    dateWorked: MetaOapg.properties.dateWorked
    hoursWorked: MetaOapg.properties.hoursWorked
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateWorked"]) -> MetaOapg.properties.dateWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursWorked"]) -> MetaOapg.properties.hoursWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eeId"]) -> MetaOapg.properties.eeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCode"]) -> MetaOapg.properties.companyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coId"]) -> MetaOapg.properties.coId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateWorked", "hoursWorked", "employeeNumber", "eeId", "companyCode", "coId", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateWorked"]) -> MetaOapg.properties.dateWorked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursWorked"]) -> MetaOapg.properties.hoursWorked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eeId"]) -> typing.Union[MetaOapg.properties.eeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCode"]) -> typing.Union[MetaOapg.properties.companyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coId"]) -> typing.Union[MetaOapg.properties.coId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateWorked", "hoursWorked", "employeeNumber", "eeId", "companyCode", "coId", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dateWorked: typing.Union[MetaOapg.properties.dateWorked, str, datetime, ],
        hoursWorked: typing.Union[MetaOapg.properties.hoursWorked, decimal.Decimal, int, float, ],
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        eeId: typing.Union[MetaOapg.properties.eeId, str, schemas.Unset] = schemas.unset,
        companyCode: typing.Union[MetaOapg.properties.companyCode, str, schemas.Unset] = schemas.unset,
        coId: typing.Union[MetaOapg.properties.coId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeItem':
        return super().__new__(
            cls,
            *args,
            dateWorked=dateWorked,
            hoursWorked=hoursWorked,
            employeeNumber=employeeNumber,
            eeId=eeId,
            companyCode=companyCode,
            coId=coId,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )
