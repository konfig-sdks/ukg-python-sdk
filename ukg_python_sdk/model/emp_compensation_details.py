# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmpCompensationDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeID = schemas.StrSchema
            companyID = schemas.StrSchema
            annualSalary = schemas.Float64Schema
            hourlyPayRate = schemas.Float64Schema
            weeklyPayRate = schemas.Float64Schema
            payPeriodPayRate = schemas.Float64Schema
            currencyCode = schemas.StrSchema
            otherRate1 = schemas.Float64Schema
            otherRate2 = schemas.Float64Schema
            otherRate3 = schemas.Float64Schema
            otherRate4 = schemas.Float64Schema
            payGroupDescription = schemas.StrSchema
            piecePayRate = schemas.Float64Schema
            primaryJobCode = schemas.StrSchema
            jobSalaryGrade = schemas.StrSchema
            jobChangeReasonCode = schemas.StrSchema
            jobGroupCode = schemas.StrSchema
            jobTitle = schemas.StrSchema
            dateInJob = schemas.DateTimeSchema
            dateLastPaid = schemas.DateTimeSchema
            dateLastWorked = schemas.DateTimeSchema
            dateOfLastSalaryReview = schemas.DateTimeSchema
            dateOfNextSalayrReview = schemas.DateTimeSchema
            isAutoAllocated = schemas.BoolSchema
            isAutoPaid = schemas.BoolSchema
            isSeasonalWorker = schemas.BoolSchema
            isHighlyCompensated = schemas.BoolSchema
            isMultipleJob = schemas.BoolSchema
            payGroupCode = schemas.StrSchema
            payPeriod = schemas.StrSchema
            payScaleCode = schemas.StrSchema
            salaryOrHourlyCode = schemas.StrSchema
            fullTimeOrPartTimeCode = schemas.StrSchema
            scheduledFullTimeEquivalency = schemas.Float64Schema
            scheduledPeriodWorkHours = schemas.Float64Schema
            scheduledAnnualWorkHours = schemas.Float64Schema
            weeklyHours = schemas.Float64Schema
            primaryShiftCode = schemas.StrSchema
            primaryShiftGroupCode = schemas.StrSchema
            avgPayRateCurPer = schemas.Float32Schema
            bonusTotalHrs = schemas.Float32Schema
            bonusTotalOtHrs = schemas.Float32Schema
            datePaidThru = schemas.DateTimeSchema
            emplStatus = schemas.StrSchema
            totalAnnSalary = schemas.Float32Schema
            distributionCenterCode = schemas.StrSchema
            numberOfPayments = schemas.Int32Schema
            performanceReviewRating = schemas.StrSchema
            performanceReviewType = schemas.StrSchema
            __annotations__ = {
                "employeeID": employeeID,
                "companyID": companyID,
                "annualSalary": annualSalary,
                "hourlyPayRate": hourlyPayRate,
                "weeklyPayRate": weeklyPayRate,
                "payPeriodPayRate": payPeriodPayRate,
                "currencyCode": currencyCode,
                "otherRate1": otherRate1,
                "otherRate2": otherRate2,
                "otherRate3": otherRate3,
                "otherRate4": otherRate4,
                "payGroupDescription": payGroupDescription,
                "piecePayRate": piecePayRate,
                "primaryJobCode": primaryJobCode,
                "jobSalaryGrade": jobSalaryGrade,
                "jobChangeReasonCode": jobChangeReasonCode,
                "jobGroupCode": jobGroupCode,
                "jobTitle": jobTitle,
                "dateInJob": dateInJob,
                "dateLastPaid": dateLastPaid,
                "dateLastWorked": dateLastWorked,
                "dateOfLastSalaryReview": dateOfLastSalaryReview,
                "dateOfNextSalayrReview": dateOfNextSalayrReview,
                "isAutoAllocated": isAutoAllocated,
                "isAutoPaid": isAutoPaid,
                "isSeasonalWorker": isSeasonalWorker,
                "isHighlyCompensated": isHighlyCompensated,
                "isMultipleJob": isMultipleJob,
                "payGroupCode": payGroupCode,
                "payPeriod": payPeriod,
                "payScaleCode": payScaleCode,
                "salaryOrHourlyCode": salaryOrHourlyCode,
                "fullTimeOrPartTimeCode": fullTimeOrPartTimeCode,
                "scheduledFullTimeEquivalency": scheduledFullTimeEquivalency,
                "scheduledPeriodWorkHours": scheduledPeriodWorkHours,
                "scheduledAnnualWorkHours": scheduledAnnualWorkHours,
                "weeklyHours": weeklyHours,
                "primaryShiftCode": primaryShiftCode,
                "primaryShiftGroupCode": primaryShiftGroupCode,
                "avgPayRateCurPer": avgPayRateCurPer,
                "bonusTotalHrs": bonusTotalHrs,
                "bonusTotalOtHrs": bonusTotalOtHrs,
                "datePaidThru": datePaidThru,
                "emplStatus": emplStatus,
                "totalAnnSalary": totalAnnSalary,
                "distributionCenterCode": distributionCenterCode,
                "numberOfPayments": numberOfPayments,
                "performanceReviewRating": performanceReviewRating,
                "performanceReviewType": performanceReviewType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeID"]) -> MetaOapg.properties.employeeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyID"]) -> MetaOapg.properties.companyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSalary"]) -> MetaOapg.properties.annualSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourlyPayRate"]) -> MetaOapg.properties.hourlyPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeklyPayRate"]) -> MetaOapg.properties.weeklyPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodPayRate"]) -> MetaOapg.properties.payPeriodPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherRate1"]) -> MetaOapg.properties.otherRate1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherRate2"]) -> MetaOapg.properties.otherRate2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherRate3"]) -> MetaOapg.properties.otherRate3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherRate4"]) -> MetaOapg.properties.otherRate4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroupDescription"]) -> MetaOapg.properties.payGroupDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piecePayRate"]) -> MetaOapg.properties.piecePayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryJobCode"]) -> MetaOapg.properties.primaryJobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobSalaryGrade"]) -> MetaOapg.properties.jobSalaryGrade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobChangeReasonCode"]) -> MetaOapg.properties.jobChangeReasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobGroupCode"]) -> MetaOapg.properties.jobGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateInJob"]) -> MetaOapg.properties.dateInJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateLastPaid"]) -> MetaOapg.properties.dateLastPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateLastWorked"]) -> MetaOapg.properties.dateLastWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfLastSalaryReview"]) -> MetaOapg.properties.dateOfLastSalaryReview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfNextSalayrReview"]) -> MetaOapg.properties.dateOfNextSalayrReview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAutoAllocated"]) -> MetaOapg.properties.isAutoAllocated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAutoPaid"]) -> MetaOapg.properties.isAutoPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSeasonalWorker"]) -> MetaOapg.properties.isSeasonalWorker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHighlyCompensated"]) -> MetaOapg.properties.isHighlyCompensated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMultipleJob"]) -> MetaOapg.properties.isMultipleJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroupCode"]) -> MetaOapg.properties.payGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriod"]) -> MetaOapg.properties.payPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payScaleCode"]) -> MetaOapg.properties.payScaleCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salaryOrHourlyCode"]) -> MetaOapg.properties.salaryOrHourlyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> MetaOapg.properties.fullTimeOrPartTimeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledFullTimeEquivalency"]) -> MetaOapg.properties.scheduledFullTimeEquivalency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledPeriodWorkHours"]) -> MetaOapg.properties.scheduledPeriodWorkHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledAnnualWorkHours"]) -> MetaOapg.properties.scheduledAnnualWorkHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeklyHours"]) -> MetaOapg.properties.weeklyHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryShiftCode"]) -> MetaOapg.properties.primaryShiftCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryShiftGroupCode"]) -> MetaOapg.properties.primaryShiftGroupCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avgPayRateCurPer"]) -> MetaOapg.properties.avgPayRateCurPer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusTotalHrs"]) -> MetaOapg.properties.bonusTotalHrs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusTotalOtHrs"]) -> MetaOapg.properties.bonusTotalOtHrs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datePaidThru"]) -> MetaOapg.properties.datePaidThru: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emplStatus"]) -> MetaOapg.properties.emplStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAnnSalary"]) -> MetaOapg.properties.totalAnnSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distributionCenterCode"]) -> MetaOapg.properties.distributionCenterCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfPayments"]) -> MetaOapg.properties.numberOfPayments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceReviewRating"]) -> MetaOapg.properties.performanceReviewRating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceReviewType"]) -> MetaOapg.properties.performanceReviewType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeID", "companyID", "annualSalary", "hourlyPayRate", "weeklyPayRate", "payPeriodPayRate", "currencyCode", "otherRate1", "otherRate2", "otherRate3", "otherRate4", "payGroupDescription", "piecePayRate", "primaryJobCode", "jobSalaryGrade", "jobChangeReasonCode", "jobGroupCode", "jobTitle", "dateInJob", "dateLastPaid", "dateLastWorked", "dateOfLastSalaryReview", "dateOfNextSalayrReview", "isAutoAllocated", "isAutoPaid", "isSeasonalWorker", "isHighlyCompensated", "isMultipleJob", "payGroupCode", "payPeriod", "payScaleCode", "salaryOrHourlyCode", "fullTimeOrPartTimeCode", "scheduledFullTimeEquivalency", "scheduledPeriodWorkHours", "scheduledAnnualWorkHours", "weeklyHours", "primaryShiftCode", "primaryShiftGroupCode", "avgPayRateCurPer", "bonusTotalHrs", "bonusTotalOtHrs", "datePaidThru", "emplStatus", "totalAnnSalary", "distributionCenterCode", "numberOfPayments", "performanceReviewRating", "performanceReviewType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeID"]) -> typing.Union[MetaOapg.properties.employeeID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyID"]) -> typing.Union[MetaOapg.properties.companyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSalary"]) -> typing.Union[MetaOapg.properties.annualSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourlyPayRate"]) -> typing.Union[MetaOapg.properties.hourlyPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeklyPayRate"]) -> typing.Union[MetaOapg.properties.weeklyPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodPayRate"]) -> typing.Union[MetaOapg.properties.payPeriodPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherRate1"]) -> typing.Union[MetaOapg.properties.otherRate1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherRate2"]) -> typing.Union[MetaOapg.properties.otherRate2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherRate3"]) -> typing.Union[MetaOapg.properties.otherRate3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherRate4"]) -> typing.Union[MetaOapg.properties.otherRate4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroupDescription"]) -> typing.Union[MetaOapg.properties.payGroupDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piecePayRate"]) -> typing.Union[MetaOapg.properties.piecePayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryJobCode"]) -> typing.Union[MetaOapg.properties.primaryJobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobSalaryGrade"]) -> typing.Union[MetaOapg.properties.jobSalaryGrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobChangeReasonCode"]) -> typing.Union[MetaOapg.properties.jobChangeReasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobGroupCode"]) -> typing.Union[MetaOapg.properties.jobGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateInJob"]) -> typing.Union[MetaOapg.properties.dateInJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateLastPaid"]) -> typing.Union[MetaOapg.properties.dateLastPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateLastWorked"]) -> typing.Union[MetaOapg.properties.dateLastWorked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfLastSalaryReview"]) -> typing.Union[MetaOapg.properties.dateOfLastSalaryReview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfNextSalayrReview"]) -> typing.Union[MetaOapg.properties.dateOfNextSalayrReview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAutoAllocated"]) -> typing.Union[MetaOapg.properties.isAutoAllocated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAutoPaid"]) -> typing.Union[MetaOapg.properties.isAutoPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSeasonalWorker"]) -> typing.Union[MetaOapg.properties.isSeasonalWorker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHighlyCompensated"]) -> typing.Union[MetaOapg.properties.isHighlyCompensated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMultipleJob"]) -> typing.Union[MetaOapg.properties.isMultipleJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroupCode"]) -> typing.Union[MetaOapg.properties.payGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriod"]) -> typing.Union[MetaOapg.properties.payPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payScaleCode"]) -> typing.Union[MetaOapg.properties.payScaleCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salaryOrHourlyCode"]) -> typing.Union[MetaOapg.properties.salaryOrHourlyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeOrPartTimeCode"]) -> typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledFullTimeEquivalency"]) -> typing.Union[MetaOapg.properties.scheduledFullTimeEquivalency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledPeriodWorkHours"]) -> typing.Union[MetaOapg.properties.scheduledPeriodWorkHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledAnnualWorkHours"]) -> typing.Union[MetaOapg.properties.scheduledAnnualWorkHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeklyHours"]) -> typing.Union[MetaOapg.properties.weeklyHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryShiftCode"]) -> typing.Union[MetaOapg.properties.primaryShiftCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryShiftGroupCode"]) -> typing.Union[MetaOapg.properties.primaryShiftGroupCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avgPayRateCurPer"]) -> typing.Union[MetaOapg.properties.avgPayRateCurPer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusTotalHrs"]) -> typing.Union[MetaOapg.properties.bonusTotalHrs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusTotalOtHrs"]) -> typing.Union[MetaOapg.properties.bonusTotalOtHrs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datePaidThru"]) -> typing.Union[MetaOapg.properties.datePaidThru, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emplStatus"]) -> typing.Union[MetaOapg.properties.emplStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAnnSalary"]) -> typing.Union[MetaOapg.properties.totalAnnSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distributionCenterCode"]) -> typing.Union[MetaOapg.properties.distributionCenterCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfPayments"]) -> typing.Union[MetaOapg.properties.numberOfPayments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceReviewRating"]) -> typing.Union[MetaOapg.properties.performanceReviewRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceReviewType"]) -> typing.Union[MetaOapg.properties.performanceReviewType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeID", "companyID", "annualSalary", "hourlyPayRate", "weeklyPayRate", "payPeriodPayRate", "currencyCode", "otherRate1", "otherRate2", "otherRate3", "otherRate4", "payGroupDescription", "piecePayRate", "primaryJobCode", "jobSalaryGrade", "jobChangeReasonCode", "jobGroupCode", "jobTitle", "dateInJob", "dateLastPaid", "dateLastWorked", "dateOfLastSalaryReview", "dateOfNextSalayrReview", "isAutoAllocated", "isAutoPaid", "isSeasonalWorker", "isHighlyCompensated", "isMultipleJob", "payGroupCode", "payPeriod", "payScaleCode", "salaryOrHourlyCode", "fullTimeOrPartTimeCode", "scheduledFullTimeEquivalency", "scheduledPeriodWorkHours", "scheduledAnnualWorkHours", "weeklyHours", "primaryShiftCode", "primaryShiftGroupCode", "avgPayRateCurPer", "bonusTotalHrs", "bonusTotalOtHrs", "datePaidThru", "emplStatus", "totalAnnSalary", "distributionCenterCode", "numberOfPayments", "performanceReviewRating", "performanceReviewType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeID: typing.Union[MetaOapg.properties.employeeID, str, schemas.Unset] = schemas.unset,
        companyID: typing.Union[MetaOapg.properties.companyID, str, schemas.Unset] = schemas.unset,
        annualSalary: typing.Union[MetaOapg.properties.annualSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hourlyPayRate: typing.Union[MetaOapg.properties.hourlyPayRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        weeklyPayRate: typing.Union[MetaOapg.properties.weeklyPayRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payPeriodPayRate: typing.Union[MetaOapg.properties.payPeriodPayRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        otherRate1: typing.Union[MetaOapg.properties.otherRate1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        otherRate2: typing.Union[MetaOapg.properties.otherRate2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        otherRate3: typing.Union[MetaOapg.properties.otherRate3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        otherRate4: typing.Union[MetaOapg.properties.otherRate4, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payGroupDescription: typing.Union[MetaOapg.properties.payGroupDescription, str, schemas.Unset] = schemas.unset,
        piecePayRate: typing.Union[MetaOapg.properties.piecePayRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        primaryJobCode: typing.Union[MetaOapg.properties.primaryJobCode, str, schemas.Unset] = schemas.unset,
        jobSalaryGrade: typing.Union[MetaOapg.properties.jobSalaryGrade, str, schemas.Unset] = schemas.unset,
        jobChangeReasonCode: typing.Union[MetaOapg.properties.jobChangeReasonCode, str, schemas.Unset] = schemas.unset,
        jobGroupCode: typing.Union[MetaOapg.properties.jobGroupCode, str, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, str, schemas.Unset] = schemas.unset,
        dateInJob: typing.Union[MetaOapg.properties.dateInJob, str, datetime, schemas.Unset] = schemas.unset,
        dateLastPaid: typing.Union[MetaOapg.properties.dateLastPaid, str, datetime, schemas.Unset] = schemas.unset,
        dateLastWorked: typing.Union[MetaOapg.properties.dateLastWorked, str, datetime, schemas.Unset] = schemas.unset,
        dateOfLastSalaryReview: typing.Union[MetaOapg.properties.dateOfLastSalaryReview, str, datetime, schemas.Unset] = schemas.unset,
        dateOfNextSalayrReview: typing.Union[MetaOapg.properties.dateOfNextSalayrReview, str, datetime, schemas.Unset] = schemas.unset,
        isAutoAllocated: typing.Union[MetaOapg.properties.isAutoAllocated, bool, schemas.Unset] = schemas.unset,
        isAutoPaid: typing.Union[MetaOapg.properties.isAutoPaid, bool, schemas.Unset] = schemas.unset,
        isSeasonalWorker: typing.Union[MetaOapg.properties.isSeasonalWorker, bool, schemas.Unset] = schemas.unset,
        isHighlyCompensated: typing.Union[MetaOapg.properties.isHighlyCompensated, bool, schemas.Unset] = schemas.unset,
        isMultipleJob: typing.Union[MetaOapg.properties.isMultipleJob, bool, schemas.Unset] = schemas.unset,
        payGroupCode: typing.Union[MetaOapg.properties.payGroupCode, str, schemas.Unset] = schemas.unset,
        payPeriod: typing.Union[MetaOapg.properties.payPeriod, str, schemas.Unset] = schemas.unset,
        payScaleCode: typing.Union[MetaOapg.properties.payScaleCode, str, schemas.Unset] = schemas.unset,
        salaryOrHourlyCode: typing.Union[MetaOapg.properties.salaryOrHourlyCode, str, schemas.Unset] = schemas.unset,
        fullTimeOrPartTimeCode: typing.Union[MetaOapg.properties.fullTimeOrPartTimeCode, str, schemas.Unset] = schemas.unset,
        scheduledFullTimeEquivalency: typing.Union[MetaOapg.properties.scheduledFullTimeEquivalency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scheduledPeriodWorkHours: typing.Union[MetaOapg.properties.scheduledPeriodWorkHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scheduledAnnualWorkHours: typing.Union[MetaOapg.properties.scheduledAnnualWorkHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        weeklyHours: typing.Union[MetaOapg.properties.weeklyHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        primaryShiftCode: typing.Union[MetaOapg.properties.primaryShiftCode, str, schemas.Unset] = schemas.unset,
        primaryShiftGroupCode: typing.Union[MetaOapg.properties.primaryShiftGroupCode, str, schemas.Unset] = schemas.unset,
        avgPayRateCurPer: typing.Union[MetaOapg.properties.avgPayRateCurPer, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bonusTotalHrs: typing.Union[MetaOapg.properties.bonusTotalHrs, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bonusTotalOtHrs: typing.Union[MetaOapg.properties.bonusTotalOtHrs, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        datePaidThru: typing.Union[MetaOapg.properties.datePaidThru, str, datetime, schemas.Unset] = schemas.unset,
        emplStatus: typing.Union[MetaOapg.properties.emplStatus, str, schemas.Unset] = schemas.unset,
        totalAnnSalary: typing.Union[MetaOapg.properties.totalAnnSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        distributionCenterCode: typing.Union[MetaOapg.properties.distributionCenterCode, str, schemas.Unset] = schemas.unset,
        numberOfPayments: typing.Union[MetaOapg.properties.numberOfPayments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        performanceReviewRating: typing.Union[MetaOapg.properties.performanceReviewRating, str, schemas.Unset] = schemas.unset,
        performanceReviewType: typing.Union[MetaOapg.properties.performanceReviewType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmpCompensationDetails':
        return super().__new__(
            cls,
            *args,
            employeeID=employeeID,
            companyID=companyID,
            annualSalary=annualSalary,
            hourlyPayRate=hourlyPayRate,
            weeklyPayRate=weeklyPayRate,
            payPeriodPayRate=payPeriodPayRate,
            currencyCode=currencyCode,
            otherRate1=otherRate1,
            otherRate2=otherRate2,
            otherRate3=otherRate3,
            otherRate4=otherRate4,
            payGroupDescription=payGroupDescription,
            piecePayRate=piecePayRate,
            primaryJobCode=primaryJobCode,
            jobSalaryGrade=jobSalaryGrade,
            jobChangeReasonCode=jobChangeReasonCode,
            jobGroupCode=jobGroupCode,
            jobTitle=jobTitle,
            dateInJob=dateInJob,
            dateLastPaid=dateLastPaid,
            dateLastWorked=dateLastWorked,
            dateOfLastSalaryReview=dateOfLastSalaryReview,
            dateOfNextSalayrReview=dateOfNextSalayrReview,
            isAutoAllocated=isAutoAllocated,
            isAutoPaid=isAutoPaid,
            isSeasonalWorker=isSeasonalWorker,
            isHighlyCompensated=isHighlyCompensated,
            isMultipleJob=isMultipleJob,
            payGroupCode=payGroupCode,
            payPeriod=payPeriod,
            payScaleCode=payScaleCode,
            salaryOrHourlyCode=salaryOrHourlyCode,
            fullTimeOrPartTimeCode=fullTimeOrPartTimeCode,
            scheduledFullTimeEquivalency=scheduledFullTimeEquivalency,
            scheduledPeriodWorkHours=scheduledPeriodWorkHours,
            scheduledAnnualWorkHours=scheduledAnnualWorkHours,
            weeklyHours=weeklyHours,
            primaryShiftCode=primaryShiftCode,
            primaryShiftGroupCode=primaryShiftGroupCode,
            avgPayRateCurPer=avgPayRateCurPer,
            bonusTotalHrs=bonusTotalHrs,
            bonusTotalOtHrs=bonusTotalOtHrs,
            datePaidThru=datePaidThru,
            emplStatus=emplStatus,
            totalAnnSalary=totalAnnSalary,
            distributionCenterCode=distributionCenterCode,
            numberOfPayments=numberOfPayments,
            performanceReviewRating=performanceReviewRating,
            performanceReviewType=performanceReviewType,
            _configuration=_configuration,
            **kwargs,
        )
