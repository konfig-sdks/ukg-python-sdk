# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ukg_python_sdk import schemas  # noqa: F401


class EmployeeEducationModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            systemId = schemas.StrSchema
            school = schemas.StrSchema
            educationLevel = schemas.StrSchema
            educationMajor = schemas.StrSchema
            educationMinor = schemas.StrSchema
            gpa = schemas.StrSchema
            beginDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            isGraduate = schemas.BoolSchema
            isHighestLevel = schemas.BoolSchema
            employeeNumber = schemas.StrSchema
            country = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "systemId": systemId,
                "school": school,
                "educationLevel": educationLevel,
                "educationMajor": educationMajor,
                "educationMinor": educationMinor,
                "gpa": gpa,
                "beginDate": beginDate,
                "endDate": endDate,
                "isGraduate": isGraduate,
                "isHighestLevel": isHighestLevel,
                "employeeNumber": employeeNumber,
                "country": country,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemId"]) -> MetaOapg.properties.systemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["school"]) -> MetaOapg.properties.school: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educationLevel"]) -> MetaOapg.properties.educationLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educationMajor"]) -> MetaOapg.properties.educationMajor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educationMinor"]) -> MetaOapg.properties.educationMinor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpa"]) -> MetaOapg.properties.gpa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginDate"]) -> MetaOapg.properties.beginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isGraduate"]) -> MetaOapg.properties.isGraduate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHighestLevel"]) -> MetaOapg.properties.isHighestLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "systemId", "school", "educationLevel", "educationMajor", "educationMinor", "gpa", "beginDate", "endDate", "isGraduate", "isHighestLevel", "employeeNumber", "country", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemId"]) -> typing.Union[MetaOapg.properties.systemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["school"]) -> typing.Union[MetaOapg.properties.school, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educationLevel"]) -> typing.Union[MetaOapg.properties.educationLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educationMajor"]) -> typing.Union[MetaOapg.properties.educationMajor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educationMinor"]) -> typing.Union[MetaOapg.properties.educationMinor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpa"]) -> typing.Union[MetaOapg.properties.gpa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginDate"]) -> typing.Union[MetaOapg.properties.beginDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isGraduate"]) -> typing.Union[MetaOapg.properties.isGraduate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHighestLevel"]) -> typing.Union[MetaOapg.properties.isHighestLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "systemId", "school", "educationLevel", "educationMajor", "educationMinor", "gpa", "beginDate", "endDate", "isGraduate", "isHighestLevel", "employeeNumber", "country", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        systemId: typing.Union[MetaOapg.properties.systemId, str, schemas.Unset] = schemas.unset,
        school: typing.Union[MetaOapg.properties.school, str, schemas.Unset] = schemas.unset,
        educationLevel: typing.Union[MetaOapg.properties.educationLevel, str, schemas.Unset] = schemas.unset,
        educationMajor: typing.Union[MetaOapg.properties.educationMajor, str, schemas.Unset] = schemas.unset,
        educationMinor: typing.Union[MetaOapg.properties.educationMinor, str, schemas.Unset] = schemas.unset,
        gpa: typing.Union[MetaOapg.properties.gpa, str, schemas.Unset] = schemas.unset,
        beginDate: typing.Union[MetaOapg.properties.beginDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        isGraduate: typing.Union[MetaOapg.properties.isGraduate, bool, schemas.Unset] = schemas.unset,
        isHighestLevel: typing.Union[MetaOapg.properties.isHighestLevel, bool, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeEducationModel':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            systemId=systemId,
            school=school,
            educationLevel=educationLevel,
            educationMajor=educationMajor,
            educationMinor=educationMinor,
            gpa=gpa,
            beginDate=beginDate,
            endDate=endDate,
            isGraduate=isGraduate,
            isHighestLevel=isHighestLevel,
            employeeNumber=employeeNumber,
            country=country,
            _configuration=_configuration,
            **kwargs,
        )
