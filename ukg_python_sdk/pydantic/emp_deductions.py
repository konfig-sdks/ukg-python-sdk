# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class EmpDeductions(BaseModel):
    arrears_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='arrearsAmt')

    benefit_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='benefitAmount')

    benefit_amount_calc_rule: typing.Optional[str] = Field(None, alias='benefitAmountCalcRule')

    benefit_amount_rate_or_percent: typing.Optional[typing.Union[int, float]] = Field(None, alias='benefitAmountRateOrPercent')

    benefit_option: typing.Optional[str] = Field(None, alias='benefitOption')

    benefit_start_date: typing.Optional[datetime] = Field(None, alias='benefitStartDate')

    benefit_status: typing.Optional[str] = Field(None, alias='benefitStatus')

    benefit_status_date: typing.Optional[datetime] = Field(None, alias='benefitStatusDate')

    benefit_stop_date: typing.Optional[datetime] = Field(None, alias='benefitStopDate')

    company_i_d: typing.Optional[str] = Field(None, alias='companyID')

    custom_amount1: typing.Optional[typing.Union[int, float]] = Field(None, alias='customAmount1')

    custom_amount2: typing.Optional[typing.Union[int, float]] = Field(None, alias='customAmount2')

    custom_date: typing.Optional[datetime] = Field(None, alias='customDate')

    date_suspended_from: typing.Optional[datetime] = Field(None, alias='dateSuspendedFrom')

    date_suspended_to: typing.Optional[datetime] = Field(None, alias='dateSuspendedTo')

    datetime_changed: typing.Optional[datetime] = Field(None, alias='datetimeChanged')

    datetime_created: typing.Optional[datetime] = Field(None, alias='datetimeCreated')

    declined_by_carrier: typing.Optional[str] = Field(None, alias='declinedByCarrier')

    declined_by_carrier_date: typing.Optional[datetime] = Field(None, alias='declinedByCarrierDate')

    declined_by_carrier_reason: typing.Optional[str] = Field(None, alias='declinedByCarrierReason')

    deduction_code: typing.Optional[str] = Field(None, alias='deductionCode')

    effective_record_i_d: typing.Optional[str] = Field(None, alias='effectiveRecordID')

    contact_i_d: typing.Optional[str] = Field(None, alias='contactID')

    member_or_case_number: typing.Optional[str] = Field(None, alias='memberOrCaseNumber')

    employee_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeAmount')

    employee_calc_rate_or_pct: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeCalcRateOrPct')

    employee_calc_rule: typing.Optional[str] = Field(None, alias='employeeCalcRule')

    employee_cause_number: typing.Optional[str] = Field(None, alias='employeeCauseNumber')

    employee_ded_last_paid: typing.Optional[datetime] = Field(None, alias='employeeDedLastPaid')

    employee_eligibility_date: typing.Optional[datetime] = Field(None, alias='employeeEligibilityDate')

    employee_fiscal_y_t_d_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeFiscalYTDAmt')

    employee_goal_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeGoalAmt')

    employee_goal_to_date_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeGoalToDateAmt')

    employee_i_d: typing.Optional[str] = Field(None, alias='employeeID')

    employee_last_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeLastAmount')

    employee_month_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeMonthToDateAmount')

    employee_quarter_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeQuarterToDateAmount')

    employee_year_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeYearToDateAmount')

    evidence_of_insurability_date: typing.Optional[datetime] = Field(None, alias='evidenceOfInsurabilityDate')

    evidence_of_insurability_desired_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='evidenceOfInsurabilityDesiredAmt')

    evidence_of_insurability_desired_calc_rate_or_pct: typing.Optional[typing.Union[int, float]] = Field(None, alias='evidenceOfInsurabilityDesiredCalcRateOrPct')

    employer_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerAmount')

    employer_calc_rate_or_pct: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerCalcRateOrPct')

    employer_calc_rule: typing.Optional[str] = Field(None, alias='employerCalcRule')

    employer_fiscal_year_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerFiscalYearToDateAmount')

    employer_last_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerLastAmount')

    employer_month_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerMonthToDateAmount')

    employer_quarter_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerQuarterToDateAmount')

    employer_year_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerYearToDateAmount')

    interest_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='interestAmount')

    is_deduction_offset: typing.Optional[bool] = Field(None, alias='isDeductionOffset')

    medical_indicator: typing.Optional[bool] = Field(None, alias='medicalIndicator')

    need_evidence_of_insurability: typing.Optional[bool] = Field(None, alias='needEvidenceOfInsurability')

    notes: typing.Optional[str] = Field(None, alias='notes')

    primary_care_physician: typing.Optional[str] = Field(None, alias='primaryCarePhysician')

    primary_care_physician_id: typing.Optional[str] = Field(None, alias='primaryCarePhysicianId')

    prior_employee_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='priorEmployeeAmount')

    prior_employee_goal_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='priorEmployeeGoalAmount')

    prior_employee_year_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='priorEmployeeYearToDateAmount')

    prior_employer_year_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='priorEmployerYearToDateAmount')

    deduction_start_date: typing.Optional[datetime] = Field(None, alias='deductionStartDate')

    deduction_stop_date: typing.Optional[datetime] = Field(None, alias='deductionStopDate')

    system_i_d: typing.Optional[str] = Field(None, alias='systemID')

    waive_reason: typing.Optional[str] = Field(None, alias='waiveReason')

    is_home_company: typing.Optional[bool] = Field(None, alias='isHomeCompany')

    is_waived: typing.Optional[bool] = Field(None, alias='isWaived')

    include_in_additional_check: typing.Optional[bool] = Field(None, alias='includeInAdditionalCheck')

    include_in_manual_check: typing.Optional[bool] = Field(None, alias='includeInManualCheck')

    employee_per_cap_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeePerCapAmount')

    employee_per_cap_percent: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeePerCapPercent')

    employee_per_cap_calc_rule: typing.Optional[str] = Field(None, alias='employeePerCapCalcRule')

    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    company_id: typing.Optional[str] = Field(None, alias='companyId')

    ded_code: typing.Optional[str] = Field(None, alias='dedCode')

    ben_status: typing.Optional[str] = Field(None, alias='benStatus')

    end_date_time: typing.Optional[datetime] = Field(None, alias='endDateTime')

    page: typing.Optional[int] = Field(None, alias='page')

    per__page: typing.Optional[int] = Field(None, alias='per_Page')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
