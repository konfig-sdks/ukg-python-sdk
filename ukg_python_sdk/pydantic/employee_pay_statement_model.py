# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from ukg_python_sdk.pydantic.employee_pay_statement_accruals_model import EmployeePayStatementAccrualsModel
from ukg_python_sdk.pydantic.employee_pay_statement_deductions_model import EmployeePayStatementDeductionsModel
from ukg_python_sdk.pydantic.employee_pay_statement_earnings_model import EmployeePayStatementEarningsModel
from ukg_python_sdk.pydantic.employee_pay_statement_identifier_model import EmployeePayStatementIdentifierModel
from ukg_python_sdk.pydantic.employee_pay_statement_net_pay_model import EmployeePayStatementNetPayModel
from ukg_python_sdk.pydantic.employee_pay_statement_taxes_model import EmployeePayStatementTaxesModel

class EmployeePayStatementModel(BaseModel):
    accruals: typing.Optional[typing.List[EmployeePayStatementAccrualsModel]] = Field(None, alias='accruals')

    addressline1: typing.Optional[str] = Field(None, alias='addressline1')

    addressline2: typing.Optional[str] = Field(None, alias='addressline2')

    city: typing.Optional[str] = Field(None, alias='city')

    companyaddresscity: typing.Optional[str] = Field(None, alias='companyaddresscity')

    companyaddresscountry: typing.Optional[str] = Field(None, alias='companyaddresscountry')

    companyaddresscounty: typing.Optional[str] = Field(None, alias='companyaddresscounty')

    companyaddressline1: typing.Optional[str] = Field(None, alias='companyaddressline1')

    companyaddressline2: typing.Optional[str] = Field(None, alias='companyaddressline2')

    companyaddresspostalcode: typing.Optional[str] = Field(None, alias='companyaddresspostalcode')

    companyaddressstateorprovince: typing.Optional[str] = Field(None, alias='companyaddressstateorprovince')

    companyname: typing.Optional[str] = Field(None, alias='companyname')

    companyphone: typing.Optional[str] = Field(None, alias='companyphone')

    companyphoneext: typing.Optional[str] = Field(None, alias='companyphoneext')

    country: typing.Optional[str] = Field(None, alias='country')

    deductions: typing.Optional[typing.List[EmployeePayStatementDeductionsModel]] = Field(None, alias='deductions')

    deductionscurrent: typing.Optional[typing.Union[int, float]] = Field(None, alias='deductionscurrent')

    deductionsytd: typing.Optional[typing.Union[int, float]] = Field(None, alias='deductionsytd')

    document: typing.Optional[str] = Field(None, alias='document')

    earnings: typing.Optional[typing.List[EmployeePayStatementEarningsModel]] = Field(None, alias='earnings')

    employeeidentifier: typing.Optional[EmployeePayStatementIdentifierModel] = Field(None, alias='employeeidentifier')

    employeenumber: typing.Optional[str] = Field(None, alias='employeenumber')

    federaladditionalamount_withheld: typing.Optional[typing.Union[int, float]] = Field(None, alias='federaladditionalamountWithheld')

    federalallowancesclaimed: typing.Optional[int] = Field(None, alias='federalallowancesclaimed')

    federalfilingstatus: typing.Optional[str] = Field(None, alias='federalfilingstatus')

    federaltaxablewagescurrent: typing.Optional[typing.Union[int, float]] = Field(None, alias='federaltaxablewagescurrent')

    federaltaxablewagesytd: typing.Optional[typing.Union[int, float]] = Field(None, alias='federaltaxablewagesytd')

    fullname: typing.Optional[str] = Field(None, alias='fullname')

    grosswagescurrent: typing.Optional[typing.Union[int, float]] = Field(None, alias='grosswagescurrent')

    grosswagesytd: typing.Optional[typing.Union[int, float]] = Field(None, alias='grosswagesytd')

    job: typing.Optional[str] = Field(None, alias='job')

    location: typing.Optional[str] = Field(None, alias='location')

    netpay: typing.Optional[typing.List[EmployeePayStatementNetPayModel]] = Field(None, alias='netpay')

    netpaycurrent: typing.Optional[typing.Union[int, float]] = Field(None, alias='netpaycurrent')

    netpayytd: typing.Optional[typing.Union[int, float]] = Field(None, alias='netpayytd')

    orglevel1: typing.Optional[str] = Field(None, alias='orglevel1')

    orglevel2: typing.Optional[str] = Field(None, alias='orglevel2')

    orglevel3: typing.Optional[str] = Field(None, alias='orglevel3')

    orglevel4: typing.Optional[str] = Field(None, alias='orglevel4')

    paydate: typing.Optional[datetime] = Field(None, alias='paydate')

    payperiodfrequency: typing.Optional[str] = Field(None, alias='payperiodfrequency')

    paygroup: typing.Optional[str] = Field(None, alias='paygroup')

    payidentifier: typing.Optional[str] = Field(None, alias='payidentifier')

    payrate: typing.Optional[typing.Union[int, float]] = Field(None, alias='payrate')

    periodenddate: typing.Optional[datetime] = Field(None, alias='periodenddate')

    periodstartdate: typing.Optional[datetime] = Field(None, alias='periodstartdate')

    postalcode: typing.Optional[str] = Field(None, alias='postalcode')

    residentstateallowancesclaimed: typing.Optional[int] = Field(None, alias='residentstateallowancesclaimed')

    residentstatefilingstatus: typing.Optional[str] = Field(None, alias='residentstatefilingstatus')

    ssn: typing.Optional[str] = Field(None, alias='ssn')

    stateorprovince: typing.Optional[str] = Field(None, alias='stateorprovince')

    taxes: typing.Optional[typing.List[EmployeePayStatementTaxesModel]] = Field(None, alias='taxes')

    taxescurrent: typing.Optional[typing.Union[int, float]] = Field(None, alias='taxescurrent')

    taxesytd: typing.Optional[typing.Union[int, float]] = Field(None, alias='taxesytd')

    workstateallowancesclaimed: typing.Optional[int] = Field(None, alias='workstateallowancesclaimed')

    workstatefilingstatus: typing.Optional[str] = Field(None, alias='workstatefilingstatus')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
