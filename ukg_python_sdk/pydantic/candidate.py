# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from ukg_python_sdk.pydantic.behaviors import Behaviors
from ukg_python_sdk.pydantic.candidate_contact_info import CandidateContactInfo
from ukg_python_sdk.pydantic.candidate_name import CandidateName
from ukg_python_sdk.pydantic.candidate_preferred_locale import CandidatePreferredLocale
from ukg_python_sdk.pydantic.candidate_roles import CandidateRoles
from ukg_python_sdk.pydantic.educations import Educations
from ukg_python_sdk.pydantic.hyperlinks import Hyperlinks
from ukg_python_sdk.pydantic.licenses import Licenses
from ukg_python_sdk.pydantic.links import Links
from ukg_python_sdk.pydantic.motivations import Motivations
from ukg_python_sdk.pydantic.skill import Skill
from ukg_python_sdk.pydantic.workexperience import Workexperience

class Candidate(BaseModel):
    # The id of the candidate for whom the background check order has been requested.
    id: typing.Optional[str] = Field(None, alias='id')

    # The candidate creation date.
    created_at: typing.Optional[str] = Field(None, alias='created_at')

    # The id of the person who has created the application.
    creator.id_: typing.Optional[str] = Field(None, alias='creator.id')

    # The candidate id in the core HR system.
    person_id: typing.Optional[str] = Field(None, alias='person_id')

    # The alternative user id that can be used in third-party vendors’ integrations. Returned only for users with the “recruiter”, “hiring-manager”, or “recruiting-administrator” role.
    integration: typing.Optional[str] = Field(None, alias='integration')

    # A flag indicating whether the candidate is an internal employee. 
    is_internal: typing.Optional[str] = Field(None, alias='is_internal')

    # A flag indicating whether the candidate is an active employee. Can only be specified when is_internal is true.
    is_active: typing.Optional[str] = Field(None, alias='is_active')

    # A flag indicating whether the candidate is willing to relocate. 
    is_willing_to_relocate: typing.Optional[str] = Field(None, alias='is_willing_to_relocate')

    preferred_locale: typing.Optional[CandidatePreferredLocale] = Field(None, alias='preferred_locale')

    name: typing.Optional[CandidateName] = Field(None, alias='name')

    contact_info: typing.Optional[CandidateContactInfo] = Field(None, alias='contact_info')

    # An array containing candidate’s skills.
    skills: typing.Optional[typing.List[Skill]] = Field(None, alias='skills')

    work_experience: typing.Optional[typing.List[Workexperience]] = Field(None, alias='work_experience')

    educations: typing.Optional[typing.List[Educations]] = Field(None, alias='educations')

    licenses: typing.Optional[typing.List[Licenses]] = Field(None, alias='licenses')

    behaviors: typing.Optional[typing.List[Behaviors]] = Field(None, alias='behaviors')

    motivations: typing.Optional[typing.List[Motivations]] = Field(None, alias='motivations')

    roles: typing.Optional[CandidateRoles] = Field(None, alias='roles')

    hyperlinks: typing.Optional[typing.List[Hyperlinks]] = Field(None, alias='hyperlinks')

    # The last updated date.
    updated_at: typing.Optional[str] = Field(None, alias='updated_at')

    org_units: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='org_units')

    links: typing.Optional[typing.List[Links]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
