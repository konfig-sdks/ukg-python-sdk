# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class EmployeeMultiplePositions(BaseModel):
    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    company_id: typing.Optional[str] = Field(None, alias='companyId')

    job_code: typing.Optional[str] = Field(None, alias='jobCode')

    position_code: typing.Optional[str] = Field(None, alias='positionCode')

    is_primary: typing.Optional[bool] = Field(None, alias='isPrimary')

    annual_salary: typing.Optional[typing.Union[int, float]] = Field(None, alias='annualSalary')

    hourly_pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='hourlyPayRate')

    full_time_or_part_time_code: typing.Optional[str] = Field(None, alias='fullTimeOrPartTimeCode')

    full_time_or_part_time: typing.Optional[str] = Field(None, alias='fullTimeOrPartTime')

    clock_code: typing.Optional[str] = Field(None, alias='clockCode')

    date_time_created: typing.Optional[datetime] = Field(None, alias='dateTimeCreated')

    employee_type_code: typing.Optional[str] = Field(None, alias='employeeTypeCode')

    employee_type_description: typing.Optional[str] = Field(None, alias='employeeTypeDescription')

    effective_start_date: typing.Optional[datetime] = Field(None, alias='effectiveStartDate')

    effective_stop_date: typing.Optional[datetime] = Field(None, alias='effectiveStopDate')

    is_eligible_for_benefits: typing.Optional[bool] = Field(None, alias='isEligibleForBenefits')

    location_code: typing.Optional[str] = Field(None, alias='locationCode')

    notes: typing.Optional[str] = Field(None, alias='notes')

    organization_level1_code: typing.Optional[str] = Field(None, alias='organizationLevel1Code')

    organization_level2_code: typing.Optional[str] = Field(None, alias='organizationLevel2Code')

    organization_level3_code: typing.Optional[str] = Field(None, alias='organizationLevel3Code')

    organization_level4_code: typing.Optional[str] = Field(None, alias='organizationLevel4Code')

    other_rate1: typing.Optional[typing.Union[int, float]] = Field(None, alias='otherRate1')

    other_rate2: typing.Optional[typing.Union[int, float]] = Field(None, alias='otherRate2')

    other_rate3: typing.Optional[typing.Union[int, float]] = Field(None, alias='otherRate3')

    other_rate4: typing.Optional[typing.Union[int, float]] = Field(None, alias='otherRate4')

    override_incumbent_data: typing.Optional[str] = Field(None, alias='overrideIncumbentData')

    pay_group_code: typing.Optional[str] = Field(None, alias='payGroupCode')

    period_pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='periodPayRate')

    piece_pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='piecePayRate')

    project_code: typing.Optional[str] = Field(None, alias='projectCode')

    salary_or_hourly_code: typing.Optional[str] = Field(None, alias='salaryOrHourlyCode')

    salary_or_hourly: typing.Optional[str] = Field(None, alias='salaryOrHourly')

    scheduled_annual_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='scheduledAnnualHours')

    scheduled_full_time_employee: typing.Optional[typing.Union[int, float]] = Field(None, alias='scheduledFullTimeEmployee')

    scheduled_work_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='scheduledWorkHours')

    shift_code: typing.Optional[str] = Field(None, alias='shiftCode')

    shift_group_code: typing.Optional[str] = Field(None, alias='shiftGroupCode')

    shift_group_description: typing.Optional[str] = Field(None, alias='shiftGroupDescription')

    system_id: typing.Optional[str] = Field(None, alias='systemId')

    weekly_pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='weeklyPayRate')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
