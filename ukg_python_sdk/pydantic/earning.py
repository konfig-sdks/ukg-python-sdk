# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class Earning(BaseModel):
    # Unique identifier for each earnings.
    ref_id: str = Field(alias='refId')

    # Company code associated with employee.
    company_code: str = Field(alias='companyCode')

    # Employee number associated with employee for time data.
    emp_no: str = Field(alias='empNo')

    # Earnings code for time data
    code: str = Field(alias='code')

    # Source of the data as appropriate. Usually an alias of the system sending the data.
    source: str = Field(alias='source')

    # Used in the calculation of coefficient overtime and tips processing. Formatting must conform to ISO 8601 UTC Format
    charge_date: typing.Optional[datetime] = Field(None, alias='chargeDate')

    # Number of hours associated with earnings, if appropriate. Decimal value up to 4 decimal places. Positive and negative values allowed.
    hours: typing.Optional[str] = Field(None, alias='hours')

    # Amount associated with earnings, if appropriate. Positive and negative values allowed.
    amount: typing.Optional[str] = Field(None, alias='amount')

    # Number of pieces associated with earnings, if appropriate. Positive and negative values allowed.
    piece_count: typing.Optional[str] = Field(None, alias='pieceCount')

    # Shift code associated with time data.
    shift_code: typing.Optional[str] = Field(None, alias='shiftCode')

    # Location associated with employee.
    location: typing.Optional[str] = Field(None, alias='location')

    # Job code associated with employee’s time data.
    job: typing.Optional[str] = Field(None, alias='job')

    # Project code or value associated with employee’s time data.
    project: typing.Optional[str] = Field(None, alias='project')

    # Organization level 1 code associated with employee’s time data
    org_lvl1: typing.Optional[str] = Field(None, alias='orgLvl1')

    # Organization level 2 code associated with employee’s time data.
    org_lvl2: typing.Optional[str] = Field(None, alias='orgLvl2')

    # Organization level 3 code associated with employee’s time data.
    org_lvl3: typing.Optional[str] = Field(None, alias='orgLvl3')

    # Organization level 4 code associated with employee’s time data.
    org_lvl4: typing.Optional[str] = Field(None, alias='orgLvl4')

    # Pay rate associated with employee’s time data.  Value overrides pay rate in UKG Pro.
    pay_rate: typing.Optional[str] = Field(None, alias='payRate')

    # Piece rate associated with employee’s time data.  Value overrides piece rate in UKG Pro.
    piece_rate: typing.Optional[str] = Field(None, alias='pieceRate')

    # The Record of Employment pay date.  Must be a valid pay date.
    roe_pay_date: typing.Optional[datetime] = Field(None, alias='roePayDate')

    # Used for co-efficient overtime period adjustment start date.
    adj_earn_period_start_date: typing.Optional[datetime] = Field(None, alias='adjEarnPeriodStartDate')

    # Used for co-efficient overtime period adjustment end date.
    adj_earn_period_end_date: typing.Optional[datetime] = Field(None, alias='adjEarnPeriodEndDate')

    # Sequence of multiple checks for a single employee. Specify the type of additional pay (check or DDA) being added to the employee(s) via Time Clock Import. A - Creates an additional direct deposit advice with deductions (for employees  with existing DD setups). D - Creates an additional direct deposit with No deductions (for employees with existing DD setups). B - Creates an additional pay with deductions; this will create a live check for the employees. J -  Creates an additional pay with No deductions; this will create a live check for the employees 
    check_sequence: typing.Optional[int] = Field(None, alias='checkSequence')

    # R - Creates a Regular Pay check.
    create_pay_type: typing.Optional[str] = Field(None, alias='createPayType')

    # To force the creation of an additional pay via Time clock import, set this to Y.
    force_pay_creation: typing.Optional[str] = Field(None, alias='forcePayCreation')

    # This identifies if an earning is to be grossed up.
    gross_up: typing.Optional[str] = Field(None, alias='grossUp')

    # Specified net amount.
    gross_up_target: typing.Optional[int] = Field(None, alias='grossUpTarget')

    # The Gross Up Tax Calculation Method (E_Batch. EbtGrossUpTaxCalcMethod) Numeric value to identify which taxes to include in the gross up calculation.
    gross_up_tax_calc_method: typing.Optional[int] = Field(None, alias='grossUpTaxCalcMethod')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
