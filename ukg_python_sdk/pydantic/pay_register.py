# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PayRegister(BaseModel):
    annual_salary: typing.Optional[typing.Union[int, float]] = Field(None, alias='annualSalary')

    auto_allocate: typing.Optional[bool] = Field(None, alias='autoAllocate')

    bonus_total_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='bonusTotalHours')

    bonus_total_o_t_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='bonusTotalOTHours')

    check_add_mode: typing.Optional[str] = Field(None, alias='checkAddMode')

    check_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='checkAmount')

    company_id: typing.Optional[str] = Field(None, alias='companyId')

    pay_period_frequency: typing.Optional[str] = Field(None, alias='payPeriodFrequency')

    currency_code: typing.Optional[str] = Field(None, alias='currencyCode')

    direct_deposit_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='directDepositAmount')

    document_number: typing.Optional[str] = Field(None, alias='documentNumber')

    earning_tax_reporting_type: typing.Optional[str] = Field(None, alias='earningTaxReportingType')

    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    employee_status: typing.Optional[str] = Field(None, alias='employeeStatus')

    employee_number: typing.Optional[str] = Field(None, alias='employeeNumber')

    check_id: typing.Optional[str] = Field(None, alias='checkId')

    hourly_pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='hourlyPayRate')

    is_regular_pay_for_cumulative: typing.Optional[str] = Field(None, alias='isRegularPayForCumulative')

    is_voided: typing.Optional[bool] = Field(None, alias='isVoided')

    is_voiding_record: typing.Optional[bool] = Field(None, alias='isVoidingRecord')

    job_code: typing.Optional[str] = Field(None, alias='jobCode')

    last_regular_pay_date: typing.Optional[datetime] = Field(None, alias='lastRegularPayDate')

    location_code: typing.Optional[str] = Field(None, alias='locationCode')

    name_first: typing.Optional[str] = Field(None, alias='nameFirst')

    name_last: typing.Optional[str] = Field(None, alias='nameLast')

    name_middle: typing.Optional[str] = Field(None, alias='nameMiddle')

    name_suffix: typing.Optional[str] = Field(None, alias='nameSuffix')

    net_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='netAmount')

    organization_level1: typing.Optional[str] = Field(None, alias='organizationLevel1')

    organization_level2: typing.Optional[str] = Field(None, alias='organizationLevel2')

    organization_level3: typing.Optional[str] = Field(None, alias='organizationLevel3')

    organization_level4: typing.Optional[str] = Field(None, alias='organizationLevel4')

    original_pay_period_frequency: typing.Optional[str] = Field(None, alias='originalPayPeriodFrequency')

    pay_date: typing.Optional[datetime] = Field(None, alias='payDate')

    pay_group: typing.Optional[str] = Field(None, alias='payGroup')

    period_control: typing.Optional[str] = Field(None, alias='periodControl')

    period_end_date: typing.Optional[datetime] = Field(None, alias='periodEndDate')

    period_start_date: typing.Optional[datetime] = Field(None, alias='periodStartDate')

    project: typing.Optional[str] = Field(None, alias='project')

    reconciled: typing.Optional[str] = Field(None, alias='reconciled')

    reconcile_date: typing.Optional[datetime] = Field(None, alias='reconcileDate')

    sequence_number: typing.Optional[int] = Field(None, alias='sequenceNumber')

    shift: typing.Optional[str] = Field(None, alias='shift')

    ssn: typing.Optional[str] = Field(None, alias='ssn')

    state_sui: typing.Optional[str] = Field(None, alias='stateSui')

    sui_gross: typing.Optional[typing.Union[int, float]] = Field(None, alias='suiGross')

    tax_calculation_group_i_d: typing.Optional[str] = Field(None, alias='taxCalculationGroupID')

    tax_calculation_sequence: typing.Optional[str] = Field(None, alias='taxCalculationSequence')

    total_deduction_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalDeductionAmount')

    total_earnings_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalEarningsAmount')

    total_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalHours')

    total_hours_worked: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalHoursWorked')

    total_shift_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalShiftAmount')

    total_tax_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='totalTaxAmount')

    void_date: typing.Optional[datetime] = Field(None, alias='voidDate')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
