# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PayrollDeductionsHistory(BaseModel):
    allow_partial_deduction: typing.Optional[str] = Field(None, alias='allowPartialDeduction')

    batch_i_d: typing.Optional[str] = Field(None, alias='batchID')

    benefit_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='benefitAmount')

    benefit_option: typing.Optional[str] = Field(None, alias='benefitOption')

    benefit_provider: typing.Optional[str] = Field(None, alias='benefitProvider')

    child_support_type: typing.Optional[str] = Field(None, alias='childSupportType')

    company_id: typing.Optional[str] = Field(None, alias='companyId')

    check_id: typing.Optional[str] = Field(None, alias='checkId')

    current_arrears_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='currentArrearsAmount')

    custom_amount1: typing.Optional[typing.Union[int, float]] = Field(None, alias='customAmount1')

    custom_amount2: typing.Optional[typing.Union[int, float]] = Field(None, alias='customAmount2')

    custom_date: typing.Optional[datetime] = Field(None, alias='customDate')

    deduction_calculation_basis_amt: typing.Optional[typing.Union[int, float]] = Field(None, alias='deductionCalculationBasisAmt')

    deduction_code: typing.Optional[str] = Field(None, alias='deductionCode')

    deduction_for_bonus_only: typing.Optional[str] = Field(None, alias='deductionForBonusOnly')

    deduction_plan_type: typing.Optional[str] = Field(None, alias='deductionPlanType')

    deduction_type: typing.Optional[str] = Field(None, alias='deductionType')

    deferred_compensation_cap: typing.Optional[typing.Union[int, float]] = Field(None, alias='deferredCompensationCap')

    deferred_compensation_regular_cap: typing.Optional[typing.Union[int, float]] = Field(None, alias='deferredCompensationRegularCap')

    dependent_record_id: typing.Optional[str] = Field(None, alias='dependentRecordId')

    employee_calculation_rate_or_percent: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeCalculationRateOrPercent')

    employee_calculaiton_rule: typing.Optional[str] = Field(None, alias='employeeCalculaitonRule')

    employee_current_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeCurrentAmount')

    employee_deduction_last_paid: typing.Optional[datetime] = Field(None, alias='employeeDeductionLastPaid')

    employee_goal_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeGoalAmount')

    employee_goal_rule: typing.Optional[str] = Field(None, alias='employeeGoalRule')

    employee_goal_to_date_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeGoalToDateAmount')

    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    employee_original_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employeeOriginalAmount')

    employee_number: typing.Optional[str] = Field(None, alias='employeeNumber')

    employer_annual_cap_calculation_rule: typing.Optional[str] = Field(None, alias='employerAnnualCapCalculationRule')

    employer_calculation_rate_or_percent: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerCalculationRateOrPercent')

    employer_calculation_rule: typing.Optional[str] = Field(None, alias='employerCalculationRule')

    employer_current_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='employerCurrentAmount')

    employer_period_cap_calculation_rule: typing.Optional[str] = Field(None, alias='employerPeriodCapCalculationRule')

    exclude_from_workers_compensation: typing.Optional[str] = Field(None, alias='excludeFromWorkersCompensation')

    general_ledger_expense_account: typing.Optional[str] = Field(None, alias='generalLedgerExpenseAccount')

    general_ledger_pay_account: typing.Optional[str] = Field(None, alias='generalLedgerPayAccount')

    is401k: typing.Optional[bool] = Field(None, alias='is401k')

    is403b: typing.Optional[bool] = Field(None, alias='is403b')

    is408k: typing.Optional[bool] = Field(None, alias='is408k')

    is408p: typing.Optional[bool] = Field(None, alias='is408p')

    is457: typing.Optional[bool] = Field(None, alias='is457')

    is457b: typing.Optional[bool] = Field(None, alias='is457b')

    is457_f: typing.Optional[bool] = Field(None, alias='is457F')

    is501_c: typing.Optional[bool] = Field(None, alias='is501C')

    is_d125: typing.Optional[bool] = Field(None, alias='isD125')

    is_deduction_off_set: typing.Optional[bool] = Field(None, alias='isDeductionOffSet')

    is_deferred_compensation: typing.Optional[bool] = Field(None, alias='isDeferredCompensation')

    is_dependent_care: typing.Optional[bool] = Field(None, alias='isDependentCare')

    is_housing: typing.Optional[bool] = Field(None, alias='isHousing')

    is_non_qualified_plan: typing.Optional[bool] = Field(None, alias='isNonQualifiedPlan')

    is_public_employee_retirement: typing.Optional[bool] = Field(None, alias='isPublicEmployeeRetirement')

    is_prorated: typing.Optional[bool] = Field(None, alias='isProrated')

    is_section125: typing.Optional[bool] = Field(None, alias='isSection125')

    is_voided: typing.Optional[bool] = Field(None, alias='isVoided')

    is_voiding_record: typing.Optional[str] = Field(None, alias='isVoidingRecord')

    pay_date: typing.Optional[datetime] = Field(None, alias='payDate')

    payee_i_d: typing.Optional[str] = Field(None, alias='payeeID')

    pay_group: typing.Optional[str] = Field(None, alias='payGroup')

    period_control: typing.Optional[str] = Field(None, alias='periodControl')

    record_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='recordId')

    tax_calculation_group_id: typing.Optional[str] = Field(None, alias='taxCalculationGroupId')

    tax_category: typing.Optional[str] = Field(None, alias='taxCategory')

    timeclock_code: typing.Optional[str] = Field(None, alias='timeclockCode')

    vendor: typing.Optional[str] = Field(None, alias='vendor')

    wage_garnishment_additional_arrearage_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAdditionalArrearageAmount')

    wage_garnishment_allocate_as_arrears: typing.Optional[str] = Field(None, alias='wageGarnishmentAllocateAsArrears')

    wage_garnishment_amount_exempt: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAmountExempt')

    wage_garnishment_amount_exempt_from_levy: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAmountExemptFromLevy')

    wage_garnishment_amount_exemt_from_garn: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAmountExemtFromGarn')

    wage_garnishment_amount_subject_to_c_s: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAmountSubjectToCS')

    wage_garnishment_amount_subject_to_garnishment: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentAmountSubjectToGarnishment')

    wage_garnishment_deduction_tax_category: typing.Optional[str] = Field(None, alias='wageGarnishmentDeductionTaxCategory')

    wage_garnishment_disposable_income: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentDisposableIncome')

    wage_garnishment_minimum_wage_factor: typing.Optional[typing.Union[int, float]] = Field(None, alias='wageGarnishmentMinimumWageFactor')

    wage_garnishment_wage_code: typing.Optional[str] = Field(None, alias='wageGarnishmentWageCode')

    year_to_date_deferred_compensation_combined_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='yearToDateDeferredCompensationCombinedAmount')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
