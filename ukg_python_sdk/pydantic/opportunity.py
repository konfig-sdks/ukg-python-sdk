# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from ukg_python_sdk.pydantic.links import Links
from ukg_python_sdk.pydantic.locations import Locations
from ukg_python_sdk.pydantic.opportunity_behavior_criteria import OpportunityBehaviorCriteria
from ukg_python_sdk.pydantic.opportunity_company import OpportunityCompany
from ukg_python_sdk.pydantic.opportunity_compenasation import OpportunityCompenasation
from ukg_python_sdk.pydantic.opportunity_dedault_locale import OpportunityDedaultLocale
from ukg_python_sdk.pydantic.opportunity_description import OpportunityDescription
from ukg_python_sdk.pydantic.opportunity_education_criteria import OpportunityEducationCriteria
from ukg_python_sdk.pydantic.opportunity_full_time_equivalent import OpportunityFullTimeEquivalent
from ukg_python_sdk.pydantic.opportunity_head_count import OpportunityHeadCount
from ukg_python_sdk.pydantic.opportunity_incumbent import OpportunityIncumbent
from ukg_python_sdk.pydantic.opportunity_job import OpportunityJob
from ukg_python_sdk.pydantic.opportunity_job_boards import OpportunityJobBoards
from ukg_python_sdk.pydantic.opportunity_job_family import OpportunityJobFamily
from ukg_python_sdk.pydantic.opportunity_justification_comments import OpportunityJustificationComments
from ukg_python_sdk.pydantic.opportunity_license_criteria import OpportunityLicenseCriteria
from ukg_python_sdk.pydantic.opportunity_motivation_criteria import OpportunityMotivationCriteria
from ukg_python_sdk.pydantic.opportunity_recruiting_process import OpportunityRecruitingProcess
from ukg_python_sdk.pydantic.opportunity_skill_criteria import OpportunitySkillCriteria
from ukg_python_sdk.pydantic.opportunity_work_experience_criteria import OpportunityWorkExperienceCriteria
from ukg_python_sdk.pydantic.org_unit_groups import OrgUnitGroups

class Opportunity(BaseModel):
    title: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='title')

    description: typing.Optional[OpportunityDescription] = Field(None, alias='description')

    # The id of the opportunity associated with the candidate application.
    id: typing.Optional[str] = Field(None, alias='id')

    updated_at: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='updated_at')

    created_at: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='created_at')

    requisition_number: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='requisition_number')

    dedault_locale: typing.Optional[OpportunityDedaultLocale] = Field(None, alias='dedault_locale')

    compenasation: typing.Optional[OpportunityCompenasation] = Field(None, alias='compenasation')

    job: typing.Optional[OpportunityJob] = Field(None, alias='job')

    job_family: typing.Optional[OpportunityJobFamily] = Field(None, alias='job_family')

    locations: typing.Optional[typing.List[Locations]] = Field(None, alias='locations')

    company: typing.Optional[OpportunityCompany] = Field(None, alias='company')

    recruiter: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='recruiter')

    hiring_manager: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='hiring_manager')

    onboarding_owner: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='onboarding_owner')

    recruiting_process: typing.Optional[OpportunityRecruitingProcess] = Field(None, alias='recruiting_process')

    job_boards: typing.Optional[OpportunityJobBoards] = Field(None, alias='job_boards')

    published_date: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='published_date')

    closed_date: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='closed_date')

    status: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='status')

    is_featured: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='is_featured')

    is_shared_with_everyone: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='is_shared_with_everyone')

    internal_notes: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='internal_notes')

    skill_criteria: typing.Optional[OpportunitySkillCriteria] = Field(None, alias='skill_criteria')

    work_experience_criteria: typing.Optional[OpportunityWorkExperienceCriteria] = Field(None, alias='work_experience_criteria')

    education_criteria: typing.Optional[OpportunityEducationCriteria] = Field(None, alias='education_criteria')

    license_criteria: typing.Optional[OpportunityLicenseCriteria] = Field(None, alias='license_criteria')

    behavior_criteria: typing.Optional[OpportunityBehaviorCriteria] = Field(None, alias='behavior_criteria')

    motivation_criteria: typing.Optional[OpportunityMotivationCriteria] = Field(None, alias='motivation_criteria')

    is_continuous_opening: typing.Optional[bool] = Field(None, alias='is_continuous_opening')

    full_time_equivalent: typing.Optional[OpportunityFullTimeEquivalent] = Field(None, alias='full_time_equivalent')

    head_count: typing.Optional[OpportunityHeadCount] = Field(None, alias='head_count')

    hours_per_week: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='hours_per_week')

    hours_per_shift: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='hours_per_shift')

    staffing_plan_impact: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='staffing_plan_impact')

    target_start_date: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='target_start_date')

    incumbent: typing.Optional[OpportunityIncumbent] = Field(None, alias='incumbent')

    priority: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='priority')

    is_budgeted: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='is_budgeted')

    opening_reason: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='opening_reason')

    justification_comments: typing.Optional[OpportunityJustificationComments] = Field(None, alias='justification_comments')

    org_unit_groups: typing.Optional[typing.List[OrgUnitGroups]] = Field(None, alias='org_unit_groups')

    links: typing.Optional[typing.List[Links]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
