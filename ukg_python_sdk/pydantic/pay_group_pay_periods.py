# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PayGroupPayPeriods(BaseModel):
    is_active: typing.Optional[bool] = Field(None, alias='isActive')

    date_time_changed: typing.Optional[datetime] = Field(None, alias='dateTimeChanged')

    date_time_created: typing.Optional[datetime] = Field(None, alias='dateTimeCreated')

    date_time_fiscal_end_done: typing.Optional[datetime] = Field(None, alias='dateTimeFiscalEndDone')

    date_time_period_closed: typing.Optional[datetime] = Field(None, alias='dateTimePeriodClosed')

    date_time_period_opened: typing.Optional[datetime] = Field(None, alias='dateTimePeriodOpened')

    fiscal_year_end: typing.Optional[bool] = Field(None, alias='fiscalYearEnd')

    is_cts_created: typing.Optional[bool] = Field(None, alias='isCtsCreated')

    is_period_closed: typing.Optional[bool] = Field(None, alias='isPeriodClosed')

    is_qtdob_per_control: typing.Optional[bool] = Field(None, alias='isQtdobPerControl')

    is_ytdob_per_control: typing.Optional[bool] = Field(None, alias='isYtdobPerControl')

    monthly_pay_period_number: typing.Optional[int] = Field(None, alias='monthlyPayPeriodNumber')

    mqy_end_flag: typing.Optional[str] = Field(None, alias='mqyEndFlag')

    ob_type: typing.Optional[str] = Field(None, alias='obType')

    pay_date: typing.Optional[datetime] = Field(None, alias='payDate')

    pay_date_seq: typing.Optional[int] = Field(None, alias='payDateSeq')

    pay_group: typing.Optional[str] = Field(None, alias='payGroup')

    pay_period_id: typing.Optional[int] = Field(None, alias='payPeriodId')

    period_control: typing.Optional[str] = Field(None, alias='periodControl')

    period_end_date: typing.Optional[datetime] = Field(None, alias='periodEndDate')

    period_start_date: typing.Optional[datetime] = Field(None, alias='periodStartDate')

    period_type: typing.Optional[str] = Field(None, alias='periodType')

    susp_auto_pay: typing.Optional[str] = Field(None, alias='suspAutoPay')

    susp_direct_deposit: typing.Optional[str] = Field(None, alias='suspDirectDeposit')

    user_id_changed: typing.Optional[str] = Field(None, alias='userIdChanged')

    user_id_created: typing.Optional[str] = Field(None, alias='userIdCreated')

    notes: typing.Optional[str] = Field(None, alias='notes')

    audit_key: typing.Optional[int] = Field(None, alias='auditKey')

    payroll_state_id: typing.Optional[int] = Field(None, alias='payrollStateId')

    combine_nacha_file_name: typing.Optional[str] = Field(None, alias='combineNachaFileName')

    combine_nacha_file_override: typing.Optional[bool] = Field(None, alias='combineNachaFileOverride')

    tx_fil_app_date_time: typing.Optional[datetime] = Field(None, alias='txFilAppDateTime')

    tx_fil_app_user_id: typing.Optional[int] = Field(None, alias='txFilAppUserId')

    allow_web_pyrl_after_ye_recon: typing.Optional[bool] = Field(None, alias='allowWebPyrlAfterYeRecon')

    payroll_change_flags: typing.Optional[int] = Field(None, alias='payrollChangeFlags')

    payroll_transition_flags: typing.Optional[int] = Field(None, alias='payrollTransitionFlags')

    instant_check_move_rule: typing.Optional[bool] = Field(None, alias='instantCheckMoveRule')

    bring_in_payroll_batch_load: typing.Optional[bool] = Field(None, alias='bringInPayrollBatchLoad')

    bring_in_ppi_load: typing.Optional[bool] = Field(None, alias='bringInPpiLoad')

    bring_in_retro_pay_load: typing.Optional[bool] = Field(None, alias='bringInRetroPayLoad')

    lmw_active: typing.Optional[bool] = Field(None, alias='lmwActive')

    roe_pay_date: typing.Optional[datetime] = Field(None, alias='roePayDate')

    tax_arrears_collect_enabled: typing.Optional[bool] = Field(None, alias='taxArrearsCollectEnabled')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
