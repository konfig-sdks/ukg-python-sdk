# coding: utf-8

"""
    User Profile Details

    Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from ukg_python_sdk.pydantic.calc_group_dto import CalcGroupDto
from ukg_python_sdk.pydantic.pay_group_dto import PayGroupDto
from ukg_python_sdk.pydantic.work_detail_dto import WorkDetailDto
from ukg_python_sdk.pydantic.work_summary_clocks_dto import WorkSummaryClocksDto
from ukg_python_sdk.pydantic.work_summary_dto_exceptions import WorkSummaryDtoExceptions

class WorkSummaryDto(BaseModel):
    id: typing.Optional[int] = Field(None, alias='id')

    emp_id: typing.Optional[int] = Field(None, alias='empId')

    work_date: typing.Optional[datetime] = Field(None, alias='workDate')

    wrk_mins: typing.Optional[int] = Field(None, alias='wrkMins')

    authorized: typing.Optional[bool] = Field(None, alias='authorized')

    # true if work summary contain details with an overtime hour type
    overtime: typing.Optional[bool] = Field(None, alias='overtime')

    # true if LTA override exists on day
    absent: typing.Optional[bool] = Field(None, alias='absent')

    # time code used in LTA override if present
    absent_time_code: typing.Optional[str] = Field(None, alias='absentTimeCode')

    authorized_message: typing.Optional[str] = Field(None, alias='authorizedMessage')

    comments: typing.Optional[str] = Field(None, alias='comments')

    clocks: typing.Optional[WorkSummaryClocksDto] = Field(None, alias='clocks')

    work_details: typing.Optional[typing.List[WorkDetailDto]] = Field(None, alias='workDetails')

    exceptions: typing.Optional[WorkSummaryDtoExceptions] = Field(None, alias='exceptions')

    wrks_messages: typing.Optional[str] = Field(None, alias='wrksMessages')

    # true if timesheet has been locked
    read_only: typing.Optional[bool] = Field(None, alias='readOnly')

    read_only_reason: typing.Optional[str] = Field(None, alias='readOnlyReason')

    daily: typing.Optional[bool] = Field(None, alias='daily')

    flag1: typing.Optional[str] = Field(None, alias='flag1')

    flag2: typing.Optional[str] = Field(None, alias='flag2')

    flag3: typing.Optional[str] = Field(None, alias='flag3')

    flag4: typing.Optional[str] = Field(None, alias='flag4')

    flag5: typing.Optional[str] = Field(None, alias='flag5')

    udf1: typing.Optional[str] = Field(None, alias='udf1')

    udf2: typing.Optional[str] = Field(None, alias='udf2')

    udf3: typing.Optional[str] = Field(None, alias='udf3')

    udf4: typing.Optional[str] = Field(None, alias='udf4')

    udf5: typing.Optional[str] = Field(None, alias='udf5')

    udf6: typing.Optional[str] = Field(None, alias='udf6')

    udf7: typing.Optional[str] = Field(None, alias='udf7')

    udf8: typing.Optional[str] = Field(None, alias='udf8')

    udf9: typing.Optional[str] = Field(None, alias='udf9')

    udf10: typing.Optional[str] = Field(None, alias='udf10')

    pay_group: typing.Optional[PayGroupDto] = Field(None, alias='payGroup')

    calc_group: typing.Optional[CalcGroupDto] = Field(None, alias='calcGroup')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
